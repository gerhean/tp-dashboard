[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W11-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W11-2/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* This is **Jarvis, a personal butler for CS1101S Avengers**.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _Jarvis_) used for managing missions and quests deadlines, students\u0027 information and consultation timings for CS1101S tutors."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* It is named `Jarvis because it is the personal assistant to CS1101S tutors who are called Avengers, just like how Jarvis is the personal assistant to Iron Man in the movie Avengers`."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* For the detailed documentation of this project, see the **[Jarvis Product Website](https://ay2021s1-cs2103t-w11-2.github.io/tp/)**."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 1,
      "peironggg": 2,
      "-": 5,
      "wilinetan": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "mainClassName \u003d \u0027seedu.jarvis.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    compile group: \u0027org.seleniumhq.selenium\u0027, name: \u0027selenium-java\u0027, version: \u00273.8.1\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    archiveName \u003d \u0027jarvis.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 70,
      "wilinetan": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "### Associate Professor Damith Chatura Rajapakse"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* Role: Lecturer, Tutor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Wu Peirong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cimg src\u003d\"images/peironggg.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[[github](http://github.com/peironggg)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[[portfolio](team/peironggg.md)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* Responsibilities: API + Student Features"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "### Eryn Seo"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cimg src\u003d\"images/wireseo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "[[github](http://github.com/wireseo)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "[[portfolio](team/wireseo.md)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* Responsibilities: UI + Consultations Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "### Wiline Tan"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cimg src\u003d\"images/wilinetan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "[[github](http://github.com/wilinetan)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "[[portfolio](team/wilinetan.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* Responsibilities: Mission + Quest Features + GUI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "### Ng Zhen Teng"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cimg src\u003d\"images/ngzhenteng.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[[github](http://github.com/ngzhenteng)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[[portfolio](team/ngzhenteng.md)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* Responsibilities: Student Features + Testing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### Lim Jun Jie"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cimg src\u003d\"images/asuraxsoul.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[[github](http://github.com/asuraxsoul)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[[portfolio](team/asuraxsoul.md)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* Responsibilities: Tutor Task Features"
      }
    ],
    "authorContributionMap": {
      "wireseo": 4,
      "Asuraxsoul": 5,
      "ngzhenteng": 7,
      "peironggg": 6,
      "-": 37,
      "wilinetan": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "###Purpose"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The purpose of this document is to cover the multi-level design architecture of Jarvis, so that the intended audience"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "of this document can understand the relationship between components that make up Jarvis."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "###Audience"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "This developer guide is for anyone who wants to understand the internal software architecture of Jarvis."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The following groups of people are the intended audience:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* Jarvis developers: anyone who wish to upgrade Jarvis to support more functions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* CS1101S Avengers: tutors of CS1101S who wants to improve their efficiency and productivity."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "###Jarvis Overview"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Jarvis is a desktop app for CS1101S Teaching Assistants (Avengers), optimized for use via a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). Jarvis in general helps to organise and simplify"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "CS1101S tutors\u0027 administrative tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* [**`Scraper`**](#scraper-component): Scrapes Sourceacademy.com for course-info."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Each of the five components,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W11-2/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W11-2/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a student)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W11-2/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peironggg"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W11-2/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Scraper component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": "![Structure of the Scraper Component](images/ScraperClassDiagram.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peironggg"
        },
        "content": "**API** : [`Scraper.java`](https://github.com/AY2021S1-CS2103T-W11-2/tp/blob/master/src/main/java/seedu/address/scraper/Scraper.java)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peironggg"
        },
        "content": "The `Scraper` component,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* reads user login information from the `UserLogin` object passed to it."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* can scrape `Source Academy`(https://sourceacademy.nus.edu.sg) for course-info such as missions, quests, student names."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* can save the scraped information to `Model`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Get Missions Feature"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peironggg"
        },
        "content": "In this section, we will introduce how the `Get Missions Feature` works. We will do so through showing the expected path-execution"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peironggg"
        },
        "content": "and interaction of objects between the `ScraperManager` and `Chrome Driver`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Chrome Driver is a web scraper software provided by Google Chrome. It comes packaged with your download of Jarvis."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peironggg"
        },
        "content": "![Path Diagram of Get Missions](images/GetMissionsPathDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peironggg"
        },
        "content": "![Sequence Diagram of Get Missions](images/GetMissionsSequenceDiagram.png)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* The strange-looking string within the `XPath.by(...)` is a HTML descriptor for the HTML element that corresponds to each individual mission on SA."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* The `Chrome Driver`, which is of type `WebDriver`, will look for all HTML elements on SA that matches the HTML descriptor we passed in."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* `WebDriver` will return a `List\u003cWebElement\u003e`, with each element in the list corresponding to a single CS1101S mission. This list could of size 0 if there are no active missions that day."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": " \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** We discussed the workings of the getMissions() method here. In practice, the getStudents() and getQuests() methods work off a similar principle."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": " \u003c/div\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "## View Command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Structure of View Command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The following diagram shows the overview of the ViewCommand Class Diagram:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "![Sequence Diagram of View Mission Deadlines](images/ViewCommandClassDiagram.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "In the `ViewCommand` class, there is also a static message `MESSAGE_USAGE` for when user does not include a second argument since view"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "has to take in at least one argument. The message will guide the user on what parameters the `ViewCommand` can take in."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "In the `ViewCommandParser` class, under the `parse()` method, we reference the `Flag` class which is a class that encapsulates"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "the different flags that `ViewCommand` can parse. We use the `Flag` class to check for whether an input is valid and go on to parse"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "the flag and return the correct `ViewCommand` object."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### View Mission Deadlines Feature"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "In this section, we will introduce how the `View Mission Deadlines Feature` works. The sequence diagram for the View Mission Deadline Command is shown below:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "![Sequence Diagram of View Mission Deadlines](images/ViewMissionDeadlineSequenceDiagram.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "The `LogicManager` will call the `parseCommand` method of `AddressBookParser`, which then passes the second argument to the `ViewCommandParser` object."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "The `ViewCommandParser` will return a `ViewMissionDeadlineCommand` object. This object will then be ultimately returned to the `LogicManager`. Next, the `LogicManager` will call the `execute(model)` method using the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "`ViewMissionDeadlineCommand` object. In this method, it wil use the `Model` object to call the method : `updateMissionList()`, with parameter `PREDICATE_SHOW_ALL_MISSIONS` which will show all the missions. When completed, the `execute(model)` will return a"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "`CommandResult` object with the success message to the `LogicManager`, indicating that the command execution is a success."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "The View Quest Deadlines features work similarly to this as well."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### View Students Feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Next, we will introduce how the `View Students Feature` works. The following is a class diagram for View Student"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Commands."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![Class Diagram of View Student Commands](images/ViewStudentsClassDiagram.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* The abstract class `ViewCommand` extends from the abstract class `Command`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* Both `ViewAllStudentCommand` and `ViewOneStudentCommand` extend from the abstract class `ViewCommand`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* Both `ViewAllStudentCommand` and `ViewOneStudentCoVmmand` take in a Model object for the execute method, as such"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " both have a dependency on Model."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Now we will go into how the `View All Students Feature` works, the following is a sequence diagram modelling the"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "interaction between `ViewAllStudentsCommand`, `Model` and `CommandResult`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![Sequence Diagram of View All Students](images/ViewAllStudentsSequenceDiagram.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* The `ViewAllStudentsCommand`\u0027s`execute` method is first called with a model passed as an argument."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `execute` method then calls `Model`\u0027s `updateFilteredPersonList` method with a predicate which shows all students."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* A `CommandResult` object is created with the message \"Listed all students taught by you\" and returned to"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " `ViewALlStudentsCommand`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* The `CommandResult` object is returned to the caller of `execute`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### View Tasks Feature"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The View Task features involve viewing 4 categories of tasks which work similarly to the above as well. We can choose"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "to:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* View all `Task` in general,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* View all `Todo`,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* View all `Event`, or"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* View all `Deadline`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### View Consultations Feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Next, we will introduce how the `View Consultations Feature` works. The following is a class diagram for View"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Consultations Commands. There are three variants (view all consultations, view past consultations, view future"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  consultations) but they all share the same logic."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wireseo"
        },
        "content": "![Class Diagram of the three View Consultations Commands](images/ViewConsultationsClassDiagram.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* The abstract class `ViewCommand` extends from the abstract class `Command`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* Both `ViewConsultationCommand` and `ViewPastConsultationCommand` and `ViewUpcomingConsultationCommand` extend"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wireseo"
        },
        "content": "from the abstract class `ViewCommand`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* Both `ViewConsultationCommand` and `ViewPastConsultationCommand` and `ViewUpcomingConsultationCommand` take in a"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Model object for the execute method, as such both have a dependency on Model."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Now we will go into how the `View Consultations Feature` works, the following is a sequence diagram modelling the"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wireseo"
        },
        "content": "interaction between `ViewConsultationsCommand`, `Model` and `CommandResult`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wireseo"
        },
        "content": "![Sequence Diagram of a general View Consultation](images/ViewConsultationsSequenceDiagram.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* The `ViewConsultationsCommand`\u0027s`execute` method is first called with a model passed as an argument."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `execute` method then calls `Model`\u0027s `getConsultations` method with a predicate which shows all consultations of all"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "students."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* A `CommandResult` object is created with the message \"Listed all consultations: \" and returned to"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wireseo"
        },
        "content": " `viewAllConsultationsCommand`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* The `CommandResult` object is returned to the caller of `execute`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## Add Command"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Structure of Add Command"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The following diagram shows the overview of the AddComand Class Diagram:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "![Sequence Diagram of Add Commands](images/AddCommandClassDiagram.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003e This Add Command overall structure is similar to that of **View Command**."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* Upon parsing user input to the correct `AddCommand` (ie. `AddXYZCommand`) which is done by the `AddCommandParser`, the"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "correct `Model` object (eg. `Student`, `Task`) will be added to the corresponding list in `Model` class."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* Then, updated lists of data will be written to the `AddressBook`, and displayed on the GUI."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Add Task Feature"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The following diagram shows the overview of `AddCommand` Class Diagram which has a similar structure as other"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "`Commands`:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "![Class Diagram of Add Commands](images/AddTaskClassDiagram.png)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* The class `AddCommand` extends from the abstract class `Command`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `AddCommand` class interacts with `Model` and `Task` related classes."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `Task` class objects will be added to `Model` class upon successful `Add Commands`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `Todo`, `Event` and `Deadline` are classes that extend from from abstract class `Task`."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peironggg"
        },
        "content": "### Add Task Feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "In this section, we will introduce how the `Add Task Feature` works. We can add 3 different types of tasks, namely"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "`Todo`, `Event` and `Deadline`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `Todo` is a basic simple tasks that is usually not constrained by time; `Event` is"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "a task that requires completion at a particular point in time; `Deadline` is a task that requires completion before a"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "particular point in time."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The sequence diagram for the Add Todo Command is shown below:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "![Sequence Diagram of Add Task](images/AddTaskSequenceDiagram.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003e This sequence diagram applies to other `Add` commands such as adding `Event` and `Deadline`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* The `AddCommand`\u0027s`execute` method is first called with a model passed as an argument."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `execute` method then calls `AddCommandParser`\u0027s `hasTodo` method to check if the task is already contained within the"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Model class."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* If the task is already contained within the Model class, `AddCommand` will throw an Exception `CommandException`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* Else, `AddCommand` will add the new `Task` to the Model class and return a result `CommandResult` containing a"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "`SUCCESS` message."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* CS1101S tutor who has to keep track of student submissions and consultations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peironggg"
        },
        "content": "**Value proposition**: the only tool to keep tutor todos and responsibilities in check"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peironggg"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I …​                                                |"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------   | ----------------------------------------------------------- |"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions           | can refer to instructions when I forget how to use the App. |"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| `* * *`  | user                                       | edit a student                   | can keep the contact details of all my students updated.    |"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* * *`  | user                                       | view my students automatically   | can know who to contact.                                    |"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* * *`  | user                                       | list all unmarked assignments    | will not miss out on marking any overdue missions or quests.|"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* * *`  | user                                       | view the deadline of missions or quests  | know when I can start marking them.                 |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* *`    | user with a crowded calendar               | add consultations                | keep track of my schedule easily.                           |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* *`    | user                                       | list my consultations            | be reminded of my schedule.                                 |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* *`    | user                                       | view deadlines for missions and quests | can schedule when to mark them.                       |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "| `* *`    | user                                       | add my own tasks                 | can be consolidate all TA and non-TA scheduling into Jarvis.|"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* *`    | user                                       | list my own tasks                | can have an overview of all my tasks.                       |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| `* *`    | user                                       | mark my tasks as done            | can keep track of complete and incomplete tasks.            |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "(For all use cases below, the **System** is `Jarvis` and the **Actor** is the `CS1101S tutor`, unless specified otherwise)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Use case: UC1 - View consultation sessions**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1.  User requests to view consultations."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2.  Jarvis shows a list of all consultations."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters a name with the command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows the list of consultation sessions belonging to the student."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters an invalid name with any command."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1c. The user requests to view only past sessions."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1c1. Jarvis shows the list of all past consultation sessions."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1d. The user requests to view only past sessions with a name."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1d1. Jarvis shows the list of all past consultation sessions belonging to the student."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1e. The user requests to view only future sessions."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1e1. Jarvis shows the list of all future consultation sessions."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1f. The user requests to view only future sessions with a name."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1f1. Jarvis shows the list of all future consultation sessions belonging to the student."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC2 - View Mastery Check (MC) sessions**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1.  User requests to view MC sessions."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2.  Jarvis shows a list of all MC sessions."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters a name with the command."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows the list of MC sessions belonging to the student."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters an invalid name with any command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1c. The user requests to view only past sessions."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1c1. Jarvis shows the list of all past MC sessions."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1d. The user requests to view only past sessions with a name."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1d1. Jarvis shows the list of all past MC sessions belonging to the student."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1e. The user requests to view only future sessions."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1e1. Jarvis shows the list of all future MC sessions."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1f. The user requests to view only future sessions with a name."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1f1. Jarvis shows the list of all future MC sessions belonging to the student."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC3 - Delete a consultation session**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1. User requests to delete a consultation session."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2. Jarvis shows a list of consultation sessions with id numbers."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "wireseo"
        },
        "content": "3. User requests to delete consultation session with id number."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wireseo"
        },
        "content": "4. Jarvis deletes the consultation session."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters a name with the command."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows the list of consultation sessions belonging to the student."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters an invalid name with the command."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 3a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC4 - Delete a Mastery Check (MC) session**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1. User requests to delete a MC session."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2. Jarvis shows a list of MC sessions with id numbers."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "wireseo"
        },
        "content": "3. User requests to delete MC session with id number."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wireseo"
        },
        "content": "4. Jarvis deletes the MC session."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters a name with the command."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows the list of MC sessions belonging to the student."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters an invalid name with the command."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 3a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC5 - Add a consultation session**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1. User requests to add a Consultation session."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2. Jarvis adds a Consultation session for the student at the specified date and time."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters an invalid date or time."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters a nonexistent name."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC6 - Add a Mastery Check (MC) session**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "wireseo"
        },
        "content": "1. User requests to add a MC session."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "wireseo"
        },
        "content": "2. Jarvis adds a MC session for the student at the specified date and time."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "wireseo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1a. The user enters an invalid date or time."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* 1b. The user enters a nonexistent name."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wireseo"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC7 - Add a personal todo task**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. User requests to add a personal todo task."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. Jarvis adds a personal todo task with description."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user enters an invalid command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user did not enter a description."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC8 - Add a personal event task**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. User requests to add a personal event task at the specified time and date."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. Jarvis adds a personal event task at the specified time and date."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user enters an invalid command."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user did not enter a description."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1c. The user enters an invalid date or time."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1c1. Jarvis shows an error message."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC9 - Add a personal deadline task**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. User requests to add a personal deadline task at the specified time and date."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. Jarvis adds a personal deadline task at the specified time and date."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user enters an invalid command."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user did not enter a description."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1c. The user enters an invalid date or time."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1c1. Jarvis shows an error message."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC10 - Delete a personal task**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. User requests to delete a personal task."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. Jarvis shows a list of tasks with id numbers."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "3. User requests to delete the task with id number."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "4. Jarvis deletes the task."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user knows that he wants to delete a todo task from todo list."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows the list of todos."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user knows that he wants to delete an event task from event list."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows the list of events."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1c. The user knows that he wants to delete a deadline task from deadline list."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1c1. Jarvis shows the list of deadlines."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1d. The user enters an invalid command."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1d1. Jarvis shows an error message."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 3a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC11 - View personal tasks**"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1.  User requests to view his personal tasks."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2.  Jarvis shows a list of tasks."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user only wants to view todo tasks."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows todo task list."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user only wants to view event tasks."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows event task list."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1c. The user only wants to view deadline tasks."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows deadline task list."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1d. The user enters an invalid command."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows an error message."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Use case: UC**12 - Mark a personal task as done**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. User requests to mark a personal task as done."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. Jarvis shows a list of tasks with id numbers."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "3. User requests to mark the task with id number as done."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "4. Jarvis marks the task as done."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user knows that he wants to mark a todo task from todo list as done."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis shows the list of todos."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1b. The user knows that he wants to mark an event task from event list as done."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1b1. Jarvis shows the list of events."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1c. The user knows that he wants to mark a deadline task from deadline list as done."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1c1. Jarvis shows the list of deadlines."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 3."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1d. The user enters an invalid command."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1d1. Jarvis shows an error message."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 3a1. Jarvis shows an error message."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Use case: UC13 - Closes the Jarvis program**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. The user finishes using Jarvis program."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. The user proceeds to close the program."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* 1a. The user forgets to close the program."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * 1a1. Jarvis continues to run."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "peironggg"
        },
        "content": "1.  Should work on _mainstream Operating System_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "2.  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "wireseo"
        },
        "content": "4. The system should be backward compatible with data produced by earlier versions of the system."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "wireseo"
        },
        "content": "5. The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "wireseo"
        },
        "content": "6. The system should respond within one second."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "wireseo"
        },
        "content": "7. For now, the product is not required to handle the printing of reports."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "wireseo"
        },
        "content": "8. The application should not use copyrighted images anywhere in the UI."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "9.  Should be easy for the user to migrate all information in Jarvis onto a separate computer."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Mainstream Desktop Operating System**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Mastery Check**: Type of special consultation that is recorded and graded in the CS1101S module."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "### Deleting a student"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Deleting a student while all students are being shown"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   1. Prerequisites: List all students using the `list` command. Multiple students in the list."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "      Expected: No student is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "wireseo": 197,
      "Asuraxsoul": 310,
      "ngzhenteng": 25,
      "peironggg": 51,
      "-": 294,
      "wilinetan": 15
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "   1. Run the `seedu.jarvis.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 54
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "   e.g. `seedu.jarvis.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "   e.g. `seedu.jarvis.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "   e.g. `seedu.jarvis.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Jarvis is a desktop app for CS1101S Teaching Assistants (Avengers), optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Jarvis can get your TA administrative tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "1. [Overview](#1-overview)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [1.1 Introduction](#11-introduction)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [1.2 Purpose](#12-purpose)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "2. [About the User Guide](#2-about-the-user-guide)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "3. [Quick Start](#3-quick-start)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "4. [Navigating Jarvis](#4-navigating-jarvis)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [4.1 UI Layout](#41-ui-layout)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "5. [Logging into Jarvis](#5-logging-into-jarvis)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "6. [Features](#6-features)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.1 General Notes about Command Format](#61-general-notes-about-command-format)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.2 Viewing help : `help`](#62-viewing-help--help)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.3 Adding Information : `add`](#63-adding-information--add)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.3.1 Adding Todos : `add -t`](#631-adding-todos--t)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.3.2 Adding Events : `add -e`](#632-adding-events---e)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.3.3 Adding Deadlines : `add -d`](#633-adding-deadlines---d)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.3.4 Adding Consultations : `add -c`](#634-adding-consultations---c)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.3.5 Adding Mastery Checks : `add -mc`](#635-adding-mastery-checks---mc)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.4 Editing Information : `edit`](#64-editing-information--edit)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.4.1 Editing Login Information : `edit -l`](#641-editing-login-information---l)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        * [6.4.2 Editing Student Information : `edit -s`](#642-editing-student-information---s)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        * [6.4.3 Editing Mastery Checks : `edit -mc`](#643-editing-mastery-checks---mc)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.5 Deleting Information : `delete`](#65-deleting-information--delete)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.5.1 Deleting Tasks : `delete -t`](#651-deleting-tasks---t)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.5.2 Deleting Consultations : `delete -c`](#652-deleting-consultations---c)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.5.3 Deleting Mastery Checks : `delete -mc`](#653-deleting-mastery-checks---mc)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.6 Viewing Information : `view`](#66-viewing-information--view)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.1 Viewing a list of all students : `view -s`](#661-viewing-a-list-of-all-students---s)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.2 Viewing one student : `view -s NAME`](#662-viewing-one-student---s-name)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.3 Viewing all consultation sessions : `view -c`](#663-viewing-all-consultation-sessions---c)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.4 Viewing past consultation sessions: `view -cp`](#664-viewing-past-consultation-sessions---cp)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.5 Viewing upcoming consultation sessions: `view -cu`](#665-viewing-upcoming-consultation-sessions---cu)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.6 Viewing all Mastery Check sessions: `view -mc`](#666-viewing-all-mastery-check-sessions---mc)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.7 Viewing past Mastery Check sessions: `view -mcp`](#667-viewing-past-mastery-check-sessions--mcp)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.8 Viewing upcoming Mastery Check sessions: `view -mcu`](#668-viewing-upcoming-mastery-check-sessions--mcu)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.9 Viewing deadline for missions: `view -m`](#669-viewing-deadline-for-missions---m)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.10 Viewing deadline for quests: `view -q`](#6610-viewing-deadline-for-quests---q)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.11 Viewing ungraded missions: `view -um`](#6611-viewing-ungraded-missions---um)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        * [6.6.12 Viewing ungraded quests: `view -uq`](#6612-viewing-ungraded-quests---uq)     "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        * [6.6.13 Viewing all Tasks: `view -t`](#6613-viewing-all-tasks---t)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        * [6.6.14 Viewing all Todos: `view -tt`](#6614-viewing-all-todos---tt)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        * [6.6.15 Viewing all Events: `view -te`](#6615-viewing-all-events---te)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        * [6.6.16 Viewing all Deadlines: `view -td`](#6616-viewing-all-deadlines---td)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.7 Exiting the program: `exit`](#67-exiting-the-program--exit)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [6.8 Saving the data](#668-viewing-upcoming-mastery-check-sessions--mcu)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "7. [Command Summary](#7-command-summary)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.1 Add Command Summary](#71-add-command-summary)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.2 Edit Command Summary](#72-edit-command-summary)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.3 Delete Command Summary](#73-delete-command-summary)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.4 View Command Summary](#74-view-command-summary)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.5 Exit Command Summary](#75-exit-command-summary)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - [7.6 Help Command Summary](#76-help-command-summary)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "8. [Glossary](#8-glossary)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    - [8.1 Difference Between Consultations and Mastery Checks](#81-difference-between-consultations-and-mastery-checks)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "9. [FAQ](#9-faq)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 1.1 Introduction"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Jarvis is a desktop app for CS1101S Teaching Assistants (Avengers), optimized for use via a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). Jarvis in general helps to organise and simplify"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "CS1101S tutors\u0027 administrative tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 1.2 Purpose"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "As an Avenger, not only do you have immense power but you are also burdened with inevitable great responsibility."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Not to worry, Jarvis is here to empower you to manage your personal tasks while teaching others efficiently and"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "effectively."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 2. About the User Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "This section aims to remind you of the important parts to take note of while reading the user guide."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 3. Quick start"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Download the latest _jarvis.jar_ and your operating system\u0027s _Chrome Driver_ from [here](https://github.com/AY2021S1-CS2103T-W11-2/tp/releases/tag/v1.3)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "It is crucial to have the Chrome Driver in order for Jarvis to start up, if the GUI does not launch,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Please check that you have installed the correct driver"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    1. Windows: chromedriver.exe"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    1. MacOS: chromedriver_mac"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    1. Linux: chromedriver_linux"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "1. Copy both files to the folder you want to use as the _home folder_ for your Jarvis."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. There are two options for launching Jarvis."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    1. Double-click the `jarvis.jar` file to start the app."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    1. Launch Jarvis from the the Windows Command Prompt or MacOS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    command line by navigating to the directory containing jarvis.jar,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    then typing the command `java -jar jarvis.jar`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    A GUI similar to the screenshot below should appear in a few seconds."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   ![Jarvis](images/userguide/Jarvis.png)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Upon start up, you will be prompted to log in to unlock Jarvis\u0027s"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " full set of features."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " Please refer to the logging in segment below to complete your log in."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * `view -s:  Lists all students. `"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * `view -s John Doe: Lists information about a student named John Doe.`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   * `add -t DESCRIPTION : Adds a todo task with specified description.`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   * `edit -t TASK_ID : Marks the task referenced by Task_ID as Done.`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * `exit : Exits the app.`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "1. Refer to the Features below for details of each command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 4. Navigating Jarvis"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Jarvis has a Graphical User Interface centered around a command input box on the top, surrounded by a light green"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "line. The green box below the command input box is the user feedback box. Jarvis provides feedback to the user through"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "this box."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 4.1 UI Layout"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "   * The user interface is split into clearly marked tabs: `Student`, `Mission`, `Quest`, `Consultation`, `Mastery Check`, `Task`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   * Clicking on each tab will give you the information you require for that field."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![Jarvis](images/userguide/Jarvis.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "The core features are based on Students, Missions, Quests, Consultations, Mastery Checks and Tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Each core feature has a tab for the organisation of its information."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "To navigate the features, there are 2 methods which could be used individually, or mixed. We have designed"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "this flexibility with you, the user in mind."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " 1. Only inputting commands into the box annotated \"Enter command here..\"."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " 1. Clicking on the tabs."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 5. Logging into Jarvis"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "The following is the prompt upon first log in, you are prompted to key in your Sourceacademy username and password:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![NoLoginDetails](images/userguide/loginPrompt.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "To log in, simply edit your log in details with the following command:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `edit -l u/LUMINUS_USERNAME p/LUMINUS_PASSWORD`**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `edit -l u/nusstu\\e1234567 p/testpassword`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "An example of the command being inputted:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![LoginUsernamePasswordInput](images/userguide/editLoginDetails.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Within the green rectangle box, Jarvis will notify you if the log in was successful. Upon success, all information from"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " sourceacademy will be visible"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " to you."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 6. Features"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.1 General Notes about Command Format"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * Words in UPPER_CASE are the parameters to be supplied by you."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "   \u003cbr\u003e e.g. in `add -t DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `add -t Mark Missions`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * Items in square brackets are optional."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wireseo"
        },
        "content": "   \u003cbr\u003e e.g `view -s [NAME]`, name is an optional parameter. It can be used as `view -s` or as `view -s [John]`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * Parameters can be in any order."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "   \u003cbr\u003e e.g. if the command specifies `t/TELEGRAM e/EMAIL`, `e/EMAIL t/TELEGRAM` is also acceptable."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   * Commands with arrows indicate a multi-step process."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   \u003cbr\u003e e.g. `delete -c → 1` means that you should enter `delete -c` first and then `1` after the prompt"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   has been processed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "**Notes about Jarvis\u0027 relationship with Sourceacademy:** \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* Students’ names that are under the Avenger will be fetched automatically from sourceacademy.nus.edu.sg upon startup."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* Luminus username and passwords will be stored in plaintext."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.2 Viewing help : `help`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `help`**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.3 Adding Information : `add`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### General Notes on Tasks"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Each `Task` you create, be it `Todo`, `Event` or `Deadline`, there will be an unique ID assigned to each of them, so"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "that there will be no 2 of the same Task ID in your Task List at any point of Time. The Task ID is reflected as"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003eeg. D1, E5, T21"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "The first alphabet \"T\", \"E\" and \"D\" refers to `Todo`, `Event`, and `Deadline` respectively, and the number followed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "after the alphabet is the Task Number, which refers to the index of the `Task` you created with respect to all the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "`Task` you ever created."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.3.1 Adding Todos `-t`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Adds your personal `Todo` with a `description`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![AddTodo](images/userguide/addTodo.png)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `add -t DESCRIPTION`**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -t Clear the bin`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -t Return calculator to Mary`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.3.2 Adding Events : `-e`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Adds your personal `Event` with a `description`, to attend at a specific `date` and `time`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![AddEvent](images/userguide/addEvent.png)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `add -e DESCRIPTION d/YYYY-MM-DD t/HH:MM`**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -e John’s birthday party d/2020-09-21 t/20:00`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -e CS2103T team meeting d/2020-09-27 t/10:30`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "An `Event` requires extra `date` and `time` specifications in order to create."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.3.3 Adding Deadlines : `-d`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Adds your personal `Deadline` with a `description`, to complete by a specific `date` and `time`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![AddDeadline](images/userguide/addDeadline.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `add -d DESCRIPTION d/YYYY-MM-DD t/HH:MM`**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -d CS2103T Week 5 ip tasks d/2020-09-08 t/23:59`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -d Research project report d/2020-10-05 t/10:30`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Similar to `Event`, a `Deadline` requires extra `date` and `time` specifications in order to create."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.3.4 Adding Consultations : `-c`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Adds a `Consultation` session with a `Student` at a specific `date` and `time`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `add -c NAME d/YYYY-MM-DD t/HH:MM`**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -c John Doe d/2020-09-20 t/13:30`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -c Mary Jane d/2021-01-02 t/09:15`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.3.5 Adding Mastery Checks : `-mc`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Adds a `Mastery Check` session with a `Student` at a specific `date` and `time`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `add -mc NAME d/YYYY-MM-DD t/HH:MM`**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -mc John Doe d/2020-09-20 t/13:30`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `add -mc Mary Jane d/2021-01-02 t/09:15`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.4 Editing Information : `edit`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.4.1 Editing Login Information : `-l`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Similar to the format for editing students above, you can use tags to specify the field to be edited."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Format: `edit -l u/LUMINUS_USERNAME p/LUMINUS_PASSWORD`**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* `edit -l u/nusstu\\e1234567 p/testpassword`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* `edit -l p/testpassword`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eNotes:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* Do note that it takes a load time of around ~5 seconds after entering this command for the changes from Sourceacademy to be reflected in the GUI."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* After the students, missions and quests have loaded, take note that the `Telegram` and `Email` fields of the student are placeholder values."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* This is because SA does not contain these 2 fields of any student. Editing the student details will save the updated values. "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peironggg"
        },
        "content": "#### 6.4.2 Editing Student Information : `-s`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003e**Format: `edit -s INDEX n/NAME t/TELEGRAM e/EMAIL`**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* `edit -s 1 e/koolguy@gmail.com t/handsome`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* `edit -s 3 n/Timots`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wireseo"
        },
        "content": "#### 6.4.2 Editing Mastery Checks : `-mc`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Edits the score of a `Mastery Check` session with a `Student`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `edit -mc INDEX s/SCORE`**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* `edit -s 1 s/0`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* `edit -s 3 s/1`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Do note that the SCORE parameter can only be 0 or 1, according to the actual restrictions of mastery check pass/fail in CS1101S."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.5 Deleting Information : `delete`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.5.1 Deleting Tasks : `-t`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Deletes a task based on the `TASK_ID` you specify."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![DeleteTask](images/userguide/deleteTask.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format:`delete -t TASK_ID`**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `delete -t T3`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `delete -t D2`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.5.2 Deleting Consultations : `-c`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows a list of `Consultations` with `id numbers` so that you can specify which session you want to delete."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `delete -c`**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `delete -c"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   → 3`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.5.3 Deleting Mastery Checks : `-mc`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Similar to the above process of deleting consultations, deleting `Mastery Checks` first"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "shows a list of `Mastery Checks` with `id numbers` so that you can specify which session you want to delete."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `delete -mc`**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `delete -mc → 3`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.6 Viewing Information : `view`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.1 Viewing a list of all students : `-s`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Shows a list of all students under the tutor in JARVIS."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Please take note of the command inputted into the command box to understand how the respective commands are inputted."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![ViewAllStudentsCommand](images/userguide/viewAllStudents.png)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -s`**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.2 Viewing one student : `-s [NAME]`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows a specific student if a student name is entered after the command, Jarviss."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![ViewOneStudentCommand](images/userguide/viewOneStudent.png)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003e**Format: `view -s [NAME]`**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* `view -s John Doe`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.3 Viewing all consultation sessions : `-c`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Shows all `confirmed consultation` sessions, both past and upcoming."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `view -c`**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -c`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.4 Viewing past consultation sessions : `-cp`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Shows all `past consultation` sessions."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `view -cp`**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -cp`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.5 Viewing upcoming consultation sessions : `-cu`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Shows all `upcoming consultation` sessions."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cbr\u003e**Format: `view -cu`**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -cu`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.6 Viewing all Mastery Check sessions : `-mc`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows all `confirmed MC` sessions, both past and upcoming."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -mc`**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -mc`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.7 Viewing past Mastery Check sessions : `mcp`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows all `past MC` sessions."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -mcp`**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -mcp`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.8 Viewing upcoming Mastery Check sessions : `mcu`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows all `upcoming MC` sessions."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -mcu`**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cbr\u003eExamples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* `view -mcu`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.9 Viewing deadline for missions : `-m`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Shows the deadline for the current mission(s)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cbr\u003e**Format: `view -m`**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "You may also click on the `Mission` tab to do so."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![FetchMission](images/userguide/viewMissions.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.10 Viewing deadline for quests : `-q`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Shows the deadline for the current quest(s)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cbr\u003e**Format: `view -q`**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "You may also click on the `Quest` tab to do so."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![FetchQuest](images/userguide/viewQuests.png)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.11 Viewing ungraded missions : `-um`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the missions that you have not yet graded."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![ViewUngradedMissions](images/userguide/viewUngradedMissions.png)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cbr\u003e**Format: `view -um`**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "#### 6.6.12 Viewing ungraded quests : `-uq`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the quests that you have not yet graded."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "![ViewUngradedQuests](images/userguide/viewUngradedQuests.png)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cbr\u003e**Format: `view -uq`**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "peironggg"
        },
        "content": "#### 6.6.13 Viewing all Tasks : `-t`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the list of all your current tasks."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -t`**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "peironggg"
        },
        "content": "#### 6.6.14 Viewing all Todos : `-tt`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the list of all your current todos."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -tt`**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "peironggg"
        },
        "content": "#### 6.6.15 Viewing all Events : `-te`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the list of all your current events."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -te`**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "peironggg"
        },
        "content": "#### 6.6.16 Viewing all Deadlines : `-td`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Shows the list of all your current deadlines."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e**Format: `view -td`**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 6.7 Exiting the program : `exit`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cbr\u003e**Format: `exit`**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.7 Saving the data"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "JARVIS data are saved in the file `jarvis.json` automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Note that only `Student`, `Consultation`, `Mastery Check` and `Task` data are saved to the hard drive since `Mission` and `Quest` data"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "are likely to change frequently."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 7. Command Summary"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.1 Add Command Summary"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Tag | Format, Examples |"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | --- | ---------------- |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Add Todo | -t | add -t DESCRIPTION |"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Add Event | -e | add -e DESCRIPTION d/YYYY-MM-DD t/HH:MM |"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Add Deadline | -d | add -d DESCRIPTION d/YYYY-MM-DD t/HH:MM |"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Add Consultation | -c | add -c NAME d/YYYY-MM-DD t/HH:MM |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Add Mastery Check | -mc | add -c NAME d/YYYY-MM-DD t/HH:MM |"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.2 Edit Command Summary"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Tag | Format, Examples |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | --- | ---------------- |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Edit Login details | -l | edit -l u/LUMINUS_USERNAME p/LUMINUS_PASSWORD |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| Edit Student details | -s | edit -s INDEX n/NAME t/TELEGRAM e/EMAIL |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.3 Delete Command Summary"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Tag | Format, Examples |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | --- | ---------------- |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Delete Task | -t | delete -t TASK_ID |"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Delete Consultation | -c | delete -c NAME \u003cbr\u003eE.g. delete -c → 3 / delete -c John Doe → 2 |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Delete Mastery Check | -mc | delete -mc NAME \u003cbr\u003eE.g. delete -mc → 3 / delete -mc John Doe → 2 |"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.4 View Command Summary"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Tag | Format, Examples |"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | --- | ---------------- |"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View one Student | -s | view -s NAME |"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Consultations | -c | view -c NAME \u003cbr\u003eE.g. view -c / view -c John Doe |"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Past Consultations | -cp | view -cp NAME \u003cbr\u003eE.g. view -cp, view -cp John Doe |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Upcoming Consultations | -cu | view -cu NAME \u003cbr\u003eE.g. view -cu / view -cu John Doe |"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Mastery Checks | -mc | view -mc |"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Past Mastery Checks | -mcp | view -mcp |"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Upcoming Mastery Checks | -mcu | view -mcu  |"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| View deadlines for Missions | -m | view -m |"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| View deadlines for Quests | -q | view -q |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| View ungraded Missions | -um | view -um |"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| View ungraded Quests | -uq | view -uq |"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Tasks | -t | view -t |"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Todos | -tt | view -tt |"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Events | -te | view -te |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| View all Deadlines | -td | view -td |"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.5 Exit Command Summary"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Format, Examples |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | ---------------- |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Exits program | `exit` |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "### 7.6 Help Command Summary"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| Function | Format, Examples |"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "| -------- | ---------------- |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "| Provide help with program commands | `help` |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 8. Glossary"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wireseo"
        },
        "content": "### 8.1 Difference Between Consultations and Mastery Checks"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Mastery Checks are a specific type of consultations that is mandatory and graded in CS1101S, unlike normal consultations, and thus are displayed in separate tabs in Jarvis."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## 9. FAQ"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "`Q: How do I transfer my data to another Computer?`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cbr\u003e`A: Install the app in the other computer and overwrite the empty data file(.txt file) it creates with the file(.txt file) that contains the data of your previous JARVIS home folder.`"
      }
    ],
    "authorContributionMap": {
      "wireseo": 20,
      "Asuraxsoul": 230,
      "ngzhenteng": 121,
      "peironggg": 33,
      "-": 102,
      "wilinetan": 27
    }
  },
  {
    "path": "docs/diagrams/AddCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class AddXYZCommand"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class \"{abstract}\\nCommand\" {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + {abstract} execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class Model \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /\u0027 Attributes \u0027/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - FilteredList\u003cStudent\u003e filteredStudents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - FilteredList\u003cMission\u003e filteredMissions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - FilteredList\u003cQuest\u003e filteredQuests"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    - FilteredList\u003cTask\u003e filteredTasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + hasXYZ(xyz)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + addXYZ(xyz)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getMissionList() : ObservableList\u003cMission\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getQuestList() : ObservableList\u003cQuest\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getStudentList() : ObservableList\u003cStudent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getTaskList() : ObservableList\u003cTask\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class \"{abstract}\\nAddCommand\"{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class AddCommandParser implements Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + parse(args : String) : AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "interface Parser\u003cT\u003e \u003c\u003cinterface\u003e\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    parse(userInput : String) : AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class Flag {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getFlag(): String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + isValidFlag(): boolean"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class AddXYZParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\"{abstract}\\nAddCommand\" \u003c..left AddCommandParser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\"{abstract}\\nAddCommand\" ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Model ..\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\"{abstract}\\nAddCommand\" --up|\u003e \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddCommandParser ..\u003e Flag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddXYZCommand -right-|\u003e \"{abstract}\\nAddCommand\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddXYZParser -left-\u003e AddCommandParser"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "note as N1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  \u003csize: 11\u003e\u003cu\u003eexamples:\u003c/u\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  \u003csize: 11\u003ehasTodo(todo),\u003c/size\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  \u003csize: 11\u003eaddStudent(student)\u003c/size\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "end note"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "N1 .right. Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 68
    }
  },
  {
    "path": "docs/diagrams/AddTaskClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "CommandResult execute()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class AddCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "interface Model"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class Todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class Deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Command \u003c|- AddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddCommand .right.\u003e Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Task \u003c|-- Todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Task \u003c|-- Event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Task \u003c|-- Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddCommand ..\u003e Task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Task \"*\" -\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 27
    }
  },
  {
    "path": "docs/diagrams/AddTaskSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":AddCommand\" as AddCommand SCRAPER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":ModelManager\" as ModelManager SCRAPER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":AddressBook\" as AddressBook SCRAPER_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":CommandException\" as CommandException SCRAPER_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":CommandResult\" as CommandResult SCRAPER_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[-\u003e AddCommand : execute(model)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "AddCommand -\u003e ModelManager : hasTodo(Todo)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ModelManager --\u003e AddCommand : boolean"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "alt !boolean, duplicate object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    create CommandException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    AddCommand -\u003e CommandException : new CommandException(MESSAGE_DUPLICATE_TASK)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    activate CommandException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    CommandException --\u003e AddCommand : commandException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    deactivate CommandException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "else boolean, unique object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    AddCommand -\u003e ModelManager : addTodo(Todo)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    ModelManager -\u003e AddressBook : addTodo(Todo)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    create CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    AddCommand -\u003e CommandResult : new CommandResult(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    activate CommandResult"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    CommandResult --\u003e AddCommand : commandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    deactivate CommandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "end"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[\u003c-- AddCommand : result / exception"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 38
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    Class Scraper SCRAPER_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main #grey"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "UI -[#green]\u003e Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right[#green]-\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -[#blue]-\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down[#blue]-\u003e Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Scraper -[#black]-\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Main -[#grey]-\u003e Scraper"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Main -up[#grey]-\u003e Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right[STORAGE_COLOR].\u003eFile"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "User ..\u003e UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 31
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueStudentsList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentsList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "UniqueTagList -[hidden]down- UniqueStudentsList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "UniqueStudentsList o-right-\u003e Student"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Student -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Student *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Student *--\u003e Telegram"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Student *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Student *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peironggg": 9,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/GetMissionsPathDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": ":JARVIS calls getMissions();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "If () then ([login information does not exist])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    :Returns;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    else ([login information exists])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    If () then ([user is not authenticated])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    :Calls authenticate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    else ([user is authenticated])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        :Authenticates through Luminus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        :Navigates to Missions page on SA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        :Fetches information of all open missions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peironggg": 22
    }
  },
  {
    "path": "docs/diagrams/GetMissionsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "box ScraperManager SCRAPER_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "participant \":ScraperManager\" as ScraperManager SCRAPER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "participant \":WebDriver\" as WebDriver SCRAPER_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[-\u003e ScraperManager : getMissions()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "activate ScraperManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "ScraperManager -\u003e WebDriver : get(\"sourceacademy.nus.edu.sg\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "activate WebDriver"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "deactivate WebDriver"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "ScraperManager -\u003e WebDriver : findElements(By.xpath(\"//h4[@class\u003d\u0027bp3-heading listing-title\u0027]\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "activate WebDriver"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "WebDriver -\u003e ScraperManager : missionTitles: List\u003cWebElement\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "deactivate WebDriver"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "ScraperManager -\u003e Model : saveToStorage(mission)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "[\u003c--ScraperManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "deactivate ScraperManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peironggg": 35
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Class Telegram"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Person *--\u003e Telegram"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Name -[hidden]right-\u003e Telegram"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Telegram -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/ScraperClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "class Scraper \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + authenticate() : void"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getMissions() : void"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getQuests() : void"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getStudents() : void"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getUngradedMissionsAndQuests() : void"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + shutDown() : void"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "class ReadOnlyUserLogin \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getUsername() : String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    + getUserPassword() : String"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "class UserLogin implements ReadOnlyUserLogin {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - username : String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - password: String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "class ScraperManager implements Scraper {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /\u0027 Fields \u0027/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - driver : WebDriver"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - userLogin : UserLogin"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - model : Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    - isAuthenticated: boolean"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "ScraperManager o-\u003e \"1\" UserLogin"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 3,
      "peironggg": 35
    }
  },
  {
    "path": "docs/diagrams/ViewAllStudentsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "participant \":ViewAllStudentsCommand\" as ViewAllStudentsCommand SCRAPER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "participant \":Model\" as Model SCRAPER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "participant \":CommandResult\" as CommandResult SCRAPER_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[-\u003e ViewAllStudentsCommand : execute(model)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "activate ViewAllStudentsCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewAllStudentsCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_STUDENTS)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Model --\u003e ViewAllStudentsCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewAllStudentsCommand -\u003e CommandResult : CommandResult(\"Listed all students taught by you\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "CommandResult --\u003e ViewAllStudentsCommand : commandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "[\u003c-- ViewAllStudentsCommand : commandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "deactivate ViewAllStudentsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 33
    }
  },
  {
    "path": "docs/diagrams/ViewCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "abstract class \"{abstract}\\nCommand\" {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + {abstract} execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class Model \u003c\u003cInterface\u003e\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + setOrderBook(orderBook : ReadOnlyOrderBook) : void"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + setReturnOrderBook(returnOrderBook : ReadOnlyReturnOrderBook) : void"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Model ..\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + getMissionList() : ObservableList\u003cMission\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + getQuestList() : ObservableList\u003cQuest\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + getStudentList() : ObservableList\u003cStudent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    + getTaskList() : ObservableList\u003cTask\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "abstract class \"{abstract}\\nViewCommand\"{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + execute(model : Model) : CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class ViewCommandParser implements Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /\u0027 Methods \u0027/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + parse(args : String) : ViewCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "interface Parser\u003cT\u003e \u003c\u003cinterface\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    parse(userInput : String) : ViewCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class Flag {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + getFlag(): String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    + isValidFlag(): boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class ViewXYZCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\"{abstract}\\nViewCommand\" \u003c..left ViewCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\"{abstract}\\nViewCommand\" ..\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\"{abstract}\\nViewCommand\" --up|\u003e \"{abstract}\\nCommand\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewCommandParser ..\u003e Flag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewXYZCommand -\u003e \"{abstract}\\nViewCommand\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 1,
      "wilinetan": 49
    }
  },
  {
    "path": "docs/diagrams/ViewConsultationsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "CommandResult execute()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "abstract class ViewCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class ViewConsultationsCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class ViewPastConsultationsCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class ViewUpcomingConsultationsCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "interface Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Command \u003c|-- ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewCommand \u003c|-- ViewConsultationsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewCommand \u003c|-- ViewPastConsultationsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewCommand \u003c|-- ViewUpcomingConsultationsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewConsultationsCommand ..\u003e Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewPastConsultationsCommand ..\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewUpcomingConsultationsCommand ..\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 25
    }
  },
  {
    "path": "docs/diagrams/ViewConsultationsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":ViewConsultationsCommand\" as ViewAllStudentsCommand SCRAPER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":Model\" as Model SCRAPER_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "participant \":CommandResult\" as CommandResult SCRAPER_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[-\u003e ViewAllStudentsCommand : execute(model)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "activate ViewAllStudentsCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewAllStudentsCommand -\u003e Model : updateFilteredPersonList(PREDICATE_SHOW_ALL_STUDENTS)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Model --\u003e ViewAllStudentsCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "ViewAllStudentsCommand -\u003e CommandResult : CommandResult(\"Listed all consultations:\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "CommandResult --\u003e ViewAllStudentsCommand : commandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[\u003c-- ViewAllStudentsCommand : commandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "deactivate ViewAllStudentsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 33
    }
  },
  {
    "path": "docs/diagrams/ViewMissionDeadlineSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \":ViewCommandParser\" as ViewCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \"v:ViewMissionDeadlineCommand\" as ViewMissionDeadlineCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "[-\u003e LogicManager : execute(\"view -m\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"view -m\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "create ViewCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "AddressBookParser -\u003e ViewCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "AddressBookParser -\u003e ViewCommandParser : parse(\"-m\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate ViewCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "create ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewCommandParser -\u003e ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewMissionDeadlineCommand --\u003e ViewCommandParser : v"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewCommandParser --\u003e AddressBookParser : v"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate ViewCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "destroy ViewCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "AddressBookParser --\u003e LogicManager : v"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "LogicManager -\u003e ViewMissionDeadlineCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewMissionDeadlineCommand -\u003e Model : updateMissionsList(PREDICATE_SHOW_ALL_MISSIONS)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Model -[hidden]-\u003e ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewMissionDeadlineCommand -\u003e CommandResult : MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "CommandResult --\u003e ViewMissionDeadlineCommand : commandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "ViewMissionDeadlineCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate ViewMissionDeadlineCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 69
    }
  },
  {
    "path": "docs/diagrams/ViewStudentsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam backgroundColor #ffffff"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "hide circle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "CommandResult execute()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "abstract class ViewCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "class ViewAllStudentsCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "class ViewOneStudentCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "interface Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "class Name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Command \u003c|-- ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewCommand \u003c|-- ViewAllStudentsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewCommand \u003c|-- ViewOneStudentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewAllStudentsCommand ..\u003e Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewOneStudentCommand ..\u003e Model"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "ViewOneStudentCommand ..\u003e Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 3,
      "ngzhenteng": 21
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "!define SCRAPER_COLOR #383733"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "!define SCRAPER_COLOR_T1 #e6e3e3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "title: Jarvis"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W11-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W11-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "**Jarvis is a desktop application for NUS CS1101S tutors to facilitate and lessen their administrative workload.**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* If you are interested in using Jarvis, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* If you are interested about developing Jarvis, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 8,
      "-": 13
    }
  },
  {
    "path": "docs/team/asuraxsoul.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "title: Lim Jun Jie\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "## Project: JARVIS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "JARVIS is a desktop app for CS1101S Teaching Assistants (Avengers), optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, JARVIS can get your TA administrative tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **New Feature**: Added Task features for Tutors to track their personal tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * What it does: Allows Tutors to Add and Delete Todos, Events or Deadlines."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * Justification: This feature improves the product as it is important for the user to not only keep track of his"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  responsibilities as a Tutor, he can also keep track of his personal work such as deadlines and assignments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * Highlights: This feature allows me to understand the main architecture of JARVIS from UI, Logic to Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  components. It is a very wholesome feature to add and I really enjoyed it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dasuraxsoul)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * Managed milestones `v1.2 - v1.3` on GitHub"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * Update GUI with \"Todo\", \"Event\", \"Deadline\" tags for user to easily see what type of Task is that."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * Added documentation for the features `add` and `delete`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * Update list of content with navigable links to each sections of the UG."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * Added implementation details of the `add` features for Tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    * Added implementation details of the `view` features for Tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 39
    }
  },
  {
    "path": "docs/team/ngzhenteng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "title: Ng Zhen Teng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "## Project: JARVIS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "JARVIS is a desktop app for CS1101S Teaching Assistants (Avengers) to help Avengers keep track of their grading duties and consultations. The user interacts with it using CLI and it has a GUI created with JavaFX. It is written in Java and has more than 10kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **New Feature**: Added the ability to automatically switch to relevant tabs in the GUI when any command is inputted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * What it does: Allows the user to quickly look at the outcome of their input command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Justification: This feature improves the product as it is important for the user to visualize the result of his"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  /her input command. This feature also improves the cohesiveness of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Highlights: This feature required me to fully understand the interactions between GUI and non-GUI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "   components as well as the importance of abstraction principles in the implementation of new features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dngzhenteng)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Managed milestones `v1.1` - `v1.3` on GitHub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Ensured the team\u0027s completion of weekly deliverables such as demo videos."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Enhancements to existing features**: Added the ability to view a specific student simply using student\u0027s name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " substrings."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * What it does: Allows the user to look for a student using a part of the full name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Justification: This feature improves the product as it can be difficult to remember a student"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u0027s full name. THe ability to search for a student using portions of the full name allows the user to achieve the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     true purpose of quickly and efficiently finding student information without the burden of memorisation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Highlights: This enhancement is an enhanced version of the find feature in ab3, however this implementation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     displays all students that match the substring inputted by the user, regardless of whether the input is a full word."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Credits: *{adapted from ab3}*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Created the first copy of the UserGuide in markdown format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Added documentation for the features `view students` [\\#72]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    * Added implementation details of the `view one student` and `view all students` features."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#207](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/207"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  ), [\\#53](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/53)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-T11-4/tp/issues/249), [2](https://github.com/AY2021S1-CS2103T-T11-4/tp/issues/258), [3](https://github.com/AY2021S1-CS2103T-T11-4/tp/issues/255), [4](https://github.com/AY2021S1-CS2103T-T11-4/tp/issues/250) [5](https://github.com/AY2021S1-CS2103T-T11-4/tp/issues/253))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  * Used JavaFX libraries and CSS to create portions of the Graphic User Interface."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 48
    }
  },
  {
    "path": "docs/team/peironggg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "title: Wu Peirong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "## Project: Jarvis"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "JARVIS is a desktop app for CS1101S Teaching Assistants (Avengers) to help Avengers keep track of their grading duties and consultations. The user interacts with it using CLI and it has a GUI created with JavaFX. It is written in Java and has more than 10kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **New Feature**: Added the ability to scrape Sourceacademy.nus.edu.sg for grading information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * What it does: Automatically logs in to SA with the user login details and parses for student names, current missions and quests to be graded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Justification: This feature improves the product significantly because an Avenger can get all the grading information he needs simply by starting up the app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Highlights: Memorable learning experience was implementing multithreading into the fetching from SA and updating of JavaFX\u0027s UI-update thread. A real educational experience by learning about the nuances of when threads run and how to make them run when you want them to.   "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Credits: *Google Chrome\u0027s Chrome Driver for the ability to launch a headless Chrome browser to scrape for information.*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **New Feature**: Added an edit command that allows users to edit their login information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * What it does: Edits the nusnetid and password required to login so that different Avengers can access the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Justification: This allows greater portability and ease of entering login details into the app since login details can be changed on the fly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **New Feature**: Added an edit command that allows users to edit their student information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * What it does: Edits the username, telegram username and email of the fetched students from SA so that they can remain updated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Justification: This allows Avengers to use the app as a one-stop hub of all information they need to carry out their TA duties."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dpeironggg)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Managed milestones `v1.2 - v1.3` on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Added a flags parser to parse users\u0027 commands with flags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage (Pull requests [\\#170](), [\\#181]())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Updated UG introduction on Jarvis and its underlying workings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Added documentation on how to set up Jarvis [\\#150](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/150)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Added documentation for the features `edit student`, `edit login` [\\#268](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/268)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Updated existing UML diagrams to fit new architecture."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Updated the color scheme for the DG."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Added implementation details of the `Scraper Manager` class and its accompanying class diagrams [\\*123](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/123)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    * Added details of `getMissions()` function and accompanying sequence and path diagrams [\\#156](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/156)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#272](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/272), [\\#231](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/231), [\\#208](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/208)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-T12-4/tp/issues/149))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  * Integrated a third party library (Selenium Chrome Driver) to the project ([\\#53](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/53))"
      }
    ],
    "authorContributionMap": {
      "peironggg": 52
    }
  },
  {
    "path": "docs/team/wilinetan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "title: Wiline Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "## Project: Jarvis"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "JARVIS is a desktop app for CS1101S Teaching Assistants (Avengers) to help Avengers keep track of their grading duties and consultations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "The user interacts with it using CLI and it has a GUI created with JavaFX. It is written in Java and has more than 10kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **New Feature**: Added the ability to view deadlines for current Missions and Quests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * What it does: Lists all the current ongoing Missions and Quests with their deadlines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Justification: This feature allows users to keep track of the deadlines of Missions and Quests so that they know"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  when they can start marking, and adjust their workload accordingly."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Highlights: This is a core feature for our app as it serves as a reminder for Avengers on their upcoming marking tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  so that they can manage their time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Credits: *Selenium WebDriver for the ability to scrape for information on Source Academy*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **New Feature**: Added the ability to view ungraded Missions and Quests"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * What it does: List all the ungraded Missions and Quests that the Avenger has yet to mark."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Justification: This feature allows users to keep track of the Missions and Quests that they have yet to mark so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  that they know specifically which Missions and Quests they have to mark."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Highlights: This is another core feature for our app as it serves as a reminder for Avengers on which Missions and Quests"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  they have to mark so that they can manage their time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Credits: *Selenium WebDriver for the ability to scrape for information on Source Academy*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dwilinetan)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * In charge of implementation of GUI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Ensure that project deliverables are delivered on time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Updated the GUI layout and color scheme (Pull requests [\\#183](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/183), [\\#272](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/272), [\\#275](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/275))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Wrote tests for mission features (Pull requests [\\#169](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/169))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    * Added documentation for the features `view -m`, `view -q`, `view -um` and `view -uq` [\\#151](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/151)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    * Updated image extensions so that they show correctly on the website [\\#235](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/235)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    * Fixed issue of tables not showing up on GitHub Pages [\\#237](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/237)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    * Added implementation details of `view` command with is accompanying class diagram [\\#135](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/135)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    * Added details for the `view -m` command with its accompanying sequence diagram [\\#135](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/135)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#77](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/77), [\\#215](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/215), [\\#268](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/268), [\\#280](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/288)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-W17-3/tp/issues/170), [2](https://github.com/AY2021S1-CS2103T-W17-3/tp/issues/172), [3](https://github.com/AY2021S1-CS2103T-W17-3/tp/issues/173))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Used JavaFX library and CSS extensively for the GUI "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  * Made use of the Java Desktop library to open links in user\u0027s default browser [\\#183](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/183)"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 54
    }
  },
  {
    "path": "docs/team/wireseo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wireseo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "title: Eryn Seo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "## Project: JARVIS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "JARVIS is a desktop app for CS1101S Teaching Assistants (Avengers) to help Avengers keep track of their grading duties and consultations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "The user interacts with it using CLI and it has a GUI created with JavaFX. It is written in Java and has more than 10kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **New Feature**: Added the ability to view consultations and mastery checks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * What it does: allows the user to view all/past/upcoming consultations or mastery checks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Justification: This feature improves the product significantly because the user needs to view consultation appointments created within the software."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Highlights: This enhancement was a completely new feature that did not exist in the AB3 codebase, and had to be designed from scratch. Due to design concerns, the class structure of Student and Consultations had to be changed multiple times which resulted in multiple attempts to refactor and restructure, as well as rewriting tests. It required an in-depth analysis of design alternatives. The implementation too was challenging as it was a completely new command for completely new classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **New Feature**: Added the ability to add and delete consultations and mastery checks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * What it does: allows the user to add and delete consultations or mastery checks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Justification: This feature improves the product significantly because the user needs to add and delete consultation appointments created within the software."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Highlights: This enhancement was a completely new feature that did not exist in the AB3 codebase, and had to be designed from scratch. It required an in-depth analysis of design alternatives. The implementation too was challenging as it was a completely new command for completely new classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **New Feature**: Added the ability to edit mastery checks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * What it does: allows the user to edit mastery check scores to either pass (1) or fail (0)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Justification: This feature improves the product significantly because the user needs to edit mastery check scores."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Highlights: This enhancement was a completely new feature that did not exist in the AB3 codebase, and had to be designed from scratch. It required an in-depth analysis of design alternatives. The implementation too was challenging as it was a completely new command for a completely new class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dwireseo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * In charge of implementation of all consultation and mastery check related features and overall GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Ensure that project deliverables are delivered on time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Designed the new GUI [\\#12]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * Added documentation for the features `view -c`, `view -cp`, `view -cu`, `view -mc`, `view -mcp`,  `view -mcu`, `add -c`, `add -mc`, `delete -c`, `delete -mc`[\\#34]()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * Added documentation for the features `edit -mc` [\\#291]()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    * Added implementation details of the `view -c` feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#287](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/287#pullrequestreview-522475093), [\\#290](https://github.com/AY2021S1-CS2103T-W11-2/tp/pull/290#pullrequestreview-522476413)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103T-F11-2/tp/issues/154), [2](https://github.com/AY2021S1-CS2103T-F11-2/tp/issues/152), [3](https://github.com/AY2021S1-CS2103T-F11-2/tp/issues/156))"
      }
    ],
    "authorContributionMap": {
      "wireseo": 45,
      "peironggg": 2
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Changes the remark of an existing student in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param index of the student in the filtered student list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param remark of the student to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.jarvis.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of student data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the student’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a student."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Create a new `Remark` in `seedu.jarvis.model.student`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each student."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peironggg"
        },
        "content": "Simply add the following to [`seedu.jarvis.ui.StudentCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public PersonCard(Person student, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    remark.setText(student.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Person editedStudent \u003d new Person(studentToEdit.getName(), studentToEdit.getPhone(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                studentToEdit.getAddress(), remark, studentToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private String generateSuccessMessage(Person studentToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 17,
      "peironggg": 6,
      "-": 371
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.jarvis.model.student.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 1,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.jarvis.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       Person studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       Person editedStudent \u003d createEditedPerson(studentToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       if (!studentToEdit.isSamePerson(editedStudent) \u0026\u0026 model.hasPerson(editedStudent)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "       students.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 6,
      "peironggg": 1,
      "-": 243
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The main method of the entrypoint."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.ScraperParsingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.scraper.Scraper;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.scraper.ScraperManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonUserLoginStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.UserLoginStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 7, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    protected Scraper scraper;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLoginStorage userLoginStorage \u003d new JsonUserLoginStorage(config.getUserLoginDetails());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin userLogin \u003d initLogin(userLoginStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userLoginStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, userLogin);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraper \u003d initScraper(userLogin, model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns a UserLogin object corresponding to the data stored."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param storage The place where UserLogin data is stored"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A UserLogin object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private UserLogin initLogin(UserLoginStorage storage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Path loginFilePath \u003d storage.getUserLoginFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Using login file : \" + loginFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin initializedLogin;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Optional\u003cUserLogin\u003e loginOptional \u003d storage.readUserLogin();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (loginOptional.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                logger.warning(\"Please edit username and password details and restart again.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d loginOptional.orElse(new UserLogin());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logger.warning(\"UserLogin file at \" + loginFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    + \"Asking user to edit login information and restart again.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with empty login information\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return initializedLogin;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s jarvis book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The data from the sample jarvis book will be used instead if {@code storage}\u0027s jarvis book is not found,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * or an empty jarvis book will be used instead if errors occur when reading {@code storage}\u0027s jarvis book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ReadOnlyUserLogin userLogin) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new ModelManager(initialData, userPrefs, userLogin);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    protected Scraper initScraper(UserLogin userLogin, Model model, Storage storage)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throws ScraperParsingException, IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Starting scraper to scrape SourceAcademy\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Scraper scraper \u003d new ScraperManager(userLogin, model, storage);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model.addPropertyChangeListener((PropertyChangeListener) scraper);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraper.startScraping();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return scraper;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 84,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Path userLoginFilePath \u003d Paths.get(\"login.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Path getUserLoginDetails() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLoginFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setUserLoginFilePath(Path userLoginFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.userLoginFilePath \u003d userLoginFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 10,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_ID \u003d \"The task ID provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_STUDENT_NAME_NOT_FOUND \u003d \"The student name does not match anybody in Jarvis\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_NULL_MODEL \u003d \"Model does not contain Students\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_VIEW_TYPE_NOT_FOUND \u003d \"Invalid view command, unable to identify view type\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 2,
      "ngzhenteng": 3,
      "peironggg": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/exceptions/OsNotSupportedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Signals that the user\u0027s operating system is not supported."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class OsNotSupportedException extends ScraperParsingException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param operatingSystem The operating system the user is running"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public OsNotSupportedException(String operatingSystem) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        super(operatingSystem + \" not supported\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 13
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/exceptions/ScraperParsingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class ScraperParsingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public ScraperParsingException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/exceptions/WrongLoginDetailsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class WrongLoginDetailsException extends ScraperParsingException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public WrongLoginDetailsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        super(\"Username or email supplied is wrong\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static String pad(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return \"0 \" + s;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 6,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @see seedu.jarvis.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of missions */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    ObservableList\u003cMission\u003e getFilteredMissionList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of quests */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    ObservableList\u003cQuest\u003e getFilteredQuestList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of consultations */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cConsultation\u003e getFilteredConsultationList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of mastery checks */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cMasteryCheck\u003e getFilteredMasteryCheckList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the user prefs\u0027 jarvis book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns whether login.json has username specified."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasUsername();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns whether login.json has password specified."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasPassword();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Saves model to storage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void saveToStorage() throws CommandException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the greeting to be displayed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    StringProperty getGreeting();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 6,
      "ngzhenteng": 1,
      "peironggg": 34,
      "-": 40,
      "wilinetan": 10
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Saves current model to storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void saveToStorage() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            storage.saveUserLogin(model.getUserLogin());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        saveToStorage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cMission\u003e getFilteredMissionList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return model.getFilteredMissionList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cQuest\u003e getFilteredQuestList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return model.getFilteredQuestList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getFilteredConsultationList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return model.getFilteredConsultationsList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cMasteryCheck\u003e getFilteredMasteryCheckList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return model.getFilteredMasteryChecksList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasUsername() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return model.hasUsername();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasPassword() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return model.hasPassword();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return model.getGreeting();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 10,
      "ngzhenteng": 2,
      "peironggg": 44,
      "-": 62,
      "wilinetan": 18
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Clears the jarvis book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // commandTargetFeature is set to CommandTargetFeature.NotAssigned if it is not set by the constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private CommandTargetFeature commandTargetFeature \u003d CommandTargetFeature.NotAssigned;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * {@code commandTargetFeature} and other fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandTargetFeature commandTargetFeature) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(commandTargetFeature);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.commandTargetFeature \u003d commandTargetFeature;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the type of the command executed, resulting in this command result."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return type of the command object executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public CommandTargetFeature getCommandTargetFeature() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return commandTargetFeature;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 20,
      "peironggg": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/CommandTargetFeature.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Enum for the Command type. This enum is useful for identifying the type of Command Object executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public enum CommandTargetFeature {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    NotAssigned,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Students,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Missions,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Quest,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Consultations,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    MasteryCheck,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Tasks,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 13,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Finds and lists all persons in jarvis book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 5,
      "-": 35,
      "wilinetan": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Adds a student to the jarvis book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_ADD_STUDENT \u003d \"S\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_ADD_TODO \u003d \"T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_ADD_EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_ADD_DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String TO_ADD_CONSULTATION \u003d \"C\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String TO_ADD_MASTERY_CHECK \u003d \"MC\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in jarvis\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_INVALID_TO_ADD_TYPE \u003d \"This object to add is unidentifiable\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in jarvis\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CONSULTATION \u003d \"This consultation already exists in jarvis\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MASTERY_CHECK \u003d \"This mastery check already exists in jarvis\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TODO \u003d \"New todo added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EVENT \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DEADLINE \u003d \"New deadline added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CONSULTATION \u003d \"New consultation added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MASTERY_CHECK \u003d \"New mastery check added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_ADD_USAGE \u003d COMMAND_WORD + \": Adds a task or consultation to the jarvis book.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"add -t DESCRIPTION: Add todo with DESCRIPTION\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"add -e DESCRIPTION d/YYYY-MM-DD t/HH:MM: Add event with DESCRIPTION at specified date and time\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"add -d DESCRIPTION d/YYYY-MM-DD t/HH:MM: Add deadline with DESCRIPTION at specified date and time\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"add -c NAME d/YYYY-MM-DD t/HH:MM: Add consultation with student with NAME at specified date and time\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"add -mc NAME d/YYYY-MM-DD t/HH:MM: Add mastery check with student with NAME at specified date and \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"time\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_MISSING_DESCRIPTION \u003d \"Please include task DESCRIPTION\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE \u003d \"Please include task DATE and TIME d/YYYY-MM-DD t/HH:MM\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_WRONG_DATETIME_FORMAT \u003d \"The date time format is incorrect. Correct format: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"d/YYYY-MM-DD t/HH:MM\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME \u003d \"The provided date and time is incorrect.\\nBe careful of \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"leap years and the number of days in a specific month\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    protected final Object toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    protected final String toAddType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAddType \u003d TO_ADD_STUDENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Todo}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public AddCommand(Todo todo) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAdd \u003d todo;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAddType \u003d TO_ADD_TODO;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Event}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAddType \u003d TO_ADD_EVENT;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deadline}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public AddCommand(Deadline deadline) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAdd \u003d deadline;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        toAddType \u003d TO_ADD_DEADLINE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Consultation}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public AddCommand(Consultation consultation) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(consultation);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        toAdd \u003d consultation;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        toAddType \u003d TO_ADD_CONSULTATION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code MasteryCheck}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public AddCommand(MasteryCheck masteryCheck) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(masteryCheck);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        toAdd \u003d masteryCheck;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        toAddType \u003d TO_ADD_MASTERY_CHECK;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch(toAddType) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TO_ADD_STUDENT:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Student toAddStudent \u003d (Student) toAdd;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (model.hasPerson(toAddStudent)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.addPerson(toAddStudent);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAddStudent), CommandTargetFeature.Students);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TO_ADD_TODO:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Todo toAddTodo \u003d (Todo) toAdd;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (model.hasTodo(toAddTodo)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.addTodo(toAddTodo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_TODO, toAddTodo), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TO_ADD_EVENT:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Event toAddEvent \u003d (Event) toAdd;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (model.hasEvent(toAddEvent)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.addEvent(toAddEvent);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_EVENT, toAddEvent), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TO_ADD_DEADLINE:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Deadline toAddDeadline \u003d (Deadline) toAdd;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (model.hasDeadline(toAddDeadline)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.addDeadline(toAddDeadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_DEADLINE, toAddDeadline),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case TO_ADD_CONSULTATION:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            Consultation toAddConsultation \u003d (Consultation) toAdd;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (model.hasConsultation(toAddConsultation)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_CONSULTATION);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            model.addConsultation(toAddConsultation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CONSULTATION, toAddConsultation),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    CommandTargetFeature.Consultations);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case TO_ADD_MASTERY_CHECK:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            MasteryCheck toAddMasteryCheck \u003d (MasteryCheck) toAdd;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (model.hasMasteryCheck(toAddMasteryCheck)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_MASTERY_CHECK);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            model.addMasteryCheck(toAddMasteryCheck);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_MASTERY_CHECK, toAddMasteryCheck),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    CommandTargetFeature.MasteryCheck);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TO_ADD_TYPE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 48,
      "Asuraxsoul": 81,
      "ngzhenteng": 13,
      "peironggg": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the jarvis book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_DELETE_STUDENT \u003d \"S\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TO_DELETE_TASK \u003d \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String TO_DELETE_CONSULTATION \u003d \"C\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String TO_DELETE_MASTERY_CHECK \u003d \"MC\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DELETE_USAGE \u003d \"Delete Command supports:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"1. delete task (delete -t)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -s 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \": Deletes the task identified by the task ID used in the task list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -t T1\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"Type \\\"view -t\\\" to verify your task ID before deleting!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DELETE_CONSULTATION_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \": Deletes the consultation identified by the task ID used in the consultation list.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -c 1\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"Type \\\"view -c\\\" to verify your task ID before deleting!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DELETE_MASTERY_CHECK_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \": Deletes the mastery check identified by the mastery check ID used in the mastery check list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -mc 1\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"Type \\\"view -mc\\\" to verify your task ID before deleting!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_INVALID_TO_DELETE_TYPE \u003d \"This object to delete is unidentifiable\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DELETE_CONSULTATION_SUCCESS \u003d \"Deleted Consultation: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_DELETE_MASTERY_CHECK_SUCCESS \u003d \"Deleted Mastery Check: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String taskId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String toDeleteType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates an DeleteCommand to delete the specified {@code Consultation} or {@code Mastery Check}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public DeleteCommand(Index targetIndex, String toDeleteType) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.toDeleteType \u003d toDeleteType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an DeleteCommand to delete the specified {@code Task}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public DeleteCommand(String taskId) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.toDeleteType \u003d TO_DELETE_TASK;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch(toDeleteType) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        /*case TO_DELETE_STUDENT:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            assert targetIndex !\u003d null : \"Student\u0027s delete target index should not be null\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            model.deletePerson(studentToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    CommandTargetFeature.Students);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TO_DELETE_TASK:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            assert taskId !\u003d null : \"Task id of task to be deleted should not be null\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            List\u003cTask\u003e allTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Task taskToDelete \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            boolean hasDeletedTask \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            int size \u003d allTasks.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                Task currTask \u003d allTasks.get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                if (currTask.getTaskId().equals(taskId)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    taskToDelete \u003d currTask;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    hasDeletedTask \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (hasDeletedTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                assert taskToDelete !\u003d null : \"Upon successful task deletion, the task deleted cannot be null\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_ID);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TO_DELETE_TYPE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 18,
      "Asuraxsoul": 59,
      "ngzhenteng": 9,
      "peironggg": 10,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/delete/DeleteConsultationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class DeleteConsultationCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public DeleteConsultationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        super(targetIndex, \"C\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // When this is implemented, you may return a CommandResult(userFeedback, CommandTargetFeature.Consultations);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // and the tab redirecting will work."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 7,
      "ngzhenteng": 3,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/delete/DeleteMasteryCheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class DeleteMasteryCheckCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public DeleteMasteryCheckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        super(targetIndex, \"MC\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // When this is implemented, you may return a CommandResult(userFeedback, CommandTargetFeature.MasteryCheck);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // and the tab redirecting will work."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 8,
      "ngzhenteng": 4,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + \": Edits information stored in Jarvis according to the \" + \"command inputted.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + \"edit -s [index number used in student list] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + \"[\" + PREFIX_TELEGRAM + \"TELEGRAM] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + PREFIX_TELEGRAM + \"example132 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + \"edit -l \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + PREFIX_USERNAME"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"nusstu\\\\e1234567 \" + PREFIX_PASSWORD + \"password\";;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 23,
      "-": 10,
      "wilinetan": 4
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/edit/EditLoginCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditLoginCommand extends EditCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_EDIT_LOGIN_SUCCESS \u003d \"Edited Login: %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final EditLoginDescriptor editLoginDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param editLoginDescriptor details to edit the student with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginCommand(EditLoginDescriptor editLoginDescriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(editLoginDescriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.editLoginDescriptor \u003d new EditLoginDescriptor(editLoginDescriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin userLoginToEdit \u003d model.getUserLogin();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin editedUserLogin \u003d createEditedPerson(userLoginToEdit, editLoginDescriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model.setUserLogin(editedUserLogin);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LOGIN_SUCCESS, editedUserLogin));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates and returns a {@code UserLogin} with the details of {@code loginToEdit}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * edited with {@code editLoginDescriptor}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static UserLogin createEditedPerson(UserLogin loginToEdit, EditLoginDescriptor editLoginDescriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert loginToEdit !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Username updatedUsername \u003d editLoginDescriptor.getUsername().orElse(loginToEdit.getUsername());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String updatedPassword \u003d editLoginDescriptor.getPassword().orElse(loginToEdit.getUserPassword());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new UserLogin(updatedUsername, updatedPassword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!(other instanceof EditLoginCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginCommand e \u003d (EditLoginCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return editLoginDescriptor.equals(e.editLoginDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static class EditLoginDescriptor {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        private Username username;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        private String password;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public EditLoginDescriptor() {}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public EditLoginDescriptor(EditLoginDescriptor toCopy) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            setUsername(toCopy.username);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            setPassword(toCopy.password);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(username, password);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setUsername(Username username) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.username \u003d username;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public Optional\u003cUsername\u003e getUsername() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return Optional.ofNullable(username);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setPassword(String password) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.password \u003d password;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public Optional\u003cString\u003e getPassword() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return Optional.ofNullable(password);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (!(other instanceof EditLoginDescriptor)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            EditLoginDescriptor e \u003d (EditLoginDescriptor) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return getUsername().equals(e.getUsername())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    \u0026\u0026 getPassword().equals(e.getPassword());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 130
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/edit/EditMasteryCheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wireseo"
        },
        "content": "package seedu.jarvis.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class EditMasteryCheckCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 4
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/edit/EditStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Edits the details of an existing student in the jarvis book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditStudentCommand extends EditCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the jarvis book.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param editPersonDescriptor details to edit the student with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditStudentCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedStudent \u003d createEditedPerson(studentToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!studentToEdit.isSamePerson(editedStudent) \u0026\u0026 model.hasPerson(editedStudent)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model.setPerson(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedStudent),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                CommandTargetFeature.Students);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static Student createEditedPerson(Student studentToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Telegram updatedPhone \u003d editPersonDescriptor.getTelegram().orElse(studentToEdit.getTelegram());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        private Telegram telegram;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            setTelegram(toCopy.telegram);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, telegram, email);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setTelegram(Telegram telegram) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public Optional\u003cTelegram\u003e getTelegram() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return Optional.ofNullable(telegram);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    \u0026\u0026 getTelegram().equals(e.getTelegram())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 3,
      "peironggg": 167
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewAllStudentsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Lists all students under this tutor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewAllStudentsCommand extends ViewCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String SAMPLE_COMMAND \u003d \"view -s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students taught by you\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Students);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 18,
      "peironggg": 4
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Lists all persons in the jarvis book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists information according to the command inputted.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -s: View Student information\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"view -c / view -cp / view -cu: View Consultation sessions (cp: past, cu: upcoming only)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            + \"view -mc / view -mcp / view -mcu: View Mastery Check sessions (cp: past, cu: upcoming only)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -u: View ungraded Missions and Quests\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -m: View deadline for Missions\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -q: View deadline for Quests\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -i: View deadline for specific mission/quest by id\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            + \"view -t / view -tt / view -te / view -td: View Tasks(Todos, Events, Deadlines)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wireseo": 2,
      "ngzhenteng": 1,
      "peironggg": 6,
      "wilinetan": 19
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewConsultationsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_CONSULTATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * View all consultations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewConsultationsCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all consultations\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateConsultationsList(PREDICATE_SHOW_ALL_CONSULTATIONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Consultations);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 16,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewMasteryChecksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_MASTERY_CHECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * Lists all mastery checks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewMasteryChecksCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all mastery check sessions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateMasteryChecksList(PREDICATE_SHOW_ALL_MASTERY_CHECKS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.MasteryCheck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 17,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewMissionDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_MISSIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Lists all mission deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewMissionDeadlineCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all current mission deadlines\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model.updateMissionsList(PREDICATE_SHOW_ALL_MISSIONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Missions);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 4,
      "peironggg": 6,
      "wilinetan": 13
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewOneStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Lists the student specified by the user, either by the list index or the name of the student."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewOneStudentCommand extends ViewCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // Note that name specified in the command is case sensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String SAMPLE_COMMAND \u003d \"view -s Alex Yeoh\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You are looking at your students who match the search: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final Name searchedName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a ViewOneStudentCommand object which searches for the student using their name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param name of the student to be viewed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ViewOneStudentCommand(Name name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.searchedName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns a CommandResult containing the student whose name has partial matches or full name matches with the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * searched name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return a command result contianing the searched student(s)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert searchedName.fullName.length() \u003e 0 : \"The input search string is empty\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        model.updateFilteredPersonList(student -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                student.getName().fullName.contains(searchedName.toString())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                || student.getName().fullName.toLowerCase().contains(searchedName.toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ObservableList\u003cStudent\u003e filteredResult \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (filteredResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            // reset the list to show all persons"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_STUDENT_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, searchedName), CommandTargetFeature.Students);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 49,
      "peironggg": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewPastConsultationsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_PAST_CONSULTATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * View only past consultations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewPastConsultationsCommand extends ViewCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all past consultations\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateConsultationsList(PREDICATE_SHOW_PAST_CONSULTATIONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Consultations);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 17,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewPastMasteryChecksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_PAST_MASTERY_CHECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * Lists only past mastery checks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewPastMasteryChecksCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed past mastery check sessions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateMasteryChecksList(PREDICATE_SHOW_PAST_MASTERY_CHECKS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.MasteryCheck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 17,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewQuestDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_QUESTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * Lists all quest deadlines."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewQuestDeadlineCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all current quest deadlines\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model.updateQuestsList(PREDICATE_SHOW_ALL_QUESTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Quest);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 5,
      "wilinetan": 17
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewTaskListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_DEADLINE_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_EVENT_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TASK_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TODO_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Lists all tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class ViewTaskListCommand extends ViewCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String SAMPLE_COMMAND_TASK \u003d \"view -t\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String SAMPLE_COMMAND_TODO \u003d \"view -tt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String SAMPLE_COMMAND_EVENT \u003d \"view -te\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String SAMPLE_COMMAND_DEADLINE \u003d \"view -td\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_LIST \u003d \"tasks\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TODO_LIST \u003d \"todos under Task\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String EVENT_LIST \u003d \"events under Task\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String DEADLINE_LIST \u003d \"deadlines under Task\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String viewType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public ViewTaskListCommand(String viewType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch(viewType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_TASK_LIST:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, TASK_LIST), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_TODO_LIST:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_TODOS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, TODO_LIST), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_EVENT_LIST:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, EVENT_LIST), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_DEADLINE_LIST:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            model.updateFilteredTaskList(Model.PREDICATE_SHOW_ALL_DEADLINES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, DEADLINE_LIST), CommandTargetFeature.Tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_VIEW_TYPE_NOT_FOUND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 47,
      "ngzhenteng": 4,
      "peironggg": 10
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewUngradedMissionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * Lists all ungraded missions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewUngradedMissionCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ungraded missions\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Predicate\u003cMission\u003e PREDICATE_SHOW_UNGRADED_MISSIONS \u003d mission -\u003e mission.getIsGraded() \u003d\u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model.updateMissionsList(PREDICATE_SHOW_UNGRADED_MISSIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Missions);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 5,
      "wilinetan": 21
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewUngradedQuestCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * Lists all ungraded missions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewUngradedQuestCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ungraded quests\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Predicate\u003cQuest\u003e PREDICATE_SHOW_UNGRADED_QUESTS \u003d quest -\u003e quest.getIsGraded() \u003d\u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model.updateQuestsList(PREDICATE_SHOW_UNGRADED_QUESTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Quest);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 5,
      "wilinetan": 21
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewUpcomingConsultationsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_UPCOMING_CONSULTATIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * View only upcoming consultations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewUpcomingConsultationsCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all upcoming consultations\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateConsultationsList(PREDICATE_SHOW_UPCOMING_CONSULTATIONS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.Consultations);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 16,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/commands/view/ViewUpcomingMasteryChecksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_UPCOMING_MASTERY_CHECKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * Lists only upcoming mastery checks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewUpcomingMasteryChecksCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed upcoming mastery check sessions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model.updateMasteryChecksList(PREDICATE_SHOW_UPCOMING_MASTERY_CHECKS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandTargetFeature.MasteryCheck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 17,
      "ngzhenteng": 1,
      "peironggg": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.CONSULTATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.MASTERY_CHECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_ADD_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // split the string trimmedArgs with regex of one or more whitespace characters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Flag commandFlag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            commandFlag \u003d ParserUtil.parseFlag(nameKeywords[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_ADD_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int length \u003d nameKeywords.length;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        boolean taskHasDescription \u003d length \u003e 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (!taskHasDescription"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u0026\u0026 (commandFlag.getFlag().equals(TASK_TODO) || commandFlag.getFlag().equals(TASK_EVENT)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                || commandFlag.getFlag().equals(TASK_DEADLINE))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_MISSING_DESCRIPTION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // switch command to return the respective add commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch (commandFlag.getFlag()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_TODO:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added todo task\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Todo todo \u003d TaskCommandParser.parseTodo(nameKeywords, length);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new AddCommand(todo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_EVENT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added event task\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Event event \u003d TaskCommandParser.parseEvent(nameKeywords, length);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new AddCommand(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_DEADLINE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added deadline task\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Deadline deadline \u003d TaskCommandParser.parseDeadline(nameKeywords, length);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new AddCommand(deadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case CONSULTATION:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added consultation\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            Consultation consultation \u003d ConsultationMasteryCheckCommandParser.parseConsultation(nameKeywords, length);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new AddCommand(consultation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case MASTERY_CHECK:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added mastery check\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            MasteryCheck masteryCheck \u003d ConsultationMasteryCheckCommandParser.parseMasteryCheck(nameKeywords, length);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new AddCommand(masteryCheck);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_ADD_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            logger.info(\"AddCommandParser attempts to parse user\u0027s newly added student\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//                    ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//                            PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_ADD_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            Telegram telegram \u003d ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            Student student \u003d new Student(name, telegram, email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "//            return new AddCommand(student);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 10,
      "Asuraxsoul": 41,
      "ngzhenteng": 18,
      "peironggg": 19,
      "-": 25,
      "wilinetan": 7
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 15,
      "-": 58,
      "wilinetan": 3
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final Prefix PREFIX_TELEGRAM \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /* Edit Command flags */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String EDIT_STUDENT \u003d \"-s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String EDIT_LOGIN \u003d \"-l\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String EDIT_MASTERY_CHECK \u003d \"-mc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /* View Command flags */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String UNGRADED_MISSION \u003d \"-um\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String UNGRADED_QUEST \u003d \"-uq\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String MISSION_DEADLINE \u003d \"-m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String QUEST_DEADLINE \u003d \"-q\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String VIEW_STUDENT \u003d \"-s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String VIEW_TASK_LIST \u003d \"-t\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String VIEW_TODO_LIST \u003d \"-tt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String VIEW_EVENT_LIST \u003d \"-te\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String VIEW_DEADLINE_LIST \u003d \"-td\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_CONSULTATION_LIST \u003d \"-c\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_UPCOMING_CONSULTATION_LIST \u003d \"-cu\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_PAST_CONSULTATION_LIST \u003d \"-cp\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_MASTERY_CHECK_LIST \u003d \"-mc\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_UPCOMING_MASTERY_CHECK_LIST \u003d \"-mcu\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String VIEW_PAST_MASTERY_CHECK_LIST \u003d \"-mcp\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /* Add Command flags */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_TODO \u003d \"-t\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_EVENT \u003d \"-e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_DEADLINE \u003d \"-d\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_DATE \u003d \"d/\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_TIME \u003d \"t/\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String CONSULTATION \u003d \"-c\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String MASTERY_CHECK \u003d \"-mc\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /* Delete Command flags */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String DELETE_TASK \u003d \"-t\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String DELETE_CONSULTATION \u003d \"-c\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String DELETE_MASTERY_CHECK \u003d \"-mc\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 13,
      "Asuraxsoul": 14,
      "ngzhenteng": 2,
      "peironggg": 8,
      "-": 11,
      "wilinetan": 5
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/ConsultationMasteryCheckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * Parses input add consultation or mastery check arguments and creates a new specified consultation or mc object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ConsultationMasteryCheckCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Takes in user input parameters and creates an Consultation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns an consultation object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static Consultation parseConsultation(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        LocalDateTime formattedEventDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            formattedEventDateTime \u003d parseTimedTaskTime(nameKeywords, length);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String studentName \u003d parseStudentName(nameKeywords, length);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return new Consultation(studentName, formattedEventDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Takes in user input parameters and creates a Mastery Check."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns a mastery check object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static MasteryCheck parseMasteryCheck(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        LocalDateTime formattedDeadlineDateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            formattedDeadlineDateTime \u003d parseTimedTaskTime(nameKeywords, length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String studentName \u003d parseStudentName(nameKeywords, length);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return new MasteryCheck(studentName, formattedDeadlineDateTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Parses timed event description"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param nameKeywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param length"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @return String of description"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static String parseStudentName(String[] nameKeywords, int length) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        int datePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        for (int i \u003d 2; i \u003c length; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (nameKeywords[i].substring(0, 2).equals(TASK_DATE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                datePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String taskDescription \u003d nameKeywords[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        for (int i \u003d 2; i \u003c datePrefixLocation; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            taskDescription \u003d taskDescription + \" \" + nameKeywords[i];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Parses the date time String to LocalDateTime object with checks"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param nameKeywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param length"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static LocalDateTime parseTimedTaskTime(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        boolean hasDatePrefix \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        boolean hasTimePrefix \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        int datePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        int timePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        for (int i \u003d 2; i \u003c length; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (nameKeywords[i].substring(0, 2).equals(TASK_DATE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                hasDatePrefix \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                datePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (nameKeywords[i].substring(0, 2).equals(TASK_TIME)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                hasTimePrefix \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                timePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (datePrefixLocation \u003e timePrefixLocation) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_WRONG_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        } else if (!hasDatePrefix || !hasTimePrefix) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_MISSING_DATE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert hasDatePrefix : \"Date prefix d/ should already be handled properly\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert hasTimePrefix : \"Time prefix t/ should already be handled properly\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert datePrefixLocation \u003e 0 : \"Date prefix location should already been found correctly\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert timePrefixLocation \u003e 0 : \"Time prefix location should already been found correctly\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            formattedDateTime \u003d parseDateTimeString(nameKeywords[datePrefixLocation], nameKeywords[timePrefixLocation]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Formats the datetime String to LocalDateTime object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param dateString"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param timeString"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @return LocalDateTime object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static LocalDateTime parseDateTimeString(String dateString, String timeString)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String taskDateTime \u003d dateString.substring(2) + \" \" + timeString.substring(2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        LocalDateTime formattedEventDateTime;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            formattedEventDateTime \u003d LocalDateTime.parse(taskDateTime, dateTimeFormat);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_WRONG_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return formattedEventDateTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 146,
      "peironggg": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.DELETE_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_DELETE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // split the string trimmedArgs with regex of one or more whitespace characters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Flag commandFlag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            commandFlag \u003d ParserUtil.parseFlag(nameKeywords[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_DELETE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch(commandFlag.getFlag()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case DELETE_TASK:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            logger.info(\"DeleteCommandParser attempts to parse user\u0027s delete Task input\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                String taskId \u003d TaskCommandParser.parseDeleteTask(nameKeywords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                return new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_DELETE_TASK_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //Will not be able to delete student becasue the flag is not allowed in Flag class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            logger.info(\"DeleteCommandParser attempts to parse user\u0027s delete student input by default\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_DELETE_USAGE), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new ParseException(\"This stage should not be reached!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 10,
      "Asuraxsoul": 23,
      "peironggg": 8,
      "-": 23,
      "wilinetan": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.StringUtil.pad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.EDIT_LOGIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.EDIT_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand.EditLoginDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // split the string trimmedArgs with regex of one or more whitespace characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // result will be as such: {-s, Alex, Yeoh}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String[] inputsAfterCommandType \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert inputsAfterCommandType.length \u003e 0 : \"String array of the arguments is empty\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Flag commandFlag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            commandFlag \u003d ParserUtil.parseFlag(inputsAfterCommandType[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String editArgs \u003d String.join(\" \", Arrays.copyOfRange(inputsAfterCommandType, 1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                inputsAfterCommandType.length));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        switch (commandFlag.getFlag()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        case EDIT_STUDENT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(editArgs, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TELEGRAM).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                editPersonDescriptor.setTelegram(ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return new EditStudentCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        case EDIT_LOGIN:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            argMultimap \u003d ArgumentTokenizer.tokenize(pad(editArgs), PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            EditLoginDescriptor editLoginDescriptor \u003d new EditLoginDescriptor();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_USERNAME).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                editLoginDescriptor.setUsername(ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                editLoginDescriptor.setPassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (!editLoginDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                throw new ParseException(EditLoginCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return new EditLoginCommand(editLoginDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "peironggg": 69,
      "-": 35,
      "wilinetan": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Parses a {@code String[] nameComponents} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws ParseException if the given {@code nameComponents} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static Name parseName(String[] nameComponents) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(nameComponents);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StringBuilder studentNameBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        int lastNameComponentIndex \u003d nameComponents.length;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (int i \u003d 0; i \u003c lastNameComponentIndex; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            studentNameBuilder.append(nameComponents[i]).append(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String trimmedName \u003d studentNameBuilder.toString().trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Parses a {@code String telegram} into a {@code Telegram}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static Telegram parseTelegram(String telegram) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(telegram);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String trimmedPhone \u003d telegram.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Telegram(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Parses a username into Username object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A Username object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new ParseException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Parses a string containing a flag such as \"-s\" and return the Flag object which matches it."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param flag The String arguments to be parsed"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static Flag parseFlag(String flag) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(flag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String trimmedFlag \u003d flag.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!Flag.isValidFlag(trimmedFlag)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new ParseException(Flag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Flag(trimmedFlag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 22,
      "peironggg": 40,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/TaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Parses input add task arguments and creates a new Specified Task object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TaskCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Task ID provided is not correct.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Takes in user input parameters and creates a Todo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns a todo task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static Todo parseTodo(String[] nameKeywords, int length) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String description \u003d nameKeywords[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assert length \u003e\u003d 2 : \"The task should already contain a description of \u003e\u003d 1 word\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (int i \u003d 2; i \u003c length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            description \u003d description + \" \" + nameKeywords[i];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Takes in user input parameters and creates an Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns an event task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static Event parseEvent(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        LocalDateTime formattedEventDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            String eventDescription \u003d parseTimedTaskDescription(nameKeywords, length);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            formattedEventDateTime \u003d parseTimedTaskTime(nameKeywords, length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new Event(eventDescription, formattedEventDateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Takes in user input parameters and creates a Deadline."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns a deadline task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static Deadline parseDeadline(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        LocalDateTime formattedDeadlineDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            String deadlineDescription \u003d parseTimedTaskDescription(nameKeywords, length);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            formattedDeadlineDateTime \u003d parseTimedTaskTime(nameKeywords, length);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new Deadline(deadlineDescription, formattedDeadlineDateTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Parses timed event description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param nameKeywords"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param length"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @return String of description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static String parseTimedTaskDescription(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int datePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (nameKeywords[1].substring(0, 2).equals(TASK_DATE)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            || nameKeywords[1].substring(0, 2).equals(TASK_TIME)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_MISSING_DESCRIPTION));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (int i \u003d 2; i \u003c length; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (nameKeywords[i].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                //Ignores the string segment if the length is \u003c\u003d 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } else if (nameKeywords[i].substring(0, 2).equals(TASK_DATE)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                datePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskDescription \u003d nameKeywords[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (int i \u003d 2; i \u003c datePrefixLocation; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            taskDescription \u003d taskDescription + \" \" + nameKeywords[i];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Parses the date time String to LocalDateTime object with checks for missing date, missing time, or incorrectly"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * rounding down of date while parsing using Java API."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param nameKeywords"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param length"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static LocalDateTime parseTimedTaskTime(String[] nameKeywords, int length) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        boolean hasDatePrefix \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        boolean hasTimePrefix \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int datePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int timePrefixLocation \u003d -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (int i \u003d 2; i \u003c length; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (nameKeywords[i].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                //Ignores the string segment if the length is \u003c\u003d 1"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } else if (nameKeywords[i].substring(0, 2).equals(TASK_DATE)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                hasDatePrefix \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                datePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } else if (nameKeywords[i].substring(0, 2).equals(TASK_TIME)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                hasTimePrefix \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                timePrefixLocation \u003d i;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (datePrefixLocation \u003e timePrefixLocation) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_WRONG_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } else if (!hasDatePrefix || !hasTimePrefix) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_MISSING_DATE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assert hasDatePrefix : \"Date prefix d/ should already be handled properly\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assert hasTimePrefix : \"Time prefix t/ should already be handled properly\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assert datePrefixLocation \u003e 0 : \"Date prefix location should already been found correctly\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assert timePrefixLocation \u003e 0 : \"Time prefix location should already been found correctly\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            formattedDateTime \u003d parseDateTimeString(nameKeywords[datePrefixLocation], nameKeywords[timePrefixLocation]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Formats the datetime String to LocalDateTime object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateString"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param timeString"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @return LocalDateTime object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static LocalDateTime parseDateTimeString(String dateString, String timeString)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskDateTime \u003d dateString.substring(2) + \" \" + timeString.substring(2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        LocalDateTime formattedTaskDateTime;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            formattedTaskDateTime \u003d LocalDateTime.parse(taskDateTime, dateTimeFormat);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_WRONG_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (isDateTimeChanged(taskDateTime, formattedTaskDateTime)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_INVALID_DATETIME));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return formattedTaskDateTime;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Takes in user input and returns a string representation of Task ID"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param nameKeywords is the partitioned user input"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @return Task ID String"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws ParseException when input is incorrect"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static String parseDeleteTask(String[] nameKeywords) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (nameKeywords.length !\u003d 2) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return nameKeywords[1];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Compares if the string forms of user input and parsed LocalDateTime have the same values."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param userInput date time input by the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param parsedDateTime date time parsed into Java LocalDateTime."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @return a boolean value check if both araguments\u0027 values are the same."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static boolean isDateTimeChanged(String userInput, LocalDateTime parsedDateTime) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String stringifiedParsedDateTime \u003d parsedDateTime.toString().replace(\u0027T\u0027, \u0027 \u0027);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return !(userInput.equals(stringifiedParsedDateTime));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 206,
      "peironggg": 9
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.MISSION_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.QUEST_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_MISSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_QUEST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_DEADLINE_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_EVENT_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_PAST_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_PAST_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_STUDENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TASK_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TODO_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_UPCOMING_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_UPCOMING_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewAllStudentsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewConsultationsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewMasteryChecksCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewMissionDeadlineCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewOneStudentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewPastConsultationsCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewPastMasteryChecksCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewQuestDeadlineCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewTaskListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUngradedMissionCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUngradedQuestCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUpcomingConsultationsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUpcomingMasteryChecksCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ViewCommandParser.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * and returns a ViewCommand object for execution.M"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // split the string trimmedArgs with regex of one or more whitespace characters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // result will be as such: {-s, Alex, Yeoh}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String[] inputsAfterCommandType \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assert inputsAfterCommandType.length \u003e 0 : \"String array of the arguments is empty\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Flag commandFlag;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            commandFlag \u003d ParserUtil.parseFlag(inputsAfterCommandType[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        boolean argsHasAdditionalParams \u003d inputsAfterCommandType.length \u003e 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Optional\u003cName\u003e optionalStudentName \u003d Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (argsHasAdditionalParams) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            logger.info(\"extra input arguments\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String[] nameComponents \u003d Arrays.copyOfRange(inputsAfterCommandType, 1, inputsAfterCommandType.length);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Name studentName \u003d ParserUtil.parseName(nameComponents);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            logger.info(\"Student name: \" + studentName.fullName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            optionalStudentName \u003d Optional.of(studentName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // switch command to return the respective view commands"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        switch (commandFlag.getFlag()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        case MISSION_DEADLINE:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return new ViewMissionDeadlineCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        case QUEST_DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return new ViewQuestDeadlineCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        case VIEW_STUDENT:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (optionalStudentName.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                Name name \u003d optionalStudentName.get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                return new ViewOneStudentCommand(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                return new ViewAllStudentsCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        case UNGRADED_MISSION:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return new ViewUngradedMissionCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        case UNGRADED_QUEST:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return new ViewUngradedQuestCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_TASK_LIST:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new ViewTaskListCommand(VIEW_TASK_LIST);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_TODO_LIST:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new ViewTaskListCommand(VIEW_TODO_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_EVENT_LIST:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new ViewTaskListCommand(VIEW_EVENT_LIST);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case VIEW_DEADLINE_LIST:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new ViewTaskListCommand(VIEW_DEADLINE_LIST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_CONSULTATION_LIST:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewConsultationsCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_UPCOMING_CONSULTATION_LIST:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewUpcomingConsultationsCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_PAST_CONSULTATION_LIST:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewPastConsultationsCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_MASTERY_CHECK_LIST:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewMasteryChecksCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_UPCOMING_MASTERY_CHECK_LIST:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewUpcomingMasteryChecksCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        case VIEW_PAST_MASTERY_CHECK_LIST:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return new ViewPastMasteryChecksCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 17,
      "Asuraxsoul": 13,
      "ngzhenteng": 32,
      "peironggg": 36,
      "wilinetan": 45
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.ConsultationList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheckList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.greeting.Greeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.MissionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.QuestList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.UniqueStudentsList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.UniqueTasksList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Wraps all data at the jarvis-book level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final UniqueStudentsList students;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final MissionList missions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final QuestList quests;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final ConsultationList consultations;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final MasteryCheckList masteryChecks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final UniqueTasksList tasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Greeting greeting;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        students \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        missions \u003d new MissionList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        tasks \u003d new UniqueTasksList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        quests \u003d new QuestList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        consultations \u003d new ConsultationList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        masteryChecks \u003d new MasteryCheckList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        greeting \u003d new Greeting();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.students.setPersons(students);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        setMissions(newData.getMissionList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        setQuests(newData.getQuestList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        setConsultations(newData.getConsultationList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        setMasteryChecks(newData.getMasteryChecksList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        setGreeting(newData.getGreeting().getValue());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the jarvis book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds a student to the jarvis book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The student must not already exist in the jarvis book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code target} must exist in the jarvis book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * student in the jarvis book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setPerson(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        students.setPerson(target, editedStudent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code key} must exist in the jarvis book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns whether student list has students already."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasStudents() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return students.hasStudents();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 students.equals(((AddressBook) other).students));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cQuest\u003e getQuestList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this.quests.asObservableList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void addQuest(Quest quest) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.quests.add(quest);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setQuests(List\u003cQuest\u003e quests) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.quests.setQuests(quests);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isQuestInList(String name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.quests.isQuestInList(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean updateQuest(String name) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.quests.updateQuest(name);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Missions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void addMission(Mission mission) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.missions.add(mission);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setMissions(List\u003cMission\u003e missions) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.missions.setMissions(missions);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cMission\u003e getMissionList() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.missions.asObservableList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isMissionInList(String name) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.missions.isMissionInList(name);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean updateMission(String name) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.missions.updateMission(name);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consultations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.consultations.add(consultation);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setConsultations(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.consultations.setConsultations(consultations);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.consultations.asObservableList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isConsultationInList(String name) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return consultations.isConsultationInList(name);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns whether consultation is in consultations list already."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean hasConsultation(Consultation toAddConsultation) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAddConsultation);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return consultations.contains(toAddConsultation);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MasteryChecks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void addMasteryCheck(MasteryCheck masteryCheck) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.masteryChecks.add(masteryCheck);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setMasteryChecks(List\u003cMasteryCheck\u003e masteryChecks) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.masteryChecks.setMasteryChecks(masteryChecks);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cMasteryCheck\u003e getMasteryChecksList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.masteryChecks.asObservableList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isMasteryCheckInList(String name) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this.masteryChecks.isMasteryCheckInList(name);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns whether mastery check is in mastery check list already."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean hasMasteryCheck(MasteryCheck toAddMasteryCheck) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAddMasteryCheck);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return masteryChecks.contains(toAddMasteryCheck);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a todo with the same identity as {@code todo} exists in the jarvis book."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return tasks.contains(todo);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds a todo to the jarvis book."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The todo must not already exist in the jarvis book."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.tasks.add(todo);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the jarvis book."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return tasks.contains(event);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds an event to the jarvis book."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The event must not already exist in the jarvis book."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.tasks.add(event);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a deadline with the same identity as {@code deadline} exists in the jarvis book."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return tasks.contains(deadline);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds a deadline to the jarvis book."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The deadline must not already exist in the jarvis book."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.tasks.add(deadline);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the jarvis book."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds a task to the jarvis book."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The task must not already exist in the jarvis book."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code key} must exist in the jarvis book."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return this.tasks.asObservableList();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting.getGreeting();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setGreeting(String greeting) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.greeting.setGreeting(greeting);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Checks whether the name of the user exists."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return true if it exists"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasGreeting() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return !greeting.isEmpty();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 95,
      "Asuraxsoul": 75,
      "ngzhenteng": 23,
      "peironggg": 74,
      "-": 80,
      "wilinetan": 20
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** {@code Predicate} that always evaluate to true to show all students*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** {@code Predicate} that evaluate to true if mission is ongoing */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    Predicate\u003cMission\u003e PREDICATE_SHOW_ALL_MISSIONS \u003d mission -\u003e mission.getDeadline().contains(\"Due\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that always evaluate to true if it is a consultation*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cConsultation\u003e PREDICATE_SHOW_ALL_CONSULTATIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that evaluates to true when the consultation has taken place in the past. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cConsultation\u003e PREDICATE_SHOW_PAST_CONSULTATIONS \u003d unused -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            unused.getDateAndTime().isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that evaluates to true when the consultation will take place in the future. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cConsultation\u003e PREDICATE_SHOW_UPCOMING_CONSULTATIONS \u003d unused -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            unused.getDateAndTime().isAfter(LocalDateTime.now());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that always evaluate to true if it is a mastery check */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cMasteryCheck\u003e PREDICATE_SHOW_ALL_MASTERY_CHECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that evaluates to true when the mastery check has taken place in the past. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cMasteryCheck\u003e PREDICATE_SHOW_PAST_MASTERY_CHECKS \u003d unused -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            unused.getDateAndTime().isBefore(LocalDateTime.now());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** {@code Predicate} that evaluates to true when the mastery check will take place in the future. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    Predicate\u003cMasteryCheck\u003e PREDICATE_SHOW_UPCOMING_MASTERY_CHECKS \u003d unused -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            unused.getDateAndTime().isAfter(LocalDateTime.now());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true if quest is ongoing */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    Predicate\u003cQuest\u003e PREDICATE_SHOW_ALL_QUESTS \u003d quest -\u003e quest.getDeadline().contains(\"Due\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** {@code Predicate} that always evaluate to true to show all tasks */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is a Todo */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TODOS \u003d task -\u003e Task.getType(task).equals(\"T\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is an Event */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_EVENTS \u003d task -\u003e Task.getType(task).equals(\"E\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** {@code Predicate} that evaluates to true when task is a Deadline */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_DEADLINES \u003d task -\u003e Task.getType(task).equals(\"D\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the user prefs\u0027 jarvis book file path."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the user prefs\u0027 jarvis book file path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserLogin \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns user login details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a UserLogin object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    UserLogin getUserLogin();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets user login with new details."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param userLogin updated user login details to be set"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setUserLogin(ReadOnlyUserLogin userLogin);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns whether the login.json has username specified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasUsername();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns whether the password.json has password specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a boolean"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasPassword();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User\u0027s Greeting \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setGreeting(String greeting);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasGreeting();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    StringProperty getGreeting();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Replaces jarvis book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Students \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the jarvis book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    boolean hasPerson(Student student);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code target} must exist in the jarvis book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * another existing student in the jarvis book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setPerson(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if students exist."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasStudents();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The student must exist in the jarvis book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    void deletePerson(Student target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code student} must not already exist in the jarvis book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    void addPerson(Student student);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds the student list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param students"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setStudents(List\u003cStudent\u003e students);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Adds the given todo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code todo} must not already exist in the jarvis book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void addTodo(Todo todo);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code event} must not already exist in the jarvis book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Adds the given deadline."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code deadline} must not already exist in the jarvis book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void addDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a todo with the same identity as {@code todo} exists in the jarvis book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasTodo(Todo todo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the jarvis book."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a deadline with the same identity as {@code deadline} exists in the jarvis book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    boolean hasDeadline(Deadline deadline);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /** Returns an unmodifiable view of the filtered mission list. */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The task must exist in the jarvis book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consultations  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Adds the given consultation."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code consultation} must not already exist in the jarvis book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void addConsultation(Consultation consultation);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    void setConsultations(List\u003cConsultation\u003e consultations);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns an unmodifiable view of the filtered consultation list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cConsultation\u003e getFilteredConsultationsList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    void updateConsultationsList(Predicate\u003cConsultation\u003e predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean isConsultationInList(String identifier);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean hasConsultation(Consultation toAddConsultation);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mastery Checks  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    void addMasteryCheck(MasteryCheck masteryCheck);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    void setMasteryChecks(List\u003cMasteryCheck\u003e masteryChecks);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cMasteryCheck\u003e getFilteredMasteryChecksList();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    void updateMasteryChecksList(Predicate\u003cMasteryCheck\u003e predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean isMasteryCheckInList(String identifier);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean hasMasteryCheck(MasteryCheck toAddMasteryCheck);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Mission List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Updates the filter of the filtered mission list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void updateMissionsList(Predicate\u003cMission\u003e predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered mission list. */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    ObservableList\u003cMission\u003e getFilteredMissionList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Missions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds the given mission."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param mission The mission to be added"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void addMission(Mission mission);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the entire list of missions."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param missions"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setMissions(List\u003cMission\u003e missions);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean isMissionInList(String title);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    boolean updateMission(String name);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Adds the given quest."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param quest The quest to be added"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void addQuest(Quest quest);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the entire list of quests."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param quests"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void setQuests(List\u003cQuest\u003e quests);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered quest list */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    ObservableList\u003cQuest\u003e getFilteredQuestList();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Updates the filter of the filtered quest list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void updateQuestsList(Predicate\u003cQuest\u003e predicate);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    boolean isQuestInList(String title);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    boolean updateQuest(String name);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventSupport \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void addPropertyChangeListener(PropertyChangeListener pcv);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 60,
      "Asuraxsoul": 56,
      "ngzhenteng": 7,
      "peironggg": 123,
      "-": 62,
      "wilinetan": 26
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeSupport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents the in-memory model of the jarvis book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final UserLogin userLogin;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final FilteredList\u003cMission\u003e filteredMissions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final FilteredList\u003cQuest\u003e filteredQuests;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final FilteredList\u003cConsultation\u003e filteredConsultations;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final FilteredList\u003cMasteryCheck\u003e filteredMasteryChecks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private StringProperty greeting;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final PropertyChangeSupport support;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, ReadOnlyUserLogin userLogin) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.fine(\"Initializing with jarvis book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.userLogin \u003d new UserLogin(userLogin);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        filteredMissions \u003d new FilteredList\u003c\u003e(this.addressBook.getMissionList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        filteredQuests \u003d new FilteredList\u003c\u003e(this.addressBook.getQuestList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        filteredConsultations \u003d new FilteredList\u003c\u003e(this.addressBook.getConsultationList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        filteredMasteryChecks \u003d new FilteredList\u003c\u003e(this.addressBook.getMasteryChecksList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        support \u003d new PropertyChangeSupport(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        greeting \u003d this.addressBook.getGreeting();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new UserLogin());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserLogin \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public UserLogin getUserLogin() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLogin;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setUserLogin(ReadOnlyUserLogin editedUserLogin) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(editedUserLogin);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        support.firePropertyChange(\"loginDetails\", userLogin, editedUserLogin);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.userLogin.resetData(editedUserLogin);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasUsername() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLogin.hasUsername();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasPassword() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLogin.hasPassword();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User\u0027s Name \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setGreeting(String greeting) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.setGreeting(greeting);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasGreeting() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return addressBook.hasGreeting();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return addressBook.getGreeting();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean hasPerson(Student student) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return addressBook.hasStudent(student);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void deletePerson(Student target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.removeStudent(target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void addPerson(Student student) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.addStudent(student);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.setStudents(students);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setPerson(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.setPerson(target, editedStudent);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasStudents() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return addressBook.hasStudents();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Missions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void addMission(Mission mission) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.addMission(mission);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setMissions(List\u003cMission\u003e missions) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.setMissions(missions);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isMissionInList(String title) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert title.length() \u003e 0 : \"No mission title provided\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.isMissionInList(title);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean updateMission(String name) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert name.length() \u003e 0 : \"No mission title provided\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.updateMission(name);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Mission List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void updateMissionsList(Predicate\u003cMission\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        filteredMissions.setPredicate(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Mission} backed by the internal list of"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cMission\u003e getFilteredMissionList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return filteredMissions;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void addQuest(Quest quest) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        addressBook.addQuest(quest);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setQuests(List\u003cQuest\u003e quests) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.setQuests(quests);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Quest} backed by the internal list of"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cQuest\u003e getFilteredQuestList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return filteredQuests;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void updateQuestsList(Predicate\u003cQuest\u003e predicate) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        filteredQuests.setPredicate(predicate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isQuestInList(String title) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert title.length() \u003e 0 : \"No quest title provided\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.isQuestInList(title);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean updateQuest(String name) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert name.length() \u003e 0 : \"No quest title provided\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.updateQuest(name);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return addressBook.hasTodo(todo);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        addressBook.addTodo(todo);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return addressBook.hasEvent(event);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return addressBook.hasDeadline(deadline);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        addressBook.addDeadline(deadline);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Quest} backed by the internal list of"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        addressBook.removeTask(target);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Consultations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        addressBook.addConsultation(consultation);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setConsultations(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        addressBook.setConsultations(consultations);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cConsultation\u003e getFilteredConsultationsList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return filteredConsultations;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void updateConsultationsList(Predicate\u003cConsultation\u003e predicate) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        filteredConsultations.setPredicate(predicate);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isConsultationInList(String identifier) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert identifier.length() \u003e 0 : \"No identifier provided\";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.isConsultationInList(identifier);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean hasConsultation(Consultation toAddConsultation) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAddConsultation);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.hasConsultation(toAddConsultation);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mastery Checks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void addMasteryCheck(MasteryCheck masteryCheck) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        addressBook.addMasteryCheck(masteryCheck);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setMasteryChecks(List\u003cMasteryCheck\u003e masteryChecks) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        addressBook.setMasteryChecks(masteryChecks);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cMasteryCheck\u003e getFilteredMasteryChecksList() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return filteredMasteryChecks;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void updateMasteryChecksList(Predicate\u003cMasteryCheck\u003e predicate) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        filteredMasteryChecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isMasteryCheckInList(String identifier) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assert identifier.length() \u003e 0 : \"No identifier provided\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.isMasteryCheckInList(identifier);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean hasMasteryCheck(MasteryCheck toAddMasteryCheck) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAddMasteryCheck);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return addressBook.hasMasteryCheck(toAddMasteryCheck);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyChangeListener \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void addPropertyChangeListener(PropertyChangeListener pcl) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        support.addPropertyChangeListener(pcl);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 124,
      "Asuraxsoul": 58,
      "ngzhenteng": 16,
      "peironggg": 91,
      "-": 100,
      "wilinetan": 45
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Unmodifiable view of an jarvis book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns an unmodifiable view of the missions list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * This list will not contain any duplicate missions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    ObservableList\u003cMission\u003e getMissionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns an unmodifiable view of the quest list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * This list will not contain any duplicate quests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    ObservableList\u003cQuest\u003e getQuestList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /** Returns an unmodifiable view of the consultation list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * This list will not contain any duplicate consultations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cConsultation\u003e getConsultationList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns an unmodifiable view of the mastery check list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * This list will not contain any duplicate mastery checks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    ObservableList\u003cMasteryCheck\u003e getMasteryChecksList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the greeting of the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    StringProperty getGreeting();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 9,
      "Asuraxsoul": 6,
      "ngzhenteng": 1,
      "peironggg": 16,
      "-": 13,
      "wilinetan": 11
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/ReadOnlyUserLogin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Unmodifiable view of user login details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public interface ReadOnlyUserLogin {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    Username getUsername();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    String getUserPassword();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 11
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/UserLogin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class UserLogin implements ReadOnlyUserLogin {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Username username \u003d new Username();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private String password \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a {@code UserLogin} with default values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public UserLogin() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a {@code UserLogin} with the prefs in {@code userLogin}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public UserLogin(ReadOnlyUserLogin userLogin) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        resetData(userLogin);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a {@code UserLogin} with username and password."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public UserLogin(Username username, String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void resetData(ReadOnlyUserLogin newUserLogin) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(newUserLogin);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        setUsername(newUserLogin.getUsername());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        setPassword(newUserLogin.getUserPassword());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getUserPassword() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasUsername() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return !username.isEmpty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasPassword() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return !password.isEmpty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setUsername(Username username) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setPassword(String password) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this.username.isEmpty() || this.password.isEmpty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                || (other instanceof UserLogin // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 username.equals(((UserLogin) other).getUsername())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 password.equals(((UserLogin) other).getUserPassword())); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        builder.append(\" Username: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(getUserPassword());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 88
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"jarvis.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 84,
      "wilinetan": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/consultation/Consultation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": " * Represents a Consultation that contains information relating to general consultations."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class Consultation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private String studentName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code Consultation} with the given parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param studentName the name of the subject of this consultation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param dateAndTime date and time of the consultation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public Consultation(String studentName, LocalDateTime dateAndTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public String getStudentName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public String getIdentifier() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return studentName + dateAndTime.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setStudentName(String studentName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setDateAndTime(LocalDateTime dateAndTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return Objects.hash(studentName, dateAndTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns true if both consultations have the same identity and data fields, not including the place of meeting."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isSameConsultation(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (!(other instanceof Consultation)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Consultation otherConsultation \u003d (Consultation) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return otherConsultation.getStudentName().equals(getStudentName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 otherConsultation.getDateAndTime().equals(getDateAndTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns true if both consultations have the same identity and data fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (!(other instanceof Consultation)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Consultation otherConsultation \u003d (Consultation) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return otherConsultation.getStudentName().equals(getStudentName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 otherConsultation.getDateAndTime().equals(getDateAndTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns true if both consultations occur at the same date and time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean conflictsWith(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (!(other instanceof Consultation)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Consultation otherConsultation \u003d (Consultation) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return otherConsultation.getDateAndTime().equals(getDateAndTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        sb.append(\"Consultation with \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        sb.append(getStudentName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        sb.append(\" @\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        LocalDateTime date \u003d getDateAndTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        sb.append(date.getDayOfMonth() + \" \" + date.getMonth() + \", \" + date.getYear() + \" / \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        sb.append(date.getHour() + \":\" + date.getMinute());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 111,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/consultation/ConsultationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ConsultationList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final ObservableList\u003cConsultation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Adds a consultation to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void add(Consultation toAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns true if the list contains an equivalent consultation as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean contains(Consultation toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameConsultation);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setConsultations(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(consultations);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.internalList.setAll(consultations);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cConsultation\u003e asObservableList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isConsultationInList(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList.stream().anyMatch(consultation -\u003e consultation.getIdentifier().equals(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 41,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/consultation/MasteryCheck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class MasteryCheck extends Consultation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private boolean passed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code MasteryCheck} with the given parameters. {@code lengthOfMeeting} and {@code notes} may be null."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param studentName         subject of the mastery check"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param dateAndTime     date and time of the mastery check"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public MasteryCheck(String studentName, LocalDateTime dateAndTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        super(studentName, dateAndTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isPassed() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return passed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public MasteryCheck setPassed(boolean passed) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.passed \u003d passed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code MasteryCheck} with a full mark with the given parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static MasteryCheck createFullMarkMC(String studentName, LocalDateTime dateAndTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return new MasteryCheck(studentName, dateAndTime).setPassed(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code MasteryCheck} with zero marks with the given parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public static MasteryCheck createZeroMarkMC(String studentName, LocalDateTime dateAndTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return new MasteryCheck(studentName, dateAndTime).setPassed(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 40,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/consultation/MasteryCheckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class MasteryCheckList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final ObservableList\u003cMasteryCheck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Adds a mastery check to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void add(MasteryCheck toAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Returns true if the list contains an equivalent mastery check as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean contains(MasteryCheck toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameConsultation);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setMasteryChecks(List\u003cMasteryCheck\u003e masteryChecks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        requireNonNull(masteryChecks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.internalList.setAll(masteryChecks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ObservableList\u003cMasteryCheck\u003e asObservableList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean isMasteryCheckInList(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return internalList.stream().anyMatch(masteryCheck -\u003e masteryCheck.getIdentifier().equals(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 41,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/flag/Flag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.flag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.DELETE_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.EDIT_LOGIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.EDIT_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.MISSION_DEADLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.QUEST_DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DEADLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TODO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_MISSION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_QUEST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_DEADLINE_LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_EVENT_LIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_PAST_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_PAST_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_STUDENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TASK_LIST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_TODO_LIST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_UPCOMING_CONSULTATION_LIST;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_UPCOMING_MASTERY_CHECK_LIST;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import com.google.common.collect.ImmutableSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Flag class encapsulates the flags, eg: -m, etc, that will appear after a command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Flag provided is invalid\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final Set\u003cString\u003e VALID_FLAGS \u003d ImmutableSet.of(MISSION_DEADLINE, QUEST_DEADLINE, UNGRADED_QUEST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            UNGRADED_MISSION, VIEW_STUDENT, TASK_TODO, TASK_EVENT, TASK_DEADLINE, TASK_DATE, TASK_TIME, VIEW_TASK_LIST,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            VIEW_TODO_LIST, VIEW_EVENT_LIST, VIEW_DEADLINE_LIST, VIEW_CONSULTATION_LIST, VIEW_PAST_CONSULTATION_LIST,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            VIEW_UPCOMING_CONSULTATION_LIST, VIEW_UPCOMING_MASTERY_CHECK_LIST, VIEW_PAST_MASTERY_CHECK_LIST,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            VIEW_MASTERY_CHECK_LIST, DELETE_TASK, EDIT_STUDENT, EDIT_LOGIN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public final String flag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a Flag object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param flag must not be null or invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(flag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        checkArgument(isValidFlag(flag), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this.flag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Checks whether given test flag is a valid flag."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param test Flag to be tested"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A Boolean denoting whether the flag is valid"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static boolean isValidFlag(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return VALID_FLAGS.contains(test);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 68
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/greeting/Greeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.greeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Greeting {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String DEFAULT_GREETING \u003d \"Hi! Please log in to continue\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final StringProperty greeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs an empty Greeting object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Greeting() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.greeting \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting.getValue().isEmpty() || greeting.getValue().equals(DEFAULT_GREETING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setGreeting(String newGreeting) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (verifyGreeting(newGreeting)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.greeting.setValue(DEFAULT_GREETING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            this.greeting.setValue(padWithIntro(newGreeting));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private boolean verifyGreeting(String greeting) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting \u003d\u003d null || greeting.isEmpty() || greeting.equals(DEFAULT_GREETING)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                || greeting.contains(\"Welcome\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String padWithIntro(String greeting) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return \"Welcome, \" + greeting + \"!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting.getValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                || (other instanceof Greeting // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 greeting.getValue().equals(((Greeting) other).getGreeting().getValue())); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 60
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/login/Username.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a UserLogin\u0027s username in the login.json."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \"Username invalid, it has to be the same as your Luminus user login i.d. with the format \u0027nusstu\u0027 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    + \"followed by a backslash and your NusNetId \u0027e1234567\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9]+\\\\\\\\[a-zA-Z0-9]+$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs an empty username object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Username() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param username A valid name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username.isEmpty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 username.equals(((Username) other).username)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 66
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/mission/Mission.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.mission;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Mission {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final boolean isGraded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a mission object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Mission(String title, String deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a mission object with updated isGraded field."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param isGraded"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Mission(String title, String deadline, boolean isGraded) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d isGraded;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean getIsGraded() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return isGraded;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Mission setIsGraded(boolean isGraded) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Mission(title, deadline, isGraded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns true if both missions have the same title and deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!(other instanceof Mission)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Mission otherMission \u003d (Mission) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return otherMission.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 otherMission.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 otherMission.getIsGraded() \u003d\u003d getIsGraded();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 16,
      "wilinetan": 62
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/mission/MissionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.mission;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class MissionList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final ObservableList\u003cMission\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Adds a mission to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void add(Mission toAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns true if the list contains an equivalent mission as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean contains(Mission toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void setMissions(List\u003cMission\u003e missions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(missions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.internalList.setAll(missions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public ObservableList\u003cMission\u003e asObservableList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean isMissionInList(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return internalList.stream().anyMatch(mission -\u003e mission.getTitle().equals(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Updates the mission found to be ungraded"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param name mission title"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @return true if missions was found and updated successfully"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean updateMission(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Optional\u003cMission\u003e missionToUpdate \u003d internalList.stream().filter(mission -\u003e mission.getTitle().equals(name))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (missionToUpdate.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            Mission mission \u003d missionToUpdate.get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.internalList.remove(missionToUpdate.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            mission \u003d mission.setIsGraded(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.internalList.add(mission);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 12,
      "peironggg": 25,
      "wilinetan": 26
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/quest/Quest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.quest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class Quest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final boolean isGraded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a Quest object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Quest(String title, String deadline) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a quest object with updated isGraded field."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param isGraded"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Quest(String title, String deadline, boolean isGraded) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d isGraded;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean getIsGraded() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return isGraded;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Quest setIsGraded(boolean isGraded) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Quest(title, deadline, isGraded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns true if both quests have the same title and deadline."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!(other instanceof Quest)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Quest otherQuest \u003d (Quest) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return otherQuest.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 otherQuest.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 otherQuest.getIsGraded() \u003d\u003d getIsGraded();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "wilinetan": 77
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/quest/QuestList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.quest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class QuestList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final ObservableList\u003cQuest\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Adds a Quest to the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void add(Quest toAdd) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void setQuests(List\u003cQuest\u003e quests) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.internalList.setAll(quests);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public ObservableList\u003cQuest\u003e asObservableList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean isQuestInList(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return internalList.stream().anyMatch(quest -\u003e quest.getTitle().equals(name));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Updates the quest found to be ungraded"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @param name quest title"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @return true if quest was found and updated successfully"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean updateQuest(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Optional\u003cQuest\u003e questToUpdate \u003d internalList.stream().filter(quest -\u003e quest.getTitle().equals(name))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (questToUpdate.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            Quest quest \u003d questToUpdate.get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.internalList.remove(questToUpdate.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            quest \u003d quest.setIsGraded(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.internalList.add(quest);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "wilinetan": 49
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a Student\u0027s email in the jarvis book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param email A valid email jarvis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a Student\u0027s name in the jarvis book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces and hyphens, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The first character of the jarvis must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}[-]? ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 4,
      "peironggg": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a Student in the jarvis book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final Telegram telegram;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Student(Name name, Telegram telegram, Email email) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireAllNonNull(name, telegram, email);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Getter method for the name of the student."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Getter method for the telegram username of the student."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Telegram getTelegram() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return telegram;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Getter method for the email jarvis of the student."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean isSamePerson(Student otherStudent) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 (otherStudent.getTelegram().equals(getTelegram()) || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 otherStudent.getTelegram().equals(getTelegram())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return Objects.hash(name, telegram, email);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(\" Telegram: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(getTelegram())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 7,
      "ngzhenteng": 16,
      "peironggg": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/Telegram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a Student\u0027s telegram username in the jarvis book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Telegram {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public final String username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param username A valid phone number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Telegram(String username) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                || (other instanceof Telegram // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                \u0026\u0026 username.equals(((Telegram) other).username)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return username.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 38
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/UniqueStudentsList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSamePerson(Student)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * As such, adding and updating of persons uses Student#isSamePerson(Student) for equality so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * as to ensure that the student being added or updated is unique in terms of identity in the UniqueStudentsList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * However, the removal of a student uses Student#equals(Object) so as to ensure that the student with exactly"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * @see Student#isSamePerson(Student)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class UniqueStudentsList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setPerson(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!target.isSamePerson(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setPersons(UniqueStudentsList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setPersons(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!personsAreUnique(students)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public boolean hasStudents() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return !internalList.isEmpty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                || (other instanceof UniqueStudentsList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentsList) other).internalList));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private boolean personsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                if (students.get(i).isSamePerson(students.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 2,
      "ngzhenteng": 133,
      "peironggg": 8,
      "wilinetan": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 5,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.TaskCommandParser.DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a Deadeline object that has taskId, description, date and time attributes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Deadline object from CLI jarvis."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateTime of Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Deadline(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d generateTaskId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a Deadeline object that has taskId, description, date and time attributes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Deadline object from addressbook.txt data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param taskId of Deadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateTime of Deadline"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Deadline(String taskId, String description, String dateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.compareTaskNum(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String replacedDateTime \u003d dateTime.replace(\u0027T\u0027, \u0027 \u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(replacedDateTime, dateTimeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getTaskId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return taskId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getUnformattedDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return dateTime.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns a unique task id."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String generateTaskId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int taskNum \u003d Task.getTaskNum();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.taskNumInc();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return \"D\" + taskNum;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns true if both tasks have the same task id."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!(other instanceof seedu.jarvis.model.task.Deadline)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Deadline otherTask \u003d (Deadline) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return this.taskId.equals(otherTask.getTaskId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        builder.append(\"[\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getTaskId())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(\"] \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(\" by \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getDateTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 100,
      "peironggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.TaskCommandParser.DATE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String taskId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an Event object that has taskId, description, date and time attributes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Event object from CLI jarvis."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateTime of Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Event(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d generateTaskId();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates an Event object that has taskId, description, date and time attributes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Event object from addressbook.txt data file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param taskId of Event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateTime of Event"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Event(String taskId, String description, String dateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.compareTaskNum(taskId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String replacedDateTime \u003d dateTime.replace(\u0027T\u0027, \u0027 \u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(replacedDateTime, dateTimeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getTaskId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return taskId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getUnformattedDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return dateTime.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns a unique task id."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String generateTaskId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int taskNum \u003d Task.getTaskNum();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.taskNumInc();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return \"E\" + taskNum;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns true if both tasks have the same task id."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!(other instanceof seedu.jarvis.model.task.Event)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Event otherTask \u003d (Event) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return this.taskId.equals(otherTask.getTaskId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        builder.append(\"[\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getTaskId())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(\"] \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(\" at \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getDateTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 100,
      "peironggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.add.AddCommand.TO_ADD_DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.add.AddCommand.TO_ADD_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static int taskNum \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public abstract String generateTaskId();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public abstract String getTaskId();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static int getTaskNum() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static void taskNumInc() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskNum++;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getUnformattedPossibleDateTime(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String type \u003d getType(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (type.equals(TO_ADD_EVENT)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Event taskEvent \u003d (Event) task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return taskEvent.getUnformattedDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } else if (type.equals(TO_ADD_DEADLINE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Deadline taskDeadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return taskDeadline.getUnformattedDateTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } else { // all other task types have no date time attributes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getFormattedPossibleDateTime(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String type \u003d getType(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (type.equals(TO_ADD_EVENT)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Event taskEvent \u003d (Event) task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return taskEvent.getDateTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } else if (type.equals(TO_ADD_DEADLINE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Deadline taskDeadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return taskDeadline.getDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        } else { // all other task types have no date time attributes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static String getType(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return task.getTaskId().substring(0, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static void setTaskCount(int count) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskNum \u003d count;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Compares tasknum from taskid of a task to current tasknum in Task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param taskId String"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static void compareTaskNum(String taskId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int taskNum \u003d Integer.parseInt(taskId.substring(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (taskNum \u003e\u003d Task.getTaskNum()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Task.setTaskCount(taskNum);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Task.taskNumInc();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 77,
      "peironggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String taskId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a Todo object that only has taskId and description attributes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Todo object from CLI jarvis."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d generateTaskId();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a Todo object that only has taskId and description attributes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * For creation of Todo object from addressbook.txt data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param taskId of Todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description of Todo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Todo(String taskId, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.compareTaskNum(taskId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getTaskId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return taskId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns a unique task id."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String generateTaskId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int taskNum \u003d Task.getTaskNum();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.taskNumInc();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return \"T\" + taskNum;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns true if both tasks have the same task id."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!(other instanceof seedu.jarvis.model.task.Todo)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Todo otherTask \u003d (Todo) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return this.taskId.equals(otherTask.getTaskId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        builder.append(\"[\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getTaskId())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(\"] \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 78,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/UniqueTasksList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class UniqueTasksList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Adds a mission to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.internalList.setAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public ObservableList\u003cTask\u003e asObservableList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 46,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 5,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/topic/Topic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.topic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Topic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public final String week;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public final String outline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes an empty Topic object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Topic() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.week \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.outline \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes a Topic object with the corresponding week and outline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param week week of Topic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param outline outline of Topic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Topic(String week, String outline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.outline \u003d outline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the week of the Topic object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a string representing the week"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getWeek() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return week;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the outline of the Topic object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a string representing the outline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getOutline() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return outline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Checks whether the Topic object is empty"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @return true if Topic is empty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this.week.isEmpty() \u0026\u0026 this.outline.isEmpty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 40,
      "wilinetan": 8
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/topic/Topics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.topic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import com.google.common.collect.ImmutableMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class Topics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public final ImmutableMap\u003cInteger, Topic\u003e allTopics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes a new Topics object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Topics() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Map\u003cInteger, Topic\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(2, new Topic(\"2\", \"Primitives\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(3, new Topic(\"3\", \"Iterative and Recursive Processes\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(4, new Topic(\"4\", \"Higher-order Functions\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(5, new Topic(\"5\", \"Lists\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(6, new Topic(\"6\", \"List Processing\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(7, new Topic(\"7\", \"Prep for Midterms\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(8, new Topic(\"8\", \"Robots\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(9, new Topic(\"9\", \"Mutable Data \u0026 Environment Model\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(10, new Topic(\"10\", \"Memoization\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        map.put(11, new Topic(\"11\", \"Streams\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        allTopics \u003d ImmutableMap.copyOf(map);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Gets the topic for that week if it exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param week the week to be retrieved"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return the Topic object that corresponds to what is covered that week"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Topic getTopic(int week) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return allTopics.getOrDefault(week, new Topic());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 38
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"Alex Yeoh\"), new Telegram(\"alexyeoh\"), new Email(\"alexyeoh@example.com\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"Bernice Yu\"), new Telegram(\"berniceyu132\"), new Email(\"berniceyu@example.com\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"Charlotte Oliveiro\"), new Telegram(\"coliverro\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    new Email(\"charlotte@example.com\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"David Li\"), new Telegram(\"davidli\"), new Email(\"lidavid@example.com\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"Irfan Ibrahim\"), new Telegram(\"irfan\"), new Email(\"irfan@example.com\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            new Student(new Name(\"Roy Balakrishnan\"), new Telegram(\"royb\"), new Email(\"royb@example.com\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static Mission[] getSampleMissions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Mission[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Mission(\"Fractal Dimensions\", \"Due: 26th August, 23:59\", false),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Mission(\"Musical Notes\", \"Due: 12th October, 23:59\", true),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Mission(\"Reuse Pairs\", \"Due: 18th October, 23:59\", true),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Mission(\"Streams\", \"Due: 20th October, 23:59\", false),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Mission(\"Stream Anomaly\", \"Deadline is over\", false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static Quest[] getSampleQuests() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Quest[] {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Quest(\"Runic Carpets\", \"Due: 26th August, 23:59\", false),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Quest(\"Colorful Carpets\", \"Due: 3rd October, 23:59\", true),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Quest(\"Functional Expressionism\", \"Due: 10th October, 23:59\", true),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Quest(\"Cardioid Arrest\", \"Due: 20th October, 23:59\", false),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            new Quest(\"Curvaceous Wizardry\", \"Deadline is over\", false)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (Mission sampleMission: getSampleMissions()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            sampleAb.addMission(sampleMission);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (Quest sampleQuest : getSampleQuests()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            sampleAb.addQuest(sampleQuest);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 14,
      "-": 15,
      "wilinetan": 32
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/scraper/Scraper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.scraper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.WrongLoginDetailsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public interface Scraper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void startScraping() throws WrongLoginDetailsException, IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 9
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/scraper/ScraperManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.scraper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.Keys;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.chrome.ChromeDriver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.chrome.ChromeOptions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.support.ui.ExpectedConditions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.support.ui.WebDriverWait;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.OsNotSupportedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.WrongLoginDetailsException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class ScraperManager implements Scraper, PropertyChangeListener {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String STUDENT_FILTER_KEY \u003d \"STUDIO JOURNAL\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String MISSION_FILTER_KEY \u003d \"MISSION\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String QUEST_FILTER_KEY \u003d \"QUEST\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScraperManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private WebDriver driver;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private UserLogin loginInfo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private boolean isAuthenticated;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * The scraper constructor to initialize a new scraper instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public ScraperManager(UserLogin loginInfo, Model model, Storage storage) throws OsNotSupportedException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(loginInfo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.loginInfo \u003d loginInfo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Grab current os name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final String operatingSystem \u003d System.getProperty(\"os.name\").toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Set chrome driver path according to os"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (operatingSystem.contains(\"WIN\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", \"src/main/resources/chrome_driver/chromedriver.exe\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else if (operatingSystem.contains(\"MAC\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", \"src/main/resources/chrome_driver/chromedriver_mac\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else if (operatingSystem.contains(\"NUX\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            //what about ubuntu??"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", \"src/main/resources/chrome_driver/chromedriver_linux\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new OsNotSupportedException(operatingSystem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes a new WebDriver."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void initDriver() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Setup headless browser"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ChromeOptions options \u003d new ChromeOptions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        options.addArguments(\"--headless\", \"--disable-gpu\", \"--window-size\u003d1920,1200\", \"--ignore-certificate-errors\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        driver \u003d new ChromeDriver(options);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes the scraping sequence to parse for information."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws WrongLoginDetailsException"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void startScraping() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        initDriver();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        authenticate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            shutDown();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Run JavaFX-modifying functions after JavaFX Thread is done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String greeting \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            // Only fetch name if name in addressbook is empty"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (!model.hasGreeting()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                greeting \u003d getGreeting();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            List\u003cMission\u003e missions \u003d getMissions();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            List\u003cQuest\u003e quests \u003d getQuests();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            List\u003cStudent\u003e students \u003d getStudents();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            getUngradedMissionsAndQuests();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                saveToStorage(missions, quests, students, greeting);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                logger.info(\"Unable to save SA information to storage\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            shutDown();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Authenticates the user with their supplied emails and password."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void authenticate() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Check if authenticated or login information is empty"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (isAuthenticated || loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Authenticating\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Navigate to jarvis"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        driver.get(\"https://sourceacademy.nus.edu.sg/login\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Authenticate using user-supplied details"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//button[@class\u003d\u0027bp3-button bp3-large\u0027]\")).click();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//input[@id\u003d\u0027userNameInput\u0027]\")).sendKeys("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    loginInfo.getUsername().getUsername());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//input[@id\u003d\u0027passwordInput\u0027]\")).sendKeys("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    loginInfo.getUserPassword());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//span[@id\u003d\u0027submitButton\u0027]\")).click();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            WebDriverWait wait \u003d new WebDriverWait(driver, 15);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            wait.until(ExpectedConditions.urlToBe(\"https://sourceacademy.nus.edu.sg/academy/game\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logger.info(\"Authentication failed due to incorrect login details or unresponsive SA\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            authenticate();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assert driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/game\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                : \"Driver is on the wrong page (Get name)\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        logger.info(\"Getting user\u0027s name\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        driver.findElement(By.xpath(\"//button[@class\u003d\u0027bp3-button bp3-minimal\u0027]\")).click();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        WebElement nameElement \u003d driver.findElement(By.xpath(\"//div[@class\u003d\u0027bp3-text-overflow-ellipsis bp3-fill\u0027]\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String greeting \u003d nameElement.getText();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        logger.info(\"User\u0027s name has been fetched\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return greeting;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Fetches missions from Sourceacademy and saves them to storage."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a list of missions"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public List\u003cMission\u003e getMissions() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cMission\u003e missions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return missions;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            authenticate();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Getting missions\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/missions\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Navigate to missions page"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//a[@href\u003d\u0027/academy/missions\u0027]\")).click();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/missions\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                : \"Driver is on wrong page (Missions)\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Grab mission titles"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cWebElement\u003e missionTitles \u003d driver.findElements(By.xpath(\"//h4[@class\u003d\u0027bp3-heading listing-title\u0027]\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cWebElement\u003e missionDeadlines \u003d driver.findElements(By.xpath(\"//div[@class\u003d\u0027listing-due-date\u0027]\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        for (int i \u003d 0; i \u003c missionTitles.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Add mission to ModelController here"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String mTitle \u003d missionTitles.get(i).getText();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            String mDeadline \u003d missionDeadlines.get(i).getText();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            // Do not add missions that are not yet opened"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (mDeadline.contains(\"Opens at\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            logger.info((i + 1) + \"th mission added: \" + mTitle);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            missions.add(new Mission(mTitle, mDeadline));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        logger.info(\"Missions addition complete\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return missions;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Fetches quests from Sourceacademy and saves them to storage."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return returns a list of quests"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public List\u003cQuest\u003e getQuests() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cQuest\u003e quests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return quests;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            authenticate();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/quests\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Navigate to quests page"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//a[@href\u003d\u0027/academy/quests\u0027]\")).click();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/quests\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                : \"Driver is on wrong page (Quests)\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Grab quest titles"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cWebElement\u003e questTitles \u003d driver.findElements(By.xpath(\"//h4[@class\u003d\u0027bp3-heading listing-title\u0027]\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cWebElement\u003e questDeadlines \u003d driver.findElements(By.xpath(\"//div[@class\u003d\u0027listing-due-date\u0027]\"));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        for (int i \u003d 0; i \u003c questTitles.size(); i++) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Add quest to ModelController here"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String qTitle \u003d questTitles.get(i).getText();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String qDeadline \u003d questDeadlines.get(i).getText();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Do not add quests that are not yet opened"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (qDeadline.contains(\"Opens at\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logger.info((i + 1) + \"th quest added: \" + qTitle);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            quests.add(new Quest(qTitle, qDeadline));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Quests addition complete\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return quests;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Fetches students from Sourceacademy and saves them to the model."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A list of students"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public List\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            authenticate();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.info(\"Getting students\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/grading\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            // Navigate to grading page"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            driver.findElement(By.xpath(\"//a[@href\u003d\u0027/academy/grading\u0027]\")).click();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assert driver.getCurrentUrl().equals(\"https://sourceacademy.nus.edu.sg/academy/grading\")"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                : \"Driver is on wrong page (Grading)\";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        WebDriverWait wait \u003d new WebDriverWait(driver, 15);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//input[@id\u003d\u0027filterBar\u0027]\")));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Clear filter bar"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        WebElement filterBar \u003d driver.findElement(By.xpath(\"//input[@id\u003d\u0027filterBar\u0027]\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        filterBar.clear();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Filter by Studio Journal"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        driver.findElement(By.xpath(\"//input[@id\u003d\u0027filterBar\u0027]\")).sendKeys(STUDENT_FILTER_KEY + Keys.ENTER);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Get all student names"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        List\u003cWebElement\u003e studentNames \u003d driver.findElements(By.xpath(\"//div[@col-id\u003d\u0027studentName\u0027]\"));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        studentNames.remove(0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Add student names to ModelController here"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        for (WebElement name : studentNames) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                students.add(new Student(new Name(name.getText()), new Telegram(\"helloworld\"),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                        new Email(\"student@gmail.com\")));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } catch (DuplicateStudentException dse) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                // a DuplicateStudentException is thrown when addressbook.json contains a student and ScraperManager"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                // tries to fetch the same students on startup to add them to the addressbook."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                logger.info(\"ScraperManager tried adding a student which existed in addressbook.json\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Fetches the ungraded missions and quests that the user has not marked."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void getUngradedMissionsAndQuests() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (loginInfo.isEmpty()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!isAuthenticated) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            authenticate();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        logger.info(\"Getting ungraded missions and quests\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // Navigate to grading page"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        driver.findElement(By.xpath(\"//a[@href\u003d\u0027/academy/grading\u0027]\")).click();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        WebDriverWait wait \u003d new WebDriverWait(driver, 15);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//input[@id\u003d\u0027filterBar\u0027]\")));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        WebElement filterBar \u003d driver.findElement(By.xpath(\"//input[@id\u003d\u0027filterBar\u0027]\"));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        getUngradedMissions(filterBar);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        getUngradedQuests(filterBar);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Fetches the ungraded missions that the user has not marked."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void getUngradedMissions(WebElement filterBar) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        filterBar.clear();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        filterBar.sendKeys(MISSION_FILTER_KEY + Keys.ENTER);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cWebElement\u003e missionTitles \u003d driver.findElements(By.xpath(\"//div[@aria-colindex\u003d\u00272\u0027]\"));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cWebElement\u003e gradingIcons \u003d driver.findElements(By.xpath(\"//div[@aria-colindex\u003d\u00277\u0027]\"));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cString\u003e ungradedMissions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (int i \u003d 0; i \u003c missionTitles.size(); i++) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            WebElement icon \u003d gradingIcons.get(i).findElement(By.xpath(\"..//span[@icon]\"));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (icon.getAttribute(\"icon\").equals(\"cross\")"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u0026\u0026 !ungradedMissions.contains(missionTitles.get(i).getText())) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                ungradedMissions.add(missionTitles.get(i).getText());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (String mTitle : ungradedMissions) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (model.isMissionInList(mTitle)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.updateMission(mTitle);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                Mission mission \u003d new Mission(mTitle, \"Deadline is over\", false);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.addMission(mission);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        logger.info(\"Completed getting ungraded missions\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Fetches the ungraded quests that the user has not marked."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void getUngradedQuests(WebElement filterBar) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        filterBar.clear();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        filterBar.sendKeys(QUEST_FILTER_KEY + Keys.ENTER);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cWebElement\u003e questTitles \u003d driver.findElements(By.xpath(\"//div[@aria-colindex\u003d\u00272\u0027]\"));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cWebElement\u003e gradingIcons \u003d driver.findElements(By.xpath(\"//div[@aria-colindex\u003d\u00277\u0027]\"));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        List\u003cString\u003e ungradedQuests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (int i \u003d 0; i \u003c questTitles.size(); i++) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            WebElement icon \u003d gradingIcons.get(i).findElement(By.xpath(\"..//span[@icon]\"));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (icon.getAttribute(\"icon\").equals(\"cross\")"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u0026\u0026 !ungradedQuests.contains(questTitles.get(i).getText())) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                ungradedQuests.add(questTitles.get(i).getText());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (String qTitle : ungradedQuests) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (model.isQuestInList(qTitle)) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.updateQuest(qTitle);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                Quest quest \u003d new Quest(qTitle, \"Deadline is over\", false);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.addQuest(quest);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        logger.info(\"Completed getting ungraded quests\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Saves the model information to storage."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param missions list of missions to be saved"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param quests list of quests to be saved"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param students list of students to be saved"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private void saveToStorage(List\u003cMission\u003e missions, List\u003cQuest\u003e quests, List\u003cStudent\u003e students, String greeting)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            model.setGreeting(greeting);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            model.setMissions(missions);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            model.setQuests(quests);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            model.setStudents(students);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new IOException(\"Error saving to addressbook\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the WebDriver object created by ScraperManager"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * The returned object is used for testing."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return a webdriver instance"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public WebDriver getDriver() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return driver;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Shutsdown the webdriver and resets the isAuthenticated variable."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void shutDown() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        driver.quit();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Fires the startScraping method when UserLogin is modified."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param evt the event that is fired"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void propertyChange(PropertyChangeEvent evt) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        loginInfo \u003d (UserLogin) evt.getNewValue();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Execute the task on another thread to fetch and update the GUI"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Thread fetchThread \u003d new Thread(new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            public Void call() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    startScraping();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        fetchThread.start();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 30,
      "peironggg": 338,
      "wilinetan": 111
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a storage for {@link seedu.jarvis.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedConsultation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class JsonAdaptedConsultation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final String dateAndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Constructs a Json-friendly Mission object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param studentName consultation subject"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param dateAndTime consultation date and time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public JsonAdaptedConsultation(@JsonProperty(\"studentName\") String studentName, @JsonProperty(\"dateAndTime\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            String dateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 19,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedMasteryCheck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class JsonAdaptedMasteryCheck {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final String studentName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final String dateAndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final String passed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Constructs a Json-friendly Mission object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param studentName consultation subject"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param dateAndTime consultation date and time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @param passed mastery check passed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public JsonAdaptedMasteryCheck(@JsonProperty(\"studentName\") String studentName, @JsonProperty(\"dateAndTime\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            String dateAndTime, @JsonProperty(\"passed\") String passed) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.passed \u003d passed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 22,
      "peironggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedMission.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class JsonAdaptedMission {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs a Json-friendly Mission object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param title mission\u0027s title"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param deadline mission\u0027s deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonAdaptedMission(@JsonProperty(\"title\") String title, @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 18
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedQuest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class JsonAdaptedQuest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs a Json-friendly Quest object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param title quest\u0027s title"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param deadline quest\u0027s deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonAdaptedQuest(@JsonProperty(\"title\") String title, @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Converts a given {@code Quest} into this class for Jackson use."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonAdaptedQuest(Quest source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        title \u003d source.getTitle();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        deadline \u003d source.getDeadline();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 28
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final String telegram;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"telegram\") String telegram,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                              @JsonProperty(\"email\") String email) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        telegram \u003d source.getTelegram().username;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (telegram \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                    Telegram.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final Telegram modelPhone \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 9,
      "peironggg": 17,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String INVALID_TASK_TYPE \u003d \"Task type is invalid! Please follow ID format:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"T for Todo, E for Event, D for Deadline, followed by a number. Eg E15\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String INVALID_DATE_TIME_FORMAT \u003d \"Date time format is wrong! Please follow format: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            + \"YYYY-MM-DDTHH:MM\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String ID_FIELD \u003d \"Task ID\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String DESCRIPTION_FIELD \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String DATETIME_FIELD \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_TODO \u003d \"T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TASK_DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Constructs a Json-friendly task object with the given task details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param id task\u0027s id"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param description task\u0027s description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @param dateTime task\u0027s date and time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"id\") String id, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                           @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        id \u003d source.getTaskId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        dateTime \u003d source.getUnformattedPossibleDateTime(source);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ID_FIELD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DESCRIPTION_FIELD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, DATETIME_FIELD));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskType \u003d id.substring(0, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_TODO:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return new Todo(id, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_EVENT:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                return new Event(id, description, dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new IllegalValueException(INVALID_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case TASK_DEADLINE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                return new Deadline(id, description, dateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new IllegalValueException(INVALID_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new IllegalValueException(INVALID_TASK_TYPE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 94,
      "peironggg": 6
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private String greeting \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final List\u003cJsonAdaptedMission\u003e missions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private final List\u003cJsonAdaptedQuest\u003e quests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final List\u003cJsonAdaptedConsultation\u003e consultations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final List\u003cJsonAdaptedMasteryCheck\u003e masteryChecks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonSerializableAddressBook("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @JsonProperty(\"greeting\") String greeting,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @JsonProperty(\"missions\") List\u003cJsonAdaptedMission\u003e missions,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @JsonProperty(\"quests\") List\u003cJsonAdaptedQuest\u003e quests,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            @JsonProperty(\"consultations\") List\u003cJsonAdaptedConsultation\u003e consultations,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            @JsonProperty(\"masteryChecks\") List\u003cJsonAdaptedMasteryCheck\u003e masteryChecks,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.greeting \u003d greeting;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.missions.addAll(missions);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.quests.addAll(quests);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.consultations.addAll(consultations);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.masteryChecks.addAll(masteryChecks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        greeting \u003d source.getGreeting().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Converts this jarvis book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // Students"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (addressBook.hasStudent(student)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            addressBook.addStudent(student);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // Tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (addressBook.hasTask(task)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            addressBook.addTask(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.setGreeting(greeting);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 9,
      "Asuraxsoul": 22,
      "ngzhenteng": 3,
      "peironggg": 25,
      "-": 43,
      "wilinetan": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonUserLoginStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class JsonUserLoginStorage implements UserLoginStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public JsonUserLoginStorage(Path filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Path getUserLoginFilePath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Optional\u003cUserLogin\u003e readUserLogin() throws DataConversionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return readUserLogin(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Similar to {@link #readUserLogin()}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param loginFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Optional\u003cUserLogin\u003e readUserLogin(Path loginFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return JsonUtil.readJsonFile(loginFilePath, UserLogin.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void saveUserLogin(ReadOnlyUserLogin userLoginDetails) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        JsonUtil.saveJsonFile(userLoginDetails, filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 43
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, UserLoginStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    Optional\u003cUserLogin\u003e readUserLogin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void saveUserLogin(ReadOnlyUserLogin userLogin) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 14,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private UserLoginStorage userLoginStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UserPrefStorage}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * and {@code UserLoginStorage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                          UserLoginStorage userLoginStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.userLoginStorage \u003d userLoginStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserLogin methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Path getUserLoginFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLoginStorage.getUserLoginFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public Optional\u003cUserLogin\u003e readUserLogin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        logger.fine(\"Attempting to read data from login.json: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLoginStorage.readUserLogin();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void saveUserLogin(ReadOnlyUserLogin userLogin) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userLoginStorage.saveUserLogin(userLogin);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 30,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/UserLoginStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a storage for {@link seedu.jarvis.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public interface UserLoginStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns the file path of the UserLogin data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    Path getUserLoginFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns UserLogin data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A UserLogin Optional describing the login formation read."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    Optional\u003cUserLogin\u003e readUserLogin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Saves the given {@link seedu.jarvis.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param userLogin cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    void saveUserLogin(ReadOnlyUserLogin userLogin) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 37
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": " * Represents a storage for {@link seedu.jarvis.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Saves the given {@link seedu.jarvis.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "         * @see seedu.jarvis.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/ConsultationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ConsultationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private static final String FXML \u003d \"ConsultationListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public final Consultation consultation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Label studentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Label dateAndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code ConsultationCard} with the given {@code Consultation} and index to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ConsultationCard(Consultation consultation, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        this.consultation \u003d consultation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        studentName.setText(consultation.getStudentName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        LocalDateTime localDateTime \u003d consultation.getDateAndTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String date \u003d localDateTime.toLocalDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String time \u003d localDateTime.toLocalTime().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        dateAndTime.setText(\"Details: \" + date + \" at \" + time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        if (!(other instanceof ConsultationCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        ConsultationCard card \u003d (ConsultationCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u0026\u0026 consultation.equals(card.consultation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 57,
      "ngzhenteng": 1,
      "peironggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/ConsultationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ConsultationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private static final String FXML \u003d \"ConsultationListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ConsultationListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private ListView\u003cConsultation\u003e consultationListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Creates a {@code ConsultationListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public ConsultationListPanel(ObservableList\u003cConsultation\u003e consultationList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Label emptyListLabel \u003d new Label(\"No Consultations\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        emptyListLabel.setStyle(\"-fx-text-fill: white; -fx-font-size: 20\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        consultationListView.setPlaceholder(emptyListLabel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        consultationListView.setItems(consultationList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        consultationListView.setCellFactory(listView -\u003e new ConsultationListPanel.ConsultationListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Consultation} using a {@code ConsultationCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    class ConsultationListViewCell extends ListCell\u003cConsultation\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        protected void updateItem(Consultation consultation, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            super.updateItem(consultation, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            if (empty || consultation \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                setGraphic(new ConsultationCard(consultation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 48,
      "peironggg": 4
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String USER_GUIDE_URL \u003d \"https://ay2021s1-cs2103t-w11-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"Please refer to the user guide by clicking the button.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Button button;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Opens the User Guide in the browser."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private void openLink() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            Desktop.getDesktop()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    .browse(URI.create(USER_GUIDE_URL));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 89,
      "wilinetan": 14
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.CommandTargetFeature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.topic.Topic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.topic.Topics;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String SEMESTER_START_DATE \u003d \"10 08 2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String USER_GUIDE_URL \u003d \"https://ay2021s1-cs2103t-w11-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String SOURCE_ACADEMY_URL \u003d \"https://sourceacademy.nus.edu.sg/login\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private MissionListPanel missionListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private QuestListPanel questListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ConsultationListPanel consultationListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private MasteryCheckListPanel masteryCheckListPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Tab studentTab;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Tab missionTab;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Tab questTab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Tab consultationTab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Tab masteryCheckTab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Tab taskTab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private StackPane missionListPanelPlaceholder;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private StackPane consultationListPanelPlaceholder;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private StackPane masteryCheckListPanelPlaceholder;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private StackPane questListPanelPlaceholder;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Label greeting;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label week;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label topic;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        setDate();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        setGreeting();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        setWeekAndTopic();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String loginMessage \u003d getLoginMessage();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        resultDisplay.setFeedbackToUser(loginMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListPanel \u003d new MissionListPanel(logic.getFilteredMissionList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListPanelPlaceholder.getChildren().add(missionListPanel.getRoot());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        questListPanel \u003d new QuestListPanel(logic.getFilteredQuestList());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        questListPanelPlaceholder.getChildren().add(questListPanel.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        consultationListPanel \u003d new ConsultationListPanel(logic.getFilteredConsultationList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        consultationListPanelPlaceholder.getChildren().add(consultationListPanel.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        masteryCheckListPanel \u003d new MasteryCheckListPanel(logic.getFilteredMasteryCheckList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        masteryCheckListPanelPlaceholder.getChildren().add(masteryCheckListPanel.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the current date."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private void setDate() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd LLLL yyyy\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String formattedDate \u003d currentDate.format(formatter);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        date.setText(formattedDate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the greeting."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private void setGreeting() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        greeting.textProperty().bind(logic.getGreeting());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the week and topic"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private void setWeekAndTopic() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MM yyyy\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        LocalDate semesterStartDate \u003d LocalDate.parse(SEMESTER_START_DATE, formatter);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        long daysBetween \u003d ChronoUnit.DAYS.between(semesterStartDate, currentDate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        int weekNumber \u003d (int) daysBetween / 7;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Topic topic \u003d new Topics().getTopic(weekNumber);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        week.setText(\"Week \" + weekNumber + \": \");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (topic.isEmpty()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.topic.setText(\"No topic\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            this.topic.setText(topic.getOutline());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logic.saveToStorage();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            logger.info(\"Unable to save to file\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Unable to save to file\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Opens Source Academy in the browser."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private void handleSourceAcademy() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            Desktop.getDesktop().browse(URI.create(SOURCE_ACADEMY_URL));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Opens User Guide in the browser."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private void handleUserGuide() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            Desktop.getDesktop()"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    .browse(URI.create(USER_GUIDE_URL));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionListPanel getMissionListPanel() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return missionListPanel;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private String getLoginMessage() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (!logic.hasUsername()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            sb.append(\"Please edit your username using `edit -l u/[USERNAME]` and restart to fetch missions/quests\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else if (!logic.hasPassword()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            sb.append(\"Please edit your password using `edit -l p/[PASSWORD]` and restart to fetch missions/quests\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            sb.append(\"Welcome to Jarvis! Enter \u0027help\u0027 to see the amazing things you can do with me.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @see seedu.jarvis.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            CommandTargetFeature commandTargetFeature \u003d commandResult.getCommandTargetFeature();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            SingleSelectionModel\u003cTab\u003e tabSelector \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (commandTargetFeature \u003d\u003d CommandTargetFeature.Students) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(studentTab);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else if (commandTargetFeature \u003d\u003d CommandTargetFeature.Missions) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(missionTab);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else if (commandTargetFeature \u003d\u003d CommandTargetFeature.Quest) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(questTab);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else if (commandTargetFeature \u003d\u003d CommandTargetFeature.Consultations) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(consultationTab);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else if (commandTargetFeature \u003d\u003d CommandTargetFeature.MasteryCheck) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(masteryCheckTab);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else if (commandTargetFeature \u003d\u003d CommandTargetFeature.Tasks) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                tabSelector.select(taskTab);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 3,
      "ngzhenteng": 44,
      "peironggg": 34,
      "-": 182,
      "wilinetan": 132
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/MasteryCheckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class MasteryCheckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private static final String FXML \u003d \"MasteryCheckListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public final Consultation masteryCheck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Label studentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Label dateAndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a {@code ConsultationCard} with the given {@code Consultation} and index to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public MasteryCheckCard(Consultation masteryCheck, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.masteryCheck \u003d masteryCheck;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentName.setText(masteryCheck.getStudentName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        LocalDateTime localDateTime \u003d masteryCheck.getDateAndTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String date \u003d localDateTime.toLocalDate().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String time \u003d localDateTime.toLocalTime().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        dateAndTime.setText(\"Details: \" + date + \" at \" + time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!(other instanceof MasteryCheckCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        MasteryCheckCard card \u003d (MasteryCheckCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u0026\u0026 masteryCheck.equals(card.masteryCheck);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 63,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/MasteryCheckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class MasteryCheckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private static final String FXML \u003d \"MasteryCheckListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MasteryCheckListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ListView\u003cMasteryCheck\u003e masteryCheckListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a {@code ConsultationListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public MasteryCheckListPanel(ObservableList\u003cMasteryCheck\u003e masteryCheckList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Label emptyListLabel \u003d new Label(\"No Mastery Checks\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        emptyListLabel.setStyle(\"-fx-text-fill: white; -fx-font-size: 20\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        masteryCheckListView.setPlaceholder(emptyListLabel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        masteryCheckListView.setItems(masteryCheckList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        masteryCheckListView.setCellFactory(listView -\u003e new MasteryCheckListPanel.MasteryCheckListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Consultation} using a {@code ConsultationCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    class MasteryCheckListViewCell extends ListCell\u003cMasteryCheck\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        protected void updateItem(MasteryCheck masteryCheck, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            super.updateItem(masteryCheck, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (empty || masteryCheck \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                setGraphic(new MasteryCheckCard(masteryCheck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 48,
      "peironggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/MissionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * An UI component that displays information of a {@code Mission}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class MissionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String FXML \u003d \"MissionListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public final Mission mission;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code MissionCard} with the given {@code Mission} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionCard(Mission mission, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.mission \u003d mission;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title.setText(mission.getTitle());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline.setText(mission.getDeadline());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!(other instanceof MissionCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        MissionCard card \u003d (MissionCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 mission.equals(card.mission);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "wilinetan": 63
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/MissionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * Panel containing the list of missions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class MissionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String FXML \u003d \"MissionListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MissionListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private ListView\u003cMission\u003e missionListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code MissionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionListPanel(ObservableList\u003cMission\u003e missionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Label emptyListLabel \u003d new Label(\"No Missions\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        emptyListLabel.setStyle(\"-fx-text-fill: white; -fx-font-size: 20\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListView.setPlaceholder(emptyListLabel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListView.setItems(missionList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListView.setCellFactory(listView -\u003e new MissionListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Mission} using a {@code MissionCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    class MissionListViewCell extends ListCell\u003cMission\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        protected void updateItem(Mission mission, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            super.updateItem(mission, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (empty || mission \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setGraphic(new MissionCard(mission, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "wilinetan": 51
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/QuestCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * An UI component that displays information of a {@code Quest}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class QuestCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String FXML \u003d \"QuestListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public final Quest quest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code QuestCard} with the given {@code Quest} and index to display."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestCard(Quest quest, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.quest \u003d quest;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title.setText(quest.getTitle());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline.setText(quest.getDeadline());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        if (!(other instanceof QuestCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        QuestCard card \u003d (QuestCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u0026\u0026 quest.equals(card.quest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "wilinetan": 63
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/QuestListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * Panel containing the list of quests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class QuestListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String FXML \u003d \"QuestListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private ListView\u003cQuest\u003e questListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code QuestListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestListPanel(ObservableList\u003cQuest\u003e questList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Label emptyListLabel \u003d new Label(\"No Quests\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        emptyListLabel.setStyle(\"-fx-text-fill: white; -fx-font-size: 20\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        questListView.setPlaceholder(emptyListLabel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        questListView.setItems(questList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        questListView.setCellFactory(listView -\u003e new QuestListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Quest} using a {@code QuestCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    class QuestListViewCell extends ListCell\u003cQuest\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        protected void updateItem(Quest quest, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            super.updateItem(quest, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            if (empty || quest \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                setGraphic(new QuestCard(quest, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "wilinetan": 51
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * An UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Label consultationDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        phone.setText(\"Telegram: \" + student.getTelegram().username);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        email.setText(\"E-mail: \" + student.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 13,
      "peironggg": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 14,
      "peironggg": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private Label taskType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a {@code TaskCard} with the given {@code Task}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public TaskCard(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        id.setText(task.getTaskId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        dateTime.setText(task.getFormattedPossibleDateTime(task));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskType.setText(getTaskType(task));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskType.setStyle(\"-fx-text-fill: rgb(72,184,158); -fx-font-size: 10px;\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public String getTaskType(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String type \u003d Task.getType(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"TODO\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"EVENT\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"DEADLINE\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return \"task\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 80,
      "peironggg": 2
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MissionListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Creates a {@code TaskListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Label emptyListLabel \u003d new Label(\"No Tasks\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        emptyListLabel.setStyle(\"-fx-text-fill: white; -fx-font-size: 20\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        taskListView.setPlaceholder(emptyListLabel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                setGraphic(new TaskCard(task).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 46,
      "peironggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/jarvis.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 83,
      "wilinetan": 1
    }
  },
  {
    "path": "src/main/java/seedu/jarvis/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/ConsultationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateAndTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wireseo": 32
    }
  },
  {
    "path": "src/main/resources/view/ConsultationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cListView fx:id\u003d\"consultationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wireseo": 7,
      "ngzhenteng": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "#infoBar {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    -fx-padding: 2 14 2 14;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-border-color: #4cc3a8;;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-prompt-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-background-color: #4cc3a8;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-border-color: #4cc3a8;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "#resultDisplay {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    -fx-padding: 3px;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ".tab-pane .tab-header-area .tab {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-pref-height: 160;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-pref-width: 40;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ".tab-pane *.tab-header-background {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "#tabPane .tab:selected {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-border-color: #c3c525;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "#tabPane .tab:selected .tab-label {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #c3c525;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ".date_label {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #4cc3a8;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ".topic_label {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-text-fill: #c3c525;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 11,
      "-": 345,
      "wilinetan": 43
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "               \u003cButton fx:id\u003d\"button\" mnemonicParsing\u003d\"false\" onAction\u003d\"#openLink\" text\u003d\"Open\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "wilinetan": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "         title\u003d\"Jarvis\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003cImage url\u003d\"@/images/jarvis.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"infoBar\" styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"450.0\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cVBox prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" layoutX\u003d\"61.0\" layoutY\u003d\"83.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                          \u003cImage url\u003d\"@/images/jarvis.png\" backgroundLoading\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cVBox prefWidth\u003d\"50.0\" alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003cImageView fx:id\u003d\"sourceAcademy\" fitHeight\u003d\"30.0\" layoutX\u003d\"61.0\" layoutY\u003d\"83.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                             pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" onMouseClicked\u003d\"#handleSourceAcademy\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                          \u003cImage url\u003d\"@/images/source_academy.png\" backgroundLoading\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cVBox prefWidth\u003d\"50.0\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003cImageView fx:id\u003d\"userGuide\" fitHeight\u003d\"30.0\" layoutX\u003d\"61.0\" layoutY\u003d\"83.0\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                             pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" onMouseClicked\u003d\"#handleUserGuide\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cimage\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                          \u003cImage url\u003d\"@/images/user_guide.png\" backgroundLoading\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003c/image\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "              \u003cVBox alignment\u003d\"BOTTOM_RIGHT\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003cHBox alignment\u003d\"TOP_RIGHT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                      \u003cLabel fx:id\u003d\"greeting\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cLabel fx:id\u003d\"week\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cLabel fx:id\u003d\"topic\" styleClass\u003d\"topic_label\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                      \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$date\" styleClass\u003d\"date_label\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"200\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cInsets top\u003d\"4\" right\u003d\"4\" bottom\u003d\"4\" left\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003cTabPane fx:id\u003d\"tabPane\" side\u003d\"LEFT\" rotateGraphic\u003d\"true\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"680.0\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                 tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cTab fx:id\u003d\"studentTab\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cGroup\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel text\u003d\"Student\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/Group\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cVBox fx:id\u003d\"studentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Student List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "              \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cTab fx:id\u003d\"missionTab\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cGroup\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel text\u003d\"Mission\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/Group\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cVBox fx:id\u003d\"missionList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Mission List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"missionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cTab fx:id\u003d\"questTab\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cGroup\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel text\u003d\"Quest\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/Group\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cVBox fx:id\u003d\"questList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Quest List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cStackPane fx:id\u003d\"questListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cTab fx:id\u003d\"consultationTab\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cGroup\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel text\u003d\"Consultation\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/Group\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cVBox fx:id\u003d\"consultationList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Consult List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "              \u003cStackPane fx:id\u003d\"consultationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cTab fx:id\u003d\"masteryCheckTab\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cGroup\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003cLabel text\u003d\"Mastery Check\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003c/Group\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cVBox fx:id\u003d\"masteryCheckList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Mastery Check List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"masteryCheckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003cTab fx:id\u003d\"taskTab\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003cGroup\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel text\u003d\"Task\" rotate\u003d\"90\" styleClass\u003d\"tab-label\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "              \u003c/Group\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c!--              \u003cLabel text\u003d\"Task List\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e--\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "              \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 6,
      "ngzhenteng": 26,
      "peironggg": 1,
      "-": 54,
      "wilinetan": 114
    }
  },
  {
    "path": "src/main/resources/view/MasteryCheckListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateAndTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 32
    }
  },
  {
    "path": "src/main/resources/view/MasteryCheckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    \u003cListView fx:id\u003d\"masteryCheckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 8
    }
  },
  {
    "path": "src/main/resources/view/MissionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 32
    }
  },
  {
    "path": "src/main/resources/view/MissionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003cListView fx:id\u003d\"missionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 8
    }
  },
  {
    "path": "src/main/resources/view/QuestListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 33
    }
  },
  {
    "path": "src/main/resources/view/QuestListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \u003cListView fx:id\u003d\"questListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "         \u003cLabel fx:id\u003d\"taskType\" text\u003d\"\\$taskType\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "               \u003cInsets bottom\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 40
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"alice@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"94351253\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"alice@gmail.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"98765432\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"johnd@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"95352563\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"heinz@example.com\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"87652533\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"cornelia@example.com\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482224\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"werner@example.com\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482427\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"lydia@example.com\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"George Best\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482442\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"anna@example.com\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"missions\": [ ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"quests\": [ ],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"tasks\": [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 26,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonUserLoginStorageTest/EmptyUserLogin.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"username\": \"\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"password\": \"\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/jarvis.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 33,
      "wilinetan": 1
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//package seedu.jarvis.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import static seedu.jarvis.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.logic.commands.view.ViewAllStudentsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.storage.JsonUserLoginStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonUserLoginStorage userLoginStorage \u003d new JsonUserLoginStorage(temporaryFolder.resolve(\"userLogin.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userLoginStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        String viewAllStudentsCommand \u003d ViewAllStudentsCommand.SAMPLE_COMMAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandSuccess(viewAllStudentsCommand, ViewAllStudentsCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonUserLoginStorage userLoginStorage \u003d new JsonUserLoginStorage("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                temporaryFolder.resolve(\"ioExceptionUserLogin.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userLoginStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        expectedModel.addPerson(expectedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 162
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 11,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.beans.PropertyChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserLogin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Student student \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(student));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.personsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public UserLogin getUserLogin() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setUserLogin(ReadOnlyUserLogin userLogin) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean hasUsername() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean hasPassword() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public void addPerson(Student student) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public boolean hasPerson(Student student) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public void deletePerson(Student target) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public void setPerson(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public ObservableList\u003cMission\u003e getFilteredMissionList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public ObservableList\u003cQuest\u003e getFilteredQuestList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean hasStudents() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public void updateMissionsList(Predicate\u003cMission\u003e predicate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setQuests(List\u003cQuest\u003e quests) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public void updateQuestsList(Predicate\u003cQuest\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public ObservableList\u003cConsultation\u003e getFilteredConsultationsList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void updateConsultationsList(Predicate\u003cConsultation\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public boolean isConsultationInList(String identifier) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void addMission(Mission mission) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void setMissions(List\u003cMission\u003e missions) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public void addQuest(Quest quest) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public boolean hasDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public boolean hasConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void addMasteryCheck(MasteryCheck masteryCheck) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void setMasteryChecks(List\u003cMasteryCheck\u003e masteryChecks) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public ObservableList\u003cMasteryCheck\u003e getFilteredMasteryChecksList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void updateMasteryChecksList(Predicate\u003cMasteryCheck\u003e predicate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public boolean isMasteryCheckInList(String identifier) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public boolean hasMasteryCheck(MasteryCheck toAddMasteryCheck) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public void addDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void addConsultation(Consultation consultation) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public void setConsultations(List\u003cConsultation\u003e consultations) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public boolean isMissionInList(String title) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public boolean updateMission(String name) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public boolean isQuestInList(String title) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public boolean updateQuest(String name) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void addPropertyChangeListener(PropertyChangeListener pcv) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public boolean hasGreeting() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public void setGreeting(String name) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ModelStubWithPerson(Student student) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public boolean hasPerson(Student student) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return this.student.isSamePerson(student);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        final ArrayList\u003cStudent\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public boolean hasPerson(Student student) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return personsAdded.stream().anyMatch(student::isSamePerson);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public void addPerson(Student student) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            personsAdded.add(student);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 66,
      "Asuraxsoul": 48,
      "ngzhenteng": 32,
      "peironggg": 73,
      "-": 150,
      "wilinetan": 55
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 11,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand.EditLoginDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditLoginDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALID_USERNAME_STUDENT \u003d \"nusstu\\\\e1234567\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALID_USERNAME_PROF \u003d \"nusstf\\\\e1234567\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALID_PASSWORD_1 \u003d \"test132\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String VALID_PASSWORD_2 \u003d \"test133\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_TELEGRAM + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_TELEGRAM + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_TELEGRAM + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final EditLoginDescriptor DESC_STUDENT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final EditLoginDescriptor DESC_PROF;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String EDIT_STUDENT \u003d \"-s \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String EDIT_LOGIN \u003d \"-l \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        DESC_STUDENT \u003d new EditLoginDescriptorBuilder().withUsername(VALID_USERNAME_STUDENT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPassword(VALID_PASSWORD_1).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        DESC_PROF \u003d new EditLoginDescriptorBuilder().withUsername(VALID_USERNAME_PROF)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPassword(VALID_PASSWORD_1).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * - the jarvis book, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * {@code model}\u0027s jarvis book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 10,
      "peironggg": 37,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: NEED TO WRITE DELETE COMMAND TESTS"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.deletePerson(studentToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.deletePerson(studentToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of jarvis book list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 3,
      "ngzhenteng": 12,
      "peironggg": 12,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/EditLoginCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_PROF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_USERNAME_PROF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand.EditLoginDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditLoginDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.LoginBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditLoginCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin editedUserLogin \u003d new LoginBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginDescriptor descriptor \u003d new EditLoginDescriptorBuilder(editedUserLogin).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginCommand editLoginCommand \u003d new EditLoginCommand(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditLoginCommand.MESSAGE_EDIT_LOGIN_SUCCESS, editedUserLogin);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedModel.setUserLogin(editedUserLogin);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editLoginCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin editedUserLogin \u003d new LoginBuilder().withUsername(VALID_USERNAME_PROF).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginDescriptor descriptor \u003d new EditLoginDescriptorBuilder(editedUserLogin).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginCommand editLoginCommand \u003d new EditLoginCommand(descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditLoginCommand.MESSAGE_EDIT_LOGIN_SUCCESS, editedUserLogin);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedModel.setUserLogin(editedUserLogin);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editLoginCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void execute_noFieldsSpecified_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginCommand editLoginCommand \u003d new EditLoginCommand(new EditLoginDescriptor());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin editedUserLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditLoginCommand.MESSAGE_EDIT_LOGIN_SUCCESS, editedUserLogin);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editLoginCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final EditLoginCommand standardCommand \u003d new EditLoginCommand(DESC_STUDENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginDescriptor copyDescriptor \u003d new EditLoginDescriptor(DESC_STUDENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginCommand commandWithSameValues \u003d new EditLoginCommand(copyDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLoginCommand(DESC_PROF)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 92
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/EditLoginDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_PROF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PASSWORD_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_USERNAME_PROF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand.EditLoginDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditLoginDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditLoginDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginDescriptor descriptor \u003d new EditLoginDescriptor(DESC_STUDENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(DESC_STUDENT.equals(descriptor));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(DESC_STUDENT.equals(DESC_STUDENT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(DESC_STUDENT.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(DESC_STUDENT.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(DESC_STUDENT.equals(DESC_PROF));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different username -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditLoginDescriptor editedStudent \u003d new EditLoginDescriptorBuilder(DESC_STUDENT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withUsername(VALID_USERNAME_PROF).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(DESC_STUDENT.equals(editedStudent));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // different password -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        editedStudent \u003d new EditLoginDescriptorBuilder(DESC_STUDENT).withPassword(VALID_PASSWORD_2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(DESC_STUDENT.equals(editedStudent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 44
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/EditStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditStudentCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.setPerson(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        StudentBuilder personInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedStudent \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.setPerson(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.setPerson(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // edit student in filtered list into a duplicate in jarvis book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * but smaller than size of jarvis book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of jarvis book list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 24,
      "peironggg": 63,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 4,
      "peironggg": 10,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 3,
      "peironggg": 15,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewAllStudentsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewAllStudentsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewAllStudentsCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewAllStudentsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_studentListNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandSuccess(new ViewAllStudentsCommand(), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                ViewAllStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_studentListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandSuccess(new ViewAllStudentsCommand(), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                ViewAllStudentsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewAllStudentsCommand viewAllStudentsCommand \u003d new ViewAllStudentsCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewAllStudentsCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 16,
      "peironggg": 15,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewConsultationsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewConsultationsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewConsultationsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Command command \u003d new ViewConsultationsCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String expectedMessage \u003d ViewConsultationsCommand.MESSAGE_SUCCESS; // TODO: Fix this expected message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: implement test to check if actual output is correct"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        ViewConsultationsCommand viewConsultationsCommand \u003d new ViewConsultationsCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewConsultationsCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 35,
      "peironggg": 8
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewMissionDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.FRACTAL_DIMENSIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.MUSICAL_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.REUSE_PAIRS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.STREAMS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewMissionDeadlineCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewMissionDeadlineCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Command command \u003d new ViewMissionDeadlineCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String expectedMessage \u003d ViewMissionDeadlineCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewMissionDeadlineCommand viewMissionDeadlineCommand \u003d new ViewMissionDeadlineCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewMissionDeadlineCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_viewMissionDeadlineCommand_missionListFiltered() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String expectedMessage \u003d ViewMissionDeadlineCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        ViewMissionDeadlineCommand command \u003d new ViewMissionDeadlineCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        expectedModel.updateMissionsList(model.PREDICATE_SHOW_ALL_MISSIONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertEquals(Arrays.asList(FRACTAL_DIMENSIONS, MUSICAL_NOTES, REUSE_PAIRS, STREAMS),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.getFilteredMissionList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 29,
      "peironggg": 17,
      "wilinetan": 14
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewOneStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewOneStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewOneStudentCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewOneStudentCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Name studentName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        studentName \u003d new Name(TypicalStudents.ALICE.getName().fullName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void constructor_nullStudentName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Name name \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewOneStudentCommand(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Name studentName \u003d TypicalStudents.ALICE.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Model model \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewOneStudentCommand viewOneStudentCommand \u003d new ViewOneStudentCommand(studentName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewOneStudentCommand.execute(model));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_studentNameExists_viewSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Name studentName \u003d TypicalStudents.ALICE.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Command command \u003d new ViewOneStudentCommand(studentName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model actualModel \u003d new ModelManager(TypicalStudents.getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        String expectedMessage \u003d String.format(ViewOneStudentCommand.MESSAGE_SUCCESS, studentName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(actualModel.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedModel.updateFilteredPersonList(student -\u003e student.getName().equals(studentName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void execute_studentNameDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Name nonExistentName \u003d TypicalStudents.DIMITRI.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewOneStudentCommand viewOneStudentCommand \u003d new ViewOneStudentCommand(nonExistentName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model actualModel \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertCommandFailure(viewOneStudentCommand, actualModel, Messages.MESSAGE_STUDENT_NAME_NOT_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 51,
      "peironggg": 21
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewPastConsultationsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewPastConsultationsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewPastConsultationsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Command command \u003d new ViewPastConsultationsCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String expectedMessage \u003d ViewPastConsultationsCommand.MESSAGE_SUCCESS; // TODO: Fix this expected message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: implement test to check if actual output is correct"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        ViewPastConsultationsCommand viewPastConsultationsCommand \u003d new ViewPastConsultationsCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewPastConsultationsCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 35,
      "peironggg": 8
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewQuestDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewQuestDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewQuestDeadlineCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Command command \u003d new ViewQuestDeadlineCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String expectedMessage \u003d ViewQuestDeadlineCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        ViewQuestDeadlineCommand viewQuestDeadlineCommand \u003d new ViewQuestDeadlineCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewQuestDeadlineCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 13,
      "wilinetan": 29
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewUngradedMissionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.FRACTAL_DIMENSIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.STREAMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.STREAM_ANOMALY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUngradedMissionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewUngradedMissionCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Command command \u003d new ViewUngradedMissionCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String expectedMessage \u003d ViewUngradedMissionCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        ViewUngradedMissionCommand viewUngradedMissionCommand \u003d new ViewUngradedMissionCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewUngradedMissionCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_viewUngradedMissionCommand_missionListFiltered() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String expectedMessage \u003d ViewUngradedMissionCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        ViewUngradedMissionCommand command \u003d new ViewUngradedMissionCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        expectedModel.updateMissionsList(ViewUngradedMissionCommand.PREDICATE_SHOW_UNGRADED_MISSIONS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertEquals(Arrays.asList(FRACTAL_DIMENSIONS, STREAMS, STREAM_ANOMALY),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                model.getFilteredMissionList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 11,
      "wilinetan": 47
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewUngradedQuestCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUngradedQuestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class ViewUngradedQuestCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Command command \u003d new ViewUngradedQuestCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String expectedMessage \u003d ViewUngradedQuestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        ViewUngradedQuestCommand viewUngradedQuestCommand \u003d new ViewUngradedQuestCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewUngradedQuestCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 8,
      "wilinetan": 34
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/commands/ViewUpcomingConsultationsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewUpcomingConsultationsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ViewUpcomingConsultationsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_noFilters_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Command command \u003d new ViewUpcomingConsultationsCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        String expectedMessage \u003d ViewUpcomingConsultationsCommand.MESSAGE_SUCCESS; // TODO: Fix this expected message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: implement test to check if actual output is correct"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void execute_emptyModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        Model emptyModel \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        ViewUpcomingConsultationsCommand viewUpcomingConsultationsCommand \u003d new ViewUpcomingConsultationsCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e viewUpcomingConsultationsCommand.execute(emptyModel));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 35,
      "peironggg": 8
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // multiple addresses - last jarvis accepted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // missing jarvis prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // invalid jarvis"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 5,
      "ngzhenteng": 10,
      "peironggg": 4,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.EDIT_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewAllStudentsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                EditStudentCommand.COMMAND_WORD + \" \" + EDIT_STUDENT + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                + StudentUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parseCommand_viewAllStudents() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(parser.parseCommand(ViewAllStudentsCommand.SAMPLE_COMMAND) instanceof ViewAllStudentsCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 4,
      "ngzhenteng": 7,
      "peironggg": 23,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                DeleteCommand.MESSAGE_DELETE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 2,
      "peironggg": 2,
      "-": 25,
      "wilinetan": 5
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/EditStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.EDIT_STUDENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertParseFailure(parser, EDIT_STUDENT + \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userInput \u003d EDIT_STUDENT + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 7,
      "peironggg": 62,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 6,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.flag.Flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"example132\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void parseTelegram_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTelegram((String) null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void parseTelegram_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Telegram expectedPhone \u003d new Telegram(VALID_PHONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parseTelegram(VALID_PHONE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void parseTelegram_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Telegram expectedPhone \u003d new Telegram(VALID_PHONE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parseTelegram(phoneWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parseFlag_invalidFlag_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFlag(\" \"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parseFlag_validFlagInCommand_success() throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Flag viewStudentFlag \u003d new Flag(\"-s\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Flag resultFlagOne \u003d ParserUtil.parseFlag(\"-s\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(viewStudentFlag.flag, resultFlagOne.flag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Flag viewMissionDeadlineFlag \u003d new Flag(\"-m\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Flag resultFlagTwo \u003d ParserUtil.parseFlag(\"-m\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(viewMissionDeadlineFlag.flag, resultFlagTwo.flag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 16,
      "peironggg": 20,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewAllStudentsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewMissionDeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.view.ViewOneStudentCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Test for invalid empty string input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parse_emptyStringInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parse_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertParseFailure(parser, \"-2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parse_viewMissionDeadline_success() throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Command command \u003d parser.parse(\"-m\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(command instanceof ViewMissionDeadlineCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parse_viewAllStudent_success() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Command command \u003d parser.parse(\"-s\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(command instanceof ViewAllStudentsCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public void parse_viewOneStudent_success() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Name studentName \u003d TypicalStudents.ALICE.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Command command \u003d parser.parse(\"-s \" + studentName.fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(command instanceof ViewOneStudentCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 43,
      "peironggg": 11,
      "wilinetan": 4
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.Consultation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.consultation.MasteryCheck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getStudentList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newStudents);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasStudent(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertFalse(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(addressBook.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void hasPersons_addressBookPopulated_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(addressBook.hasStudents());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getStudentList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * A stub ReadOnlyAddressBook whose students list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        AddressBookStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public ObservableList\u003cMission\u003e getMissionList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        public ObservableList\u003cQuest\u003e getQuestList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public ObservableList\u003cConsultation\u003e getConsultationList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        public ObservableList\u003cMasteryCheck\u003e getMasteryChecksList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        public StringProperty getGreeting() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 10,
      "Asuraxsoul": 5,
      "ngzhenteng": 18,
      "peironggg": 27,
      "-": 71,
      "wilinetan": 9
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"jarvis/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/jarvis/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Path path \u003d Paths.get(\"jarvis/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void hasPersons_addressBookPopulated_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(modelManager.hasStudents());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserPrefs userPrefs \u003d TypicalManagers.getUserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin userLogin \u003d TypicalManagers.getUserLogin();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, userLogin);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, userLogin);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, userLogin)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, userLogin)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, userLogin)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 2,
      "peironggg": 25,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/consultation/ConsultationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": "// TODO: import consultations from testutil as well"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class ConsultationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private String studentName \u003d new StudentBuilder().build().getName().fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private String studentName2 \u003d \"nullName\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: Naming constraints"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Consultation normalConsultation \u003d new Consultation(studentName, LocalDateTime.of(2020, 01,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            8, 13, 10));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Consultation consultationVariant1 \u003d new Consultation(studentName2, LocalDateTime.of(2020, 01,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            8, 13, 10));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private Consultation consultationVariant2 \u003d new Consultation(studentName, LocalDateTime.of(2020, 01,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            9, 13, 10));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertTrue(normalConsultation.equals(normalConsultation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(consultationVariant1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(consultationVariant2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void conflictsWith() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // same dateandtime -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertTrue(normalConsultation.conflictsWith(consultationVariant1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different dateandtime -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.conflictsWith(consultationVariant2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 48,
      "peironggg": 2
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/consultation/MasteryCheckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.consultation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wireseo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wireseo"
        },
        "content": "public class MasteryCheckTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    // TODO: ADD MORE TESTS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private String studentName \u003d new StudentBuilder().build().getName().fullName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private String studentName2 \u003d \"StudentName\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private MasteryCheck normalConsultation \u003d MasteryCheck.createFullMarkMC(studentName, LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            1, 8, 13, 10));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private MasteryCheck consultationVariant1 \u003d MasteryCheck.createFullMarkMC(studentName2, LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            1, 8, 13, 10));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    private MasteryCheck consultationVariant2 \u003d MasteryCheck.createFullMarkMC(studentName, LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wireseo"
        },
        "content": "            1, 9, 13, 10));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertTrue(normalConsultation.equals(normalConsultation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(consultationVariant2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.equals(consultationVariant1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    public void conflictsWith() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // same dateandtime -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertTrue(normalConsultation.conflictsWith(consultationVariant1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wireseo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        // different dateandtime -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wireseo"
        },
        "content": "        assertFalse(normalConsultation.conflictsWith(consultationVariant2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wireseo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wireseo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wireseo": 49,
      "peironggg": 2
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/flag/FlagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.flag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.MISSION_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.QUEST_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_DEADLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.TASK_TODO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_MISSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.UNGRADED_QUEST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.VIEW_STUDENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class FlagTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Flag(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_invalidFlag_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String invalidFlag \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String invalidFlagName \u003d \"-1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Flag(invalidFlag));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Flag(invalidFlagName));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getFlag() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(MISSION_DEADLINE.equals(new Flag(MISSION_DEADLINE).getFlag()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // flag creation will not accept invalid flags."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Flag(\"RandomFlag\").getFlag());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void isValidFlag() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(Flag.isValidFlag(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(Flag.isValidFlag(\"FLAG_NOT_INCLUDED\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // Flags in VALID_FLAG set is valid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(MISSION_DEADLINE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(QUEST_DEADLINE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(VIEW_STUDENT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(TASK_TODO));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(TASK_EVENT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(TASK_DEADLINE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(TASK_DATE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Flag.isValidFlag(TASK_TIME));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(Flag.isValidFlag(UNGRADED_MISSION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(Flag.isValidFlag(UNGRADED_QUEST));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 45,
      "peironggg": 12,
      "wilinetan": 2
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/login/UsernameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.login;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_invalidUsername_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String invalidUsername \u003d \"nusstutest\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUsername));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // null username"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(Username.isValidUsername(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(Username.isValidUsername(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertFalse(Username.isValidUsername(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // valid username"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(Username.isValidUsername(\"peter\\\\jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(Username.isValidUsername(\"12345\\\\12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(Username.isValidUsername(\"12345\\\\jack\")); // numbers and alphabets"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(Username.isValidUsername(\"peter\\\\12345\")); // alphabets and numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertTrue(Username.isValidUsername(\"nusstu\\\\e1234567\")); // conventional luminus username"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 40
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/mission/MissionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.mission;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.FRACTAL_DIMENSIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.MUSICAL_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.MissionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class MissionListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final MissionList missionList \u003d new MissionList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final List\u003cMission\u003e missionListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void add_nullMission_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e missionList.add(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void contains_nullMission_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e missionList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void contains_missionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(missionList.contains(FRACTAL_DIMENSIONS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void contains_missionInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionList.add(FRACTAL_DIMENSIONS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(missionList.contains(FRACTAL_DIMENSIONS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void setNullMission_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e missionList.setMissions(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionListTest.add(FRACTAL_DIMENSIONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        missionList.setMissions(missionListTest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(missionList.contains(MUSICAL_NOTES));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void changeMissionListTo_asObservableList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(missionList.getClass().equals(missionList.asObservableList().getClass()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void isMissionInList_missionInList_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionList.add(FRACTAL_DIMENSIONS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(missionList.isMissionInList(\"Fractal Dimensions\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void updateMission_missionInList_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionList.add(MUSICAL_NOTES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionList.updateMission(\"Musical Notes\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Mission editedMusicalNotes \u003d new MissionBuilder(MUSICAL_NOTES).withIsGraded(false).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(missionList.contains(editedMusicalNotes));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void updateMission_missionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        missionList.add(MUSICAL_NOTES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(missionList.updateMission(\"Streams\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 43,
      "peironggg": 5,
      "wilinetan": 26
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/mission/MissionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.mission;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.FRACTAL_DIMENSIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalMissions.MUSICAL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.MissionBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class MissionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getTitle() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(FRACTAL_DIMENSIONS.getTitle().equals(\"Fractal Dimensions\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDeadline() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(FRACTAL_DIMENSIONS.getDeadline().equals(\"Due: 26th August, 23:59\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(FRACTAL_DIMENSIONS.equals(FRACTAL_DIMENSIONS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(FRACTAL_DIMENSIONS.equals(FRACTAL_DIMENSIONS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(FRACTAL_DIMENSIONS.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(FRACTAL_DIMENSIONS.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        // different mission -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(FRACTAL_DIMENSIONS.equals(MUSICAL_NOTES));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Mission editedFractualDimensions \u003d new MissionBuilder(FRACTAL_DIMENSIONS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .withDeadline(\"Due: 20th October, 23:59\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(editedFractualDimensions.equals(FRACTAL_DIMENSIONS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different isGraded -\u003e return false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Mission editedMusicalNotes \u003d new MissionBuilder(MUSICAL_NOTES).withIsGraded(false).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(editedMusicalNotes.equals(MUSICAL_NOTES));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String missionTestToString \u003d FRACTAL_DIMENSIONS.getTitle() + \" Deadline: \" + FRACTAL_DIMENSIONS.getDeadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(FRACTAL_DIMENSIONS.toString().equals(missionTestToString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 33,
      "peironggg": 4,
      "wilinetan": 19
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/quest/QuestListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.quest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class QuestListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void setQuests() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void asObservableList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "wilinetan": 17
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/quest/QuestTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.quest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static seedu.jarvis.testutil.TypicalQuests.COLORFUL_CARPETS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import static seedu.jarvis.testutil.TypicalQuests.RUNIC_CARPETS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.testutil.QuestBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "class QuestTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void getTitle() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(RUNIC_CARPETS.getTitle().equals(\"Runic Carpets\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void getDeadline() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(RUNIC_CARPETS.getDeadline().equals(\"Due: 26th August, 23:59\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(RUNIC_CARPETS.equals(RUNIC_CARPETS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertTrue(RUNIC_CARPETS.equals(RUNIC_CARPETS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(RUNIC_CARPETS.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(RUNIC_CARPETS.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different quest -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(RUNIC_CARPETS.equals(COLORFUL_CARPETS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Quest editedRunicCarpets \u003d new QuestBuilder(RUNIC_CARPETS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                .withDeadline(\"Due: 20th October, 23:59\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(editedRunicCarpets.equals(RUNIC_CARPETS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        // different isGraded -\u003e return false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        Quest editedColorfulCarpets \u003d new QuestBuilder(COLORFUL_CARPETS).withIsGraded(false).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        assertFalse(editedColorfulCarpets.equals(COLORFUL_CARPETS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        String questTestToString \u003d RUNIC_CARPETS.getTitle() + \" Deadline: \" + RUNIC_CARPETS.getDeadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        System.out.println(RUNIC_CARPETS.toString().equals(questTestToString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "wilinetan": 55
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Keywords match phone, email and jarvis, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 8,
      "peironggg": 4,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Telegram(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 8,
      "peironggg": 12,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private final UniqueStudentsList uniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertFalse(uniqueStudentsList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(uniqueStudentsList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertTrue(uniqueStudentsList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentsList.add(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentsList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedUniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedUniqueStudentsList.add(editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedUniqueStudentsList.add(BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentsList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentsList.remove(ALICE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.remove(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.setPersons((UniqueStudentsList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedUniqueStudentsList.add(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.setPersons(expectedUniqueStudentsList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentsList.setPersons((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.add(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        uniqueStudentsList.setPersons(studentList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        UniqueStudentsList expectedUniqueStudentsList \u003d new UniqueStudentsList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        expectedUniqueStudentsList.add(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertEquals(expectedUniqueStudentsList, uniqueStudentsList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentsList.setPersons(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            -\u003e uniqueStudentsList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 54,
      "peironggg": 9,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/task/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.FORMATTED_DATETIME_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.FORMATTED_DATETIME_THREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_FOURTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FOURTH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_THIRD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Deadline deadlineTest \u003d new Deadline(TEST_TASK_DESCRIPTION_FIRST, TEST_TASK_DATETIME_FIRST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Deadline deadlineTestTwo \u003d new Deadline(TEST_TASK_DESCRIPTION_SECOND, TEST_TASK_DATETIME_SECOND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Deadline deadlineTestThree \u003d new Deadline(TEST_TASK_DESCRIPTION_THIRD, TEST_TASK_DATETIME_THIRD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Deadline deadlineTestFour \u003d new Deadline(TEST_TASK_DESCRIPTION_FOURTH, TEST_TASK_DATETIME_FOURTH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, TEST_TASK_DATETIME_FIRST));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(TEST_TASK_DESCRIPTION_FIRST, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(deadlineTestTwo.getDescription().equals(TEST_TASK_DESCRIPTION_SECOND));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(deadlineTestFour.getDescription().equals(TEST_TASK_DESCRIPTION_THIRD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(deadlineTest.getDateTime().equals(FORMATTED_DATETIME_ONE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(deadlineTestTwo.getDateTime().equals(FORMATTED_DATETIME_THREE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //same object reference -\u003e true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(deadlineTest.equals(deadlineTest));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //different object refernce -\u003e false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(deadlineTestTwo.equals(deadlineTestFour));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskTestToString \u003d \"[\" + deadlineTestThree.getTaskId() + \"] \" + deadlineTestThree.getDescription()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                + \" by \" + deadlineTestThree.getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(deadlineTestThree.toString().equals(taskTestToString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 47,
      "peironggg": 12
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/task/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.FORMATTED_DATETIME_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.FORMATTED_DATETIME_TWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_FOURTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DATETIME_THIRD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FOURTH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_THIRD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Event eventTest \u003d new Event(TEST_TASK_DESCRIPTION_FIRST, TEST_TASK_DATETIME_FIRST);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Event eventTestTwo \u003d new Event(TEST_TASK_DESCRIPTION_SECOND, TEST_TASK_DATETIME_SECOND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Event eventTestThree \u003d new Event(TEST_TASK_DESCRIPTION_THIRD, TEST_TASK_DATETIME_THIRD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Event eventTestFour \u003d new Event(TEST_TASK_DESCRIPTION_FOURTH, TEST_TASK_DATETIME_FOURTH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(null, TEST_TASK_DATETIME_FIRST));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(TEST_TASK_DESCRIPTION_FIRST, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(eventTest.getDescription().equals(TEST_TASK_DESCRIPTION_FIRST));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(eventTestThree.getDescription().equals(TEST_TASK_DESCRIPTION_FOURTH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(eventTestTwo.getDateTime().equals(FORMATTED_DATETIME_TWO));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(eventTestFour.getDateTime().equals(FORMATTED_DATETIME_ONE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //same object reference -\u003e true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(eventTest.equals(eventTest));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //different object refernce -\u003e false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(eventTestTwo.equals(eventTestFour));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskTestToString \u003d \"[\" + eventTestThree.getTaskId() + \"] \" + eventTestThree.getDescription()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "                + \" at \" + eventTestThree.getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(eventTestThree.toString().equals(taskTestToString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 47,
      "peironggg": 12
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void taskNumInc() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        int prev \u003d Task.getTaskNum();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        Task.taskNumInc();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(Task.getTaskNum() \u003d\u003d prev + 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 13,
      "peironggg": 1
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/task/TodoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_FOURTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TASK_DESCRIPTION_THIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Todo todoTest \u003d new Todo(TEST_TASK_DESCRIPTION_FIRST);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Todo todoTestTwo \u003d new Todo(TEST_TASK_DESCRIPTION_SECOND);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Todo todoTestThree \u003d new Todo(TEST_TASK_DESCRIPTION_THIRD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final Todo todoTestFour \u003d new Todo(TEST_TASK_DESCRIPTION_FOURTH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Todo(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(todoTest.getDescription().equals(TEST_TASK_DESCRIPTION_FIRST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(todoTestThree.getDescription().equals(TEST_TASK_DESCRIPTION_FOURTH));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //same object reference -\u003e true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(todoTest.equals(todoTest));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        //different object refernce -\u003e false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(todoTestTwo.equals(todoTestFour));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        String taskTestToString \u003d \"[\" + todoTestThree.getTaskId() + \"] \" + todoTestThree.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(todoTestThree.toString().equals(taskTestToString));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 38,
      "peironggg": 6
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/model/task/UniqueTasksListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_DEADLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalTasks.TEST_TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "class UniqueTasksListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final UniqueTasksList taskList \u003d new UniqueTasksList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private final List\u003cTask\u003e taskListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void contains_nullMission_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void contains_tasksNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(taskList.contains(TEST_TODO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskList.add(TEST_EVENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertTrue(taskList.contains(TEST_EVENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void setNullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskListTest.add(TEST_DEADLINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        taskList.setTasks(taskListTest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(taskList.contains(TEST_EVENT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    void changeTaskListTo_asObservableList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        assertFalse(taskList.getClass().equals(taskList.asObservableList().getClass()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 48,
      "peironggg": 5
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/scraper/ScraperManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.scraper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.OsNotSupportedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonUserLoginStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.UserLoginStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalManagers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class ScraperManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static String os \u003d System.getProperty(\"os.name\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final UserLogin USER_LOGIN \u003d getLoginDetails();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Retrieves the login details from the local login.json file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A UserLogin object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static UserLogin getLoginDetails() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLoginStorage userLoginStorage \u003d new JsonUserLoginStorage(Paths.get(\"login.json\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin userLogin \u003d initLogin(userLoginStorage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLogin;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns a UserLogin object corresponding to the data stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param storage The place where UserLogin data is stored"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return A UserLogin object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static UserLogin initLogin(UserLoginStorage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin initializedLogin;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Optional\u003cUserLogin\u003e loginOptional \u003d storage.readUserLogin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d loginOptional.orElse(new UserLogin());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            initializedLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return initializedLogin;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Iterates through the given mission list, checking if the mission title and deadlines"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * are correctly assigned and not null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param missionObservableList an observable list of missions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return true if the missionList contains missions with non null titles and deadlines"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private boolean validateMissions(ObservableList\u003cMission\u003e missionObservableList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        for (int i \u003d 0; i \u003c missionObservableList.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Mission checkedMission \u003d missionObservableList.get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String missionTitle \u003d checkedMission.getTitle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String missionDeadline \u003d checkedMission.getDeadline();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (missionTitle \u003d\u003d null || missionDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            } else if (missionTitle.length() \u003d\u003d 0 || missionDeadline.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_nullUserLogin_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e new ScraperManager(null, null, null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    as this sets the System.property \"os.name\" to android, all subsequent tests set it back to the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    original system name."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_unsupportedOs_throwsOsNotSupportedException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String invalidOsName \u003d \"android\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", invalidOsName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertThrows(OsNotSupportedException.class, () -\u003e new ScraperManager("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin(), TypicalManagers.getModel(), TypicalManagers.getStorage())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // glass box test case"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // Unable to simulate the separate Os\u0027s and their web driver set-up as the file paths are not"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // present for the Chrome object to be instantiated, even after os.name is set."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // this test case only tests if the web driver is correctly allocated for the runtime environment os,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // it does not test if the web driver is correctly allocated for all OSes."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_supportedOs_webdriverFieldSetSuccess() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        final String operatingSystem \u003d System.getProperty(\"os.name\").toUpperCase();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin(), TypicalManagers.getModel(), TypicalManagers.getStorage()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Check if the System property \"webdriver.chrome.driver\" is set correctly."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String webDriver \u003d System.getProperty(\"webdriver.chrome.driver\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (operatingSystem.contains(\"WIN\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertEquals(\"src/main/resources/chrome_driver/chromedriver.exe\", webDriver);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else if (operatingSystem.contains(\"MAC\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertEquals(\"src/main/resources/chrome_driver/chromedriver_mac\", webDriver);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else if (operatingSystem.contains(\"NUX\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertEquals(\"src/main/resources/chrome_driver/chromedriver_linux\", webDriver);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void constructor_validLoginDetails_driverInstantiated() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getPopUserLogin(USER_LOGIN.getUsername(), USER_LOGIN.getUserPassword()),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getModel(), TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertNotEquals(null, scraperManager.getDriver());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // find a way to test for linux OSes."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // Test that the assumption, the openqa imports works after the system property"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // webDriver is allocated correctly."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void authenticate_validLoginDetails_loginSuccess() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getPopUserLogin(USER_LOGIN.getUsername(), USER_LOGIN.getUserPassword()),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getModel(), TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.authenticate();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        WebDriver webDriver \u003d scraperManager.getDriver();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // check for both the url and the title of the web page to be correct"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertEquals(\"Source Academy\", webDriver.getTitle());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertEquals(\"https://sourceacademy.nus.edu.sg/academy/game\", webDriver.getCurrentUrl());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // test getMissions"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void getMissions_validLoginDetails_missionsAddedToModel() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model model \u003d new ModelManager(TypicalStudents.getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getPopUserLogin(USER_LOGIN.getUsername(), USER_LOGIN.getUserPassword()), model,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.getMissions();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ObservableList\u003cMission\u003e missionObservableList \u003d model.getAddressBook().getMissionList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Assumption that there is always at least one mission in the list. however at the end of the semester this"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // test case may fail."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        int missionCount \u003d missionObservableList.size();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (missionCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertTrue(true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertTrue(validateMissions(missionObservableList));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    // test getStudents"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void getStudents_validLoginDetails_missionsAddedToModel() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        System.setProperty(\"os.name\", os);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model model \u003d new ModelManager(TypicalStudents.getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getPopUserLogin(USER_LOGIN.getUsername(), USER_LOGIN.getUserPassword()),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                model, TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.getMissions();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ObservableList\u003cStudent\u003e studentList \u003d model.getAddressBook().getStudentList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Assumption that there is always at least one mission in the list. however at the end of the semester this"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // test case may fail."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertNotEquals(0, studentList.size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Iterates through the given quest list, checking if the quest title and deadlines"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * are correctly assigned and not null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @param questObservableList an observable list of quests"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * @return true if the questList contains missions with non null titles and deadlines"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private boolean validateQuests(ObservableList\u003cQuest\u003e questObservableList) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        for (int i \u003d 0; i \u003c questObservableList.size(); i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Quest checkedQuest \u003d questObservableList.get(i);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String questTitle \u003d checkedQuest.getTitle();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            String questDeadline \u003d checkedQuest.getDeadline();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            if (questTitle \u003d\u003d null || questDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            } else if (questTitle.length() \u003d\u003d 0 || questDeadline.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void getQuests_validLoginDetails_questsAddedToModel() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model model \u003d new ModelManager(TypicalStudents.getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getPopUserLogin(USER_LOGIN.getUsername(), USER_LOGIN.getUserPassword()),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                model, TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.initDriver();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.getQuests();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ObservableList\u003cQuest\u003e questObservableList \u003d model.getAddressBook().getQuestList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // Assumption that there is always at least one quest in the list. however at the end of the semester this"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        // test case may fail."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        int questCount \u003d questObservableList.size();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (questCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertTrue(true);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            Assertions.assertTrue(validateQuests(questObservableList));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public void startScraping_invalidLoginDetails() throws OsNotSupportedException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        if (USER_LOGIN.isEmpty()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Model model \u003d new ModelManager(TypicalStudents.getTypicalAddressBook(), TypicalManagers.getUserPrefs(),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        ScraperManager scraperManager \u003d new ScraperManager("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                TypicalManagers.getUserLogin(), model, TypicalManagers.getStorage());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e scraperManager.startScraping());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        scraperManager.shutDown();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 281
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getTelegram().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        JsonAdaptedStudent person \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        JsonAdaptedStudent person \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        JsonAdaptedStudent person \u003d new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        JsonAdaptedStudent person \u003d new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Telegram.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        JsonAdaptedStudent person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        JsonAdaptedStudent person \u003d new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 4,
      "peironggg": 17,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 3,
      "peironggg": 7,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//import seedu.jarvis.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 47
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        JsonUserLoginStorage userLoginStorage \u003d new JsonUserLoginStorage(getTempFilePath(\"login\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, userLoginStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "        *//*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 4,
      "peironggg": 5,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Adds a new {@code Student} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public AddressBookBuilder withPerson(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        addressBook.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 3,
      "peironggg": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/EditLoginDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditLoginCommand.EditLoginDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class EditLoginDescriptorBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private EditLoginDescriptor descriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptorBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor \u003d new EditLoginDescriptor();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptorBuilder(EditLoginDescriptor descriptor) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.descriptor \u003d new EditLoginDescriptor(descriptor);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Returns an {@code EditLoginDescriptor} with fields containing {@code login} details"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptorBuilder(UserLogin userLogin) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor \u003d new EditLoginDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setUsername(userLogin.getUsername());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setPassword(userLogin.getUserPassword());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the {@code Username} of the {@code EditLoginDescriptor} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptorBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setUsername(new Username(username));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the {@code Password} of the {@code EditLoginDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptorBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setPassword(password);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public EditLoginDescriptor build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 46
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setTelegram(student.getTelegram());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.setTelegram(new Telegram(phone));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 10,
      "peironggg": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/LoginBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class LoginBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"nusstu\\\\e1234568\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"example132\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Creates a {@code LoginBuilder} with the default details."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public LoginBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        password \u003d DEFAULT_PASSWORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Initializes the LoginBuilder with the data of {@code loginToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public LoginBuilder(UserLogin userLogin) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        username \u003d userLogin.getUsername();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        password \u003d userLogin.getUserPassword();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the {@code Username} of the {@code UserLogin} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public LoginBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     * Sets the {@code Password} of the {@code UserLogin} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public LoginBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public UserLogin build() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new UserLogin(username, password);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 48
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/MissionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * A utility class to help with building Mission objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class MissionBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Fractal Dimensions\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"Due: 26th August, 23:59\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final boolean DEFAULT_ISGRADED \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private boolean isGraded;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code MissionBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline \u003d DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        isGraded \u003d DEFAULT_ISGRADED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Initializes the MissionBuilder with the data of {@code missionToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionBuilder(Mission missionToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title \u003d missionToCopy.getTitle();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline \u003d missionToCopy.getDeadline();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        isGraded \u003d missionToCopy.getIsGraded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code title} of the {@code Mission} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code deadline} of the {@code Mission} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code isGraded} of the {@code Mission} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public MissionBuilder withIsGraded(boolean isGraded) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d isGraded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Mission build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Mission(title, deadline, isGraded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "wilinetan": 63
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/QuestBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * A utility class to help with building Quest objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class QuestBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Runic Carpets\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"Due: 26th August, 23:59\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final boolean DEFAULT_ISGRADED \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private boolean isGraded;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Creates a {@code QuestBuilder} with the default details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title \u003d DEFAULT_TITLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline \u003d DEFAULT_DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        isGraded \u003d DEFAULT_ISGRADED;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Initializes the QuestBuilder with the data of {@code questToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestBuilder(Quest questToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        title \u003d questToCopy.getTitle();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        deadline \u003d questToCopy.getDeadline();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        isGraded \u003d questToCopy.getIsGraded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code title} of the {@code Quest} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code deadline} of the {@code Quest} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Sets the {@code isGraded} of the {@code Quest} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public QuestBuilder withIsGraded(boolean isGraded) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        this.isGraded \u003d isGraded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public Quest build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new Quest(title, deadline, isGraded);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilinetan": 64
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Telegram;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static final String DEFAULT_TELEGRAM \u003d \"example132\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        telegram \u003d new Telegram(DEFAULT_TELEGRAM);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        telegram \u003d studentToCopy.getTelegram();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public StudentBuilder withPhone(String telegram) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        this.telegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new Student(name, telegram, email);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 55,
      "peironggg": 12
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.logic.commands.edit.EditStudentCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(student);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static String getPersonDetails(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        sb.append(PREFIX_TELEGRAM + student.getTelegram().username + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        descriptor.getTelegram().ifPresent(telegram -\u003e sb.append(PREFIX_TELEGRAM)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "                .append(telegram.username).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 9,
      "peironggg": 12,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static Student getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 7,
      "peironggg": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TodoBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class TodoBuilder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final String DEFAULT_TODO_DESCRIPTION \u003d \"Complete CS2103T increments\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public TodoBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        description \u003d DEFAULT_TODO_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * Sets the description of the Todo we are building"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @param newDescription"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public TodoBuilder withDescription(String newDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        description \u003d newDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public Todo build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 29
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalManagers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserLogin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.login.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonUserLoginStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.storage.StorageManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "public class TypicalManagers {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static UserLogin getUserLogin() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new UserLogin();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static UserLogin getPopUserLogin(Username username, String password) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        UserLogin userLogin \u003d new UserLogin();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userLogin.setUsername(username);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        userLogin.setPassword(password);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return userLogin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static JsonAddressBookStorage getJsonAddressBookStorage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(\"typicalPersonsAddressBook.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static JsonUserPrefsStorage getJsonUserPrefsStorage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new JsonUserPrefsStorage(Paths.get(\"TypicalUserPref.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static JsonUserLoginStorage getJsonUserLoginStorage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new JsonUserLoginStorage(Paths.get(\"EmptyUserLogin.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static Storage getStorage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new StorageManager(getJsonAddressBookStorage(), getJsonUserPrefsStorage(), getJsonUserLoginStorage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    public static Model getModel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peironggg"
        },
        "content": "        return new ModelManager(TypicalStudents.getTypicalAddressBook(), getUserPrefs(), getUserLogin());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 54
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalMissions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.mission.Mission;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " * A utility class containing a list of {@code Mission} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TypicalMissions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Mission FRACTAL_DIMENSIONS \u003d new MissionBuilder().withTitle(\"Fractal Dimensions\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 26th August, 23:59\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Mission MUSICAL_NOTES \u003d new MissionBuilder().withTitle(\"Musical Notes\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 12th October, 23:59\").withIsGraded(true).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Mission REUSE_PAIRS \u003d new MissionBuilder().withTitle(\"Reuse Pairs\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 18th October, 23:59\").withIsGraded(true).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Mission STREAMS \u003d new MissionBuilder().withTitle(\"Streams\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 20th October, 23:59\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Mission STREAM_ANOMALY \u003d new MissionBuilder().withTitle(\"Stream Anomaly\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Deadline is over\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private TypicalMissions() {} // prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical missions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (Mission mission : getTypicalMissions()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            ab.addMission(mission);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static List\u003cMission\u003e getTypicalMissions() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FRACTAL_DIMENSIONS, MUSICAL_NOTES, REUSE_PAIRS, STREAMS, STREAM_ANOMALY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 9,
      "peironggg": 3,
      "wilinetan": 31
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalQuests.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.quest.Quest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " * A utility class containing a list of {@code Quest} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilinetan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "public class TypicalQuests {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String TEST_QUEST_TITLE \u003d \"Fractal Dimensions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String TEST_QUEST_DEADLINE \u003d \"Due: 26th August, 23:59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest TEST_QUEST \u003d new Quest(TEST_QUEST_TITLE, TEST_QUEST_DEADLINE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest TEST_QUEST_COPY \u003d new Quest(TEST_QUEST_TITLE, TEST_QUEST_DEADLINE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest RUNIC_CARPETS \u003d new QuestBuilder().withTitle(\"Runic Carpets\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 26th August, 23:59\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest COLORFUL_CARPETS \u003d new QuestBuilder().withTitle(\"Colorful Carpets\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 3rd October, 23:59\").withIsGraded(true).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest FUNCTIONAL_EXPRESSIONISM \u003d new QuestBuilder().withTitle(\"Functional Expressionism\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 10th October, 23:59\").withIsGraded(true).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest CARDIOID_ARREST \u003d new QuestBuilder().withTitle(\"Cardioid Arrest\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Due: 20th October, 23:59\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest CURVACEOUS_WIZARDRY \u003d new QuestBuilder().withTitle(\"Curvaceous Wizardry\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            .withDeadline(\"Deadline is over\").withIsGraded(false).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String TEST_QUEST_TITLE_DIFF \u003d \"Musical Notes\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final String TEST_QUEST_DEADLINE_DIFF \u003d \"Due: 12th October, 23:59\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static final Quest TEST_QUEST_DIFF \u003d new Quest(TEST_QUEST_TITLE_DIFF, TEST_QUEST_DEADLINE_DIFF);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    private TypicalQuests() {} // prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical missions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        for (Quest quest : getTypicalQuests()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "            ab.addQuest(quest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    public static List\u003cQuest\u003e getTypicalQuests() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RUNIC_CARPETS, COLORFUL_CARPETS, FUNCTIONAL_EXPRESSIONISM,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "                CARDIOID_ARREST, CURVACEOUS_WIZARDRY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 2,
      "wilinetan": 50
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalStudents.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "import seedu.jarvis.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"cornelia@example.com\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student DIMITRI \u003d new StudentBuilder().withName(\"Dimitri Hacker\").withPhone(\"91129312\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(\"dimitrihacker@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peironggg"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Task TODO1 \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Task TODO2 \u003d new TodoBuilder().withDescription(\"Do more workouts\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Task TODO3 \u003d new TodoBuilder().withDescription(\"Practice the flute\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static final Task TODO4 \u003d new TodoBuilder().withDescription(\"Get milk from cold storage\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngzhenteng"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngzhenteng": 25,
      "peironggg": 21,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.model.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TEST_TASK_DESCRIPTION_FIRST \u003d \"Read book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TEST_TASK_DESCRIPTION_SECOND \u003d \"Sweep floor\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TEST_TASK_DESCRIPTION_THIRD \u003d \"Wash dish\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String TEST_TASK_DESCRIPTION_FOURTH \u003d \"Eat food\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final LocalDateTime TEST_TASK_DATETIME_FIRST \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            LocalDateTime.parse(\"2020-08-26 20:20\", dateTimeFormat);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final LocalDateTime TEST_TASK_DATETIME_SECOND \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            LocalDateTime.parse(\"2021-04-20 10:20\", dateTimeFormat);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final LocalDateTime TEST_TASK_DATETIME_THIRD \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            LocalDateTime.parse(\"2020-11-06 23:30\", dateTimeFormat);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final LocalDateTime TEST_TASK_DATETIME_FOURTH \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            LocalDateTime.parse(\"2019-02-19 08:58\", dateTimeFormat);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String FORMATTED_DATETIME_ONE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            TEST_TASK_DATETIME_FIRST.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String FORMATTED_DATETIME_TWO \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            TEST_TASK_DATETIME_SECOND.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String FORMATTED_DATETIME_THREE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            TEST_TASK_DATETIME_THIRD.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final String FORMATTED_DATETIME_FOUR \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "            TEST_TASK_DATETIME_FOURTH.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final Todo TEST_TODO \u003d new Todo(TEST_TASK_DESCRIPTION_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final Event TEST_EVENT \u003d new Event(TEST_TASK_DESCRIPTION_SECOND, TEST_TASK_DATETIME_THIRD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "    public static final Deadline TEST_DEADLINE \u003d new Deadline(TEST_TASK_DESCRIPTION_THIRD, TEST_TASK_DATETIME_FOURTH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Asuraxsoul"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Asuraxsoul": 35,
      "peironggg": 4
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/jarvis/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "package seedu.jarvis.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import static seedu.jarvis.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "import seedu.jarvis.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003c?import seedu.jarvis.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "\u003cfx:root type\u003d\"seedu.jarvis.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "peironggg": 1,
      "-": 5
    }
  },
  {
    "path": "typicalPersonsAddressBook.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peironggg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"students\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"alice@gmail.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Benson Meier\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"98765432\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"johnd@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Carl Kurz\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"95352563\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"heinz@example.com\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Daniel Meier\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"87652533\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"cornelia@example.com\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Elle Meyer\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482224\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"werner@example.com\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"Fiona Kunz\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482427\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"lydia@example.com\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"name\": \"George Best\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"telegram\": \"9482442\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peironggg"
        },
        "content": "    \"email\": \"anna@example.com\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  \"missions\": [ {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Fractal Dimensions\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 16th October, 23:59\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Musical Notes\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 25th October, 23:59\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Reuse Pairs\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 1st November, 23:59\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Streams\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 9th November, 23:59\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Stream Anomaly\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Deadline is over\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  \"quests\": [ {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Runic Carpets\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 26th August, 23:59\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Colorful Carpets\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 3rd October, 23:59\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Functional Expressionism\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 10th October, 23:59\\\"\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Cardioid Arrest\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Due: 20th October, 23:59\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"title\": \"Curvaceous Wizardry\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"deadline\": \"Deadline is over\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "    \"isGraded\": false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilinetan"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peironggg"
        },
        "content": "  \"tasks\": [ ]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peironggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peironggg": 32,
      "wilinetan": 42
    }
  }
]
