[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 16,
      "seowalex": 2,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "mainClassName \u003d \u0027chopchop.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    archiveName \u003d \u0027chopchop.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Ng Zhia Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/zhiayang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "[[github](http://github.com/zhiayang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Role: Technical Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Responsibilities: Command UI and Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "### Seow Alex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cimg src\u003d\"images/seowalex.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "[[github](http://github.com/seowalex)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* Role: Code quality/Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### Travis Toh"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cimg src\u003d\"images/trav1st.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[github](http://github.com/trav1st)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* Role: Testing / Deliverables and Deadlines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### Teh Xue Yong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/fall9x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "[[github](http://github.com/fall9x)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* Role: Testing / Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "### He Jialei"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/hjl99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "[[github](http://github.com/hjl99)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* Role: Deliverables and Deadlines / Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "zhiayang": 5,
      "Trav1sT": 5,
      "seowalex": 4,
      "-": 34,
      "fall9x": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Target user profile**: People that cook daily, who need a way to manage recipes and their fridge contents."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Value proposition**: Manages recipes and fridge inventory/expiry, and automatically suggests recipes to cook."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| Priority | As a ...                              | I want to ...                                                                     | So that I can ...                                      |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person learning how to cook           | view my recipes                                                                   | not get the instructions wrong                         |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | forgetful home cook                   | record recipes that I learnt from my friends and television shows                 | try to cook them in the future                         |                                                                        |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person that cannot decide             | select recipes to cook automatically based on the ingredients that i have         | eat a wider variety of meals                           |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | home cook who buys a lot of groceries | Enter the long list of products that I have bought while referring to the receipt | I can easily enter a large number of groceries at once |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | person on a diet                      | sort recipes based on calorie count                                               | choose to cook lower-calorie meals                     |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `*`      | busy mother                           | enter the list of recipes I want to cook for the week                             | find out which groceries I need to buy                 |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hjl99"
        },
        "content": "(For all use cases below, the **System** is the `Food Recipe Management System (FRMS)` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U1 - Add recipe**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add a recipe."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new recipe."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate recipe."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3.\t      "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U2 - Delete recipe**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete a recipe."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the recipe name."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of recipe name."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U3 - View recipe**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all recipes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User requests for the recipes."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS display all the recipes."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U4 - Filter recipes**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered recipes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of recipes."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any recipes."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U5 - List ingredients**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:** "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all ingredients."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User inputs the command to request for the ingredients."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS shows the confirmation message and displays the complete list of ingredients."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format.  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U6 - Add Ingredient**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add an ingredient."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new ingredient."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate ingredient."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b1. FRMS displays error messages."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b2. User enters new data.  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U7 - Delete Ingredient**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete an ingredient."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of ingredient name."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. FRMS displays error messages."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. User enters new data.  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U8 - View expiring ingredients** "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of expiring ingredients."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the date range."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of expiring ingredients."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients in the date range."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U9 - Filter ingredients**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hjl99"
        },
        "content": " "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered ingredients."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of ingredients."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.  "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data.  "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3.      "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seowalex"
        },
        "content": "4. Should be able to add multiple recipes at once"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seowalex"
        },
        "content": "5. Should have autocompletion for commands"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seowalex"
        },
        "content": "6. Should be able to fuzzy search for recipes/food"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seowalex"
        },
        "content": "7. Should be able to manage recipes in a interactive manner (like Google Assistant)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "seowalex"
        },
        "content": "8. Should have input sanitisation"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Mainstream OS:** Latest version of Windows, MacOS or any Linux distro"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Recipe:** List of ingredients and steps needed to cook a dish"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "hjl99": 130,
      "seowalex": 18,
      "-": 320,
      "fall9x": 51
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop is a **desktop app for managing recipes and ingredients, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ChopChop can manage your items faster than traditional GUI apps."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Download the latest `chopchop.jar` from [here](https://github.com/AY2021S1-CS2103T-T10-3/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ChopChop."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`list recipes`** : Lists recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   * **`add recipe Milkshake /ingredient Milk /qty 500ml /step Pour Milk /step Shake`** : Adds a recipe for making milkshakes, with one ingredient and two steps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:** \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Words in UPPER_CASE are the parameters to be supplied by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add recipe NAME /ingredient INGREDIENT`, `NAME` and `INGREDIENT` are parameters supplied by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items in [square brackets] are optional. \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  eg. `add ingredient NAME [/qty QUANTITY]` can be used as `add ingredient Eggs /qty 4` or as `add ingredient Eggs /qty 4`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Items with `...` after them can be used multiple times. \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all recipes: **`list`** `recipes`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all recipes in the recipe manager."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list recipes`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding recipe: **`add`** `recipe`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds a recipe to the recipe manager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add recipe NAME [/ingredient INGREDIENT [/qty QTY1]...]... (/step STEP)...`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting recipe: **`delete`** `recipe`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific recipe from the recipe manager."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete recipe NAME`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding recipes: **`find`** `recipe`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds all recipes containing the given keywords in the name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find recipe KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g henz will match Henz"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Listing all ingredients: **`list`** `ingredient`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shows a list of all ingredients in the recipe manager."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `list ingredient`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Adding ingredient: **`add`** `ingredient`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Adds an ingredient to the recipe manager"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `add ingredient NAME [/qty QUANTITY] [/expiry DATE]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Deleting ingredient: **`delete`** `ingredient`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Deletes a specific ingredient from the recipe manager."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `delete ingredient NAME [/qty QUANTITY]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Finding ingredients: **`find`** `ingredient`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Finds ingredients containing the given keywords in the name."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `find ingredient KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The search is case-insensitive. e.g cheese will match Cheese"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the name is searched, and only substrings will be matched."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Exiting the program: **`exit`**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Format: `exit`"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 47,
      "-": 88
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* For the detailed documentation of this project, see the Address Book Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 15,
      "-": 8
    }
  },
  {
    "path": "src/main/java/chopchop/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 64
    }
  },
  {
    "path": "src/main/java/chopchop/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 25
    }
  },
  {
    "path": "src/main/java/chopchop/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import seedu.address.AppParameters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 184,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 63
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 79
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 112
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX \u003d \"The ingredient index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_INGREDIENTS_LISTED_OVERVIEW \u003d \"%1$d ingredients listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 16,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 116
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 54
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 11
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 42
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 23
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 83
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 143
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 68
    }
  },
  {
    "path": "src/main/java/chopchop/logic/CommandDispatcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "// import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "// import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The main CommandDispatcher governing the logic in the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandDispatcher implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandDispatcher.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code CommandDispatcher} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandDispatcher(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the specified command based on the commandText."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"stub\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getRecipeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getIngredientBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 98
    }
  },
  {
    "path": "src/main/java/chopchop/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the IngredientBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of recipes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered ingredient list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 63
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final FoodEntry toAdd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public AddCommand(FoodEntry entry) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        toAdd \u003d entry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 27
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add ingredient\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an ingredient to the manager. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_EXPIRY + \"EXPIRY \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_NAME + \"Chili \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_QUANTITY + \"3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        + PREFIX_EXPIRY + \"2020-10-05\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"This ingredient already exists in the ingredient book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public AddIngredientCommand(Ingredient ind) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(ind);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(ind);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (model.hasIngredient((Ingredient) toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.addIngredient((Ingredient) toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof AddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "Trav1sT": 53
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AddRecipeCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add recipe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT [\" + PREFIX_QUANTITY + \" QUANTITY]]...\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"[\" + PREFIX_STEP + \"STEP]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Sugar Tomato\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + PREFIX_INGREDIENT + \"Sugar \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + PREFIX_INGREDIENT + \"Tomato \" + PREFIX_QUANTITY + \" 5 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + PREFIX_STEP + \"Chop tomatoes. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + PREFIX_STEP + \"Add sugar to it and mix well. \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public AddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(recipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (model.hasRecipe((Recipe) toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.addRecipe((Recipe) toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRecipeCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 55,
      "Trav1sT": 7
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 20
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 71
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 26,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Deletes an ingredient identified using it\u0027s displayed index from the ingredient book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DeleteIngredientCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \": Deletes the ingredient identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DELETE_INGREDIENT_SUCCESS \u003d \"Deleted Ingredient: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DeleteIngredientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient ingredientToDelete \u003d lastShownList.get(super.targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INGREDIENT_SUCCESS, ingredientToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof DeleteIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteIngredientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 46,
      "Trav1sT": 3
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DeleteRecipeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \": Deletes the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DeleteRecipeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe recipeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof DeleteRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteRecipeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 50
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Finds and lists all recipes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code FindCommand} with the given predicate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param predicate condition to test for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract CommandResult execute(Model model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 26,
      "Trav1sT": 7
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Finds and lists all ingredients in ingredient book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FindIngredientCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all ingredients whose content contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sugar\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindIngredientCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                String.format(Messages.MESSAGE_INGREDIENTS_LISTED_OVERVIEW, model.getFilteredIngredientList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindIngredientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36,
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Finds and lists all recipes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FindRecipeCommand extends FindCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose content contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" sugar tomato orange\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindRecipeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindRecipeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 41
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, /* showHelp: */ true, /* exit: */ false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 23
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract CommandResult execute(Model model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 14
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Lists all ingredients in the ingredient book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ListIngredientCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ingredients\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 20,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ListRecipeCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 17
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Prefix PREFIX_STEP \u003d new Prefix(\"/step\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"/ingredient\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"/qty\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY \u003d new Prefix(\"/expiry\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 12,
      "Trav1sT": 4
    }
  },
  {
    "path": "src/main/java/chopchop/model/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class FoodEntry {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected FoodEntry(Name name) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 19
    }
  },
  {
    "path": "src/main/java/chopchop/model/FoodEntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class FoodEntryBook implements ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final UniqueFoodEntryList entries;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public FoodEntryBook() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueFoodEntryList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public FoodEntryBook(ReadOnlyFoodEntryBook toBeCopied) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setFoodEntries(List\u003c? extends FoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setFoodEntries(entries);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyFoodEntryBook newData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(FoodEntry entry) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasRecipe(FoodEntry entry) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient p) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(p);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addRecipe(Recipe r) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedIngredient} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setEntry(target, editedIngredient);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.setEntry(target, editedRecipe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cFoodEntry\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof FoodEntryBook // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((FoodEntryBook) other).entries));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36,
      "zhiayang": 1,
      "Trav1sT": 104
    }
  },
  {
    "path": "src/main/java/chopchop/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Predicate\u003cFoodEntry\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Predicate\u003cFoodEntry\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipeBook(ReadOnlyRecipeBook recipeBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Returns the RecipeBook */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ReadOnlyRecipeBook getRecipeBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe identity of {@code editedPerson} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredientBookFilePath(Path indBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredientBook(ReadOnlyIngredientBook book);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ReadOnlyIngredientBook getIngredientBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    boolean hasIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void deleteIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void addIngredient(Ingredient ind);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedIngredient} must not be the same as another existing person in the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 87,
      "Trav1sT": 58
    }
  },
  {
    "path": "src/main/java/chopchop/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents the in-memory model of the recipe book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final RecipeBook recipeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes a ModelManager with the given recipeBook and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ModelManager(ReadOnlyRecipeBook recipeBook, ReadOnlyIngredientBook ingredientBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBook \u003d new RecipeBook(recipeBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003cRecipe\u003e(this.recipeBook.getFoodEntryList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Initializing with ingredient book: \" + ingredientBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook \u003d new IngredientBook(ingredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003cIngredient\u003e(this.ingredientBook.getFoodEntryList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this(new RecipeBook(), new IngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return userPrefs.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        userPrefs.setRecipeBookFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook recipeBook) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.removeRecipe(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code versionedRecipeBook}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param indBookFilePath"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(indBookFilePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        userPrefs.setIngredientBookFilePath(indBookFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ingredient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook.resetData(ingredientBook);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(ind);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return ingredientBook.hasIngredient(ind);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.removeIngredient(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredientBook.addIngredient(ind);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ingredient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 ingredientBook.equals(other.ingredientBook)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 filteredIngredients.equals(other.filteredIngredients);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 151,
      "zhiayang": 4,
      "Trav1sT": 84
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyFoodEntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Unmodifiable view of a food entry book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public interface ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the food entry list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate food entries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ObservableList\u003c? extends FoodEntry\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 13
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 16
    }
  },
  {
    "path": "src/main/java/chopchop/model/UniqueFoodEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UniqueFoodEntryList implements Iterable\u003cFoodEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cFoodEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cFoodEntry\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean contains(FoodEntry toCheck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a FoodEntry to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry must not already exist in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(FoodEntry toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the FoodEntry {@code target} in the list with {@code editedFoodEntry}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry identity of {@code editedFoodEntry} must not be the same as another existing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * FoodEntry in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setEntry(FoodEntry target, FoodEntry editedFoodEntry) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedFoodEntry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!target.equals(editedFoodEntry) \u0026\u0026 contains(editedFoodEntry)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.set(index, editedFoodEntry);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes the equivalent FoodEntry from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The FoodEntry must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void remove(FoodEntry toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(UniqueFoodEntryList replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of this list with {@code FoodEntries}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code FoodEntries} must not contain duplicate FoodEntries."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setFoodEntries(List\u003c? extends FoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //if (!ingredientsAreUnique(entries)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!foodEntriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(entries);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cFoodEntry\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Iterator\u003cFoodEntry\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof UniqueFoodEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFoodEntryList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003c? extends FoodEntry\u003e ingredients) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean recipesAreUnique(List\u003c? extends FoodEntry\u003e recipes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (recipes.get(i).equals(recipes.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if {@code FoodEntries} contains only unique FoodEntries."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean foodEntriesAreUnique(List\u003c? extends FoodEntry\u003e foodEntries) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c foodEntries.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foodEntries.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (foodEntries.get(i).equals(foodEntries.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 32,
      "zhiayang": 4,
      "Trav1sT": 119
    }
  },
  {
    "path": "src/main/java/chopchop/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Path recipeBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path ingredientBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        setRecipeBookFilePath(newUserPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBookFilePath \u003d recipeBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(indBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBookFilePath \u003d indBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 recipeBookFilePath.equals(o.recipeBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(guiSettings, recipeBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + recipeBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 90,
      "Trav1sT": 9
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/ExpiryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        \"Expiry date should be in the form, yyyy-MM-dd\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //temporary using 1 fixed date format before parser is integrated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{4}-\\\\d{2}-\\\\d{2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code ExpiryDate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param date A valid string in the date format, yyyy-MM-dd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ExpiryDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Checks if the input date is valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param inputDate A string of unknown date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return true if the date format is valid. Otherwise, false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidDate(String inputDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!inputDate.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            LocalDate.parse(inputDate , FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 55
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents a FoodEntry\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The first character of the address must be a alphanumeric char. No restrictions on subsequent chars"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][a-zA-Z0-9\\\\s\\\\W]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 58
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Tests that a {@code FoodEntry}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFoodEntry\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean test(FoodEntry fe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(fe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 2,
      "Trav1sT": 28
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        \"The quantity should be at least 1\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param value A valid integer of arbitrary unit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Quantity(double value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidQuantity(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a given int is a valid number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidQuantity(double value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return value \u003e 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 29
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a Recipe\u0027s name in ChopChop."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Recipe steps should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][a-zA-Z0-9\\\\s\\\\W]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public final String step;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.step.equals(((Step) other).step)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 52,
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Persons are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(\"Operation would result in duplicate food entry\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents an Ingredient in the recipe manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Ingredient extends FoodEntry {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient(Name name, Quantity quantity, ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(quantity, expiryDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if both ingredients of the same name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient otherInd \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return otherInd.getName().equals(getName())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 otherInd.getExpiryDate().equals(getExpiryDate());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Objects.hash(super.name, quantity, expiryDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .append(\" Quantity: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .append(getQuantity())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .append(\" Expiry Date: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .append(getExpiryDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 77
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/IngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBook implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UniqueIngredientList entries;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook(ReadOnlyIngredientBook toBeCopied) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(List\u003cIngredient\u003e entries) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setIngredientEntries(entries);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyIngredientBook newData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(Ingredient entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient r) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code IngredientBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the ingredient list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof IngredientBook // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((IngredientBook) other).entries));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 109
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/ReadOnlyIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyFoodEntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface ReadOnlyIngredientBook extends ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the ingredient list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 14
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if the list contains an equivalent Ingredient as the given argument."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a Ingredient to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient must not already exist in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the Ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient identity of {@code editedIngredient} must not be the same as another existing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Ingredient in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!target.equals(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes the equivalent Ingredient from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The Ingredient must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of this list with {@code Ingredients}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code Ingredients} must not contain duplicate Ingredients."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientEntries(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if {@code Ingredients} contains only unique Ingredients."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                if (ingredients.get(i).equals(ingredients.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 8,
      "Trav1sT": 118
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Persons are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(\"Operation would result in duplicate ingredients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Signals that the operation is unable to find the specified ingredient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/ReadOnlyRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyFoodEntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface ReadOnlyRecipeBook extends ReadOnlyFoodEntryBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFoodEntryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 12,
      "zhiayang": 1,
      "Trav1sT": 4
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.FoodEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Recipe extends FoodEntry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Recipe(Name name, List\u003cIngredient\u003e ingredients, List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(name, ingredients, steps);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.steps.addAll(steps);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an immutable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Collections.unmodifiableList(ingredients);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an immutable Step List, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Collections.unmodifiableList(steps);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(name, ingredients, steps);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .append(\" Ingredients: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        getIngredients().forEach((Ingredient ingredient) -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            builder.append(ingredient.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            builder.append(\"(\" + ingredient.getQuantity() + \") \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        builder.append(\" Steps:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AtomicInteger counter \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        getSteps().forEach((Step step) -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            builder.append(\" \" + counter + \". \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            builder.append(step.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            counter.getAndIncrement();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 90,
      "Trav1sT": 4
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/RecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class RecipeBook implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UniqueRecipeList entries;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBook() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an AddressBook using the Ingredients in the {@code toBeCopied}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setFoodEntries(List\u003cRecipe\u003e entries) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.entries.setRecipeEntries(entries);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setFoodEntries(newData.getFoodEntryList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasRecipe(Recipe entry) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.contains(entry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The recipe must not already exist in the recipe book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipe(Recipe r) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.add(r);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes {@code key} from this {@code RecipeBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code key} must exist in the recipe book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        entries.remove(key);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof RecipeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 entries.equals(((RecipeBook) other).entries));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.hashCode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 13,
      "Trav1sT": 93
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/RecipeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Tests that a {@code Recipe}\u0027s Content matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof RecipeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 31
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!target.equals(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeEntries(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (recipes.get(i).equals(recipes.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 135,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * identity and data)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 11
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code GuiSettings}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code GuiSettings}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code Version}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code LogicManager}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code StorageManagers}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code CommandBox}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code MainWindow}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code PersonCard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code PersonListPanel}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code StatusBarFooter}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs {@code UiManager}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 88
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandIntTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandIntTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.addIngredient(validIngredient);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new AddIngredientCommand(validIngredient), model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient personInList \u003d model.getIngredientBook().getFoodEntryList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandFailure(new AddIngredientCommand(personInList), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            AddIngredientCommand.MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 41
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIngredientCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_ingredientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        AddIngredientCommandTest.ModelStubAcceptingIngredientAdded modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        CommandResult commandResult \u003d new AddIngredientCommand(validIngredient).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Arrays.asList(validIngredient), modelStub.ingredientsAdded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_duplicateIngredient_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        chopchop.logic.commands.AddCommand addCommand \u003d new AddIngredientCommand(validIngredient);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithIngredient(validIngredient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            AddIngredientCommand.MESSAGE_DUPLICATE_INGREDIENT, () -\u003e addCommand.execute(modelStub)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient apple \u003d new IngredientBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient banana \u003d new IngredientBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        AddCommand addAppleCommand \u003d new AddIngredientCommand(apple);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        AddCommand addBananaCommand \u003d new AddIngredientCommand(banana);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAppleCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddIngredientCommand(apple);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(addAppleCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(addAppleCommand.equals(addBananaCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A Model stub that contains a single ingredient."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private class ModelStubWithIngredient extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final Ingredient ingredient;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelStubWithIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return this.ingredient.equals(ingredient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A Model stub that always accept the ingredient being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private class ModelStubAcceptingIngredientAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final ArrayList\u003cIngredient\u003e ingredientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ingredientsAdded.stream().anyMatch(ingredient::equals);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredientsAdded.add(ingredient);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new IngredientBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 114
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_APRICOT \u003d \"Apricot\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_APRICOT \u003d 1000000;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_BANANA \u003d 10.5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_APRICOT \u003d \"2020-12-01\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_BANANA \u003d \"2021-10-13\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_APRICOT_SALAD \u003d \"Apricot Salad\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_BANANA_SALAD \u003d \"Banana Salad\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook expectedIndBook \u003d new IngredientBook(actualModel.getIngredientBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredIngredientList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(expectedIndBook, actualModel.getIngredientBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredIngredientList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient person \u003d model.getFilteredIngredientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(1, model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "Trav1sT": 79
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIndexes.INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient indToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS, indToDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient indToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS, indToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showNoIngredient(expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ingredient book list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getIngredientBook().getFoodEntryList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteFirstCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteSecondCommand \u003d new DeleteIngredientCommand(INDEX_SECOND_INGREDIENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DeleteIngredientCommand deleteFirstCommandCopy \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void showNoIngredient(Model model) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(p -\u003e false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(model.getFilteredIngredientList().isEmpty());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 104
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FindIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.core.Messages.MESSAGE_INGREDIENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class FindIngredientCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindIngredientCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INGREDIENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FindIngredientCommand command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_multipleKeywords_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INGREDIENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"apricot banana\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        chopchop.logic.commands.FindCommand command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 77
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/ListIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ListIngredientCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new RecipeBook(), getTypicalIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel \u003d new ModelManager(new RecipeBook(), model.getIngredientBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, ListIngredientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, ListIngredientCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 35
    }
  },
  {
    "path": "src/test/java/chopchop/model/DuplicatesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicatesTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5
    }
  },
  {
    "path": "src/test/java/chopchop/model/IngredientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final IngredientBook ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Collections.emptyList(), ingredientBook.getFoodEntryList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withValidReadOnlyIngredientBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook newData \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(newData, ingredientBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withDuplicateIngredients_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT).withQuantity(VALID_INGREDIENT_QTY_BANANA)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredient\u003e newIngredients \u003d Arrays.asList(APRICOT, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookTest.IngredientBookStub newData \u003d new IngredientBookTest.IngredientBookStub(newIngredients);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e ingredientBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.hasIngredient(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ingredientBook.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ingredientBook.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_personWithSameIdentityFieldsInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT).withQuantity(VALID_INGREDIENT_QTY_BANANA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(VALID_INGREDIENT_EXPIRY_BANANA)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ingredientBook.hasIngredient(editedAlice)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e ingredientBook.getFoodEntryList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A stub ReadOnlyIngredientBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static class IngredientBookStub implements ReadOnlyIngredientBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 102
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private chopchop.model.ModelManager modelManager \u003d new chopchop.model.ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new IngredientBook(), new IngredientBook(modelManager.getIngredientBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(new RecipeBook(), new RecipeBook(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasIngredient(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_indNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_ingredientInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getFilteredPIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredIngredientList().remove(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook ingredientBook \u003d new IngredientBookBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            .withIngredient(APRICOT).withIngredient(BANANA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook differentIngredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook recipeBook \u003d new RecipeBookBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .withRecipe(APRICOT_SALAD).withRecipe(BANANA_SALAD).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook differentRecipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs userPrefs \u003d new chopchop.model.UserPrefs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredientBook -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                            recipeBook, differentIngredientBook, userPrefs)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                            differentRecipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredIngredientList -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final String[] ind_keywords \u003d APRICOT.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(ind_keywords)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredRecipeList -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final String[] rec_keywords \u003d APRICOT_SALAD.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(rec_keywords)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 50,
      "Trav1sT": 78
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.ReadOnlyIngredientBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class ModelStub implements Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBook(ReadOnlyIngredientBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyIngredientBook getIngredientBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBook(ReadOnlyRecipeBook newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyRecipeBook getRecipeBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cFoodEntry\u003e predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 136
    }
  },
  {
    "path": "src/test/java/chopchop/model/RecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.ReadOnlyRecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final RecipeBook recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getFoodEntryList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(APRICOT_SALAD, editedRecipe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookTest.RecipeBookStub newData \u003d new RecipeBookTest.RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.hasRecipe(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(recipeBook.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA)))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(recipeBook.hasRecipe(editedRecipe)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getFoodEntryList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyRecipeBook {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFoodEntryList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 106
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/ExpiryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidDate(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020:12-01\")); // invalid date format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020-13-32\")); // valid date format but invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"1990-12-01\")); // a date that has passed, yyyy-MM-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"2021-12-01\")); // a future date, yyyy-MM-dd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 37
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                                            .singletonList(\"Apricot\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Banana\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Caramel\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Alice Caramel\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aPRIcot\", \"bAnAnA\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot banana\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Caramel\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(\"2020-05-10\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // For Recipe, keywords match ingredient name and step content, but does not match name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"Banana\", \"Cut\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA)))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 23,
      "Trav1sT": 73
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"corn*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"egg plant\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"eggplant the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"Corn Starch\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"The Great 2nd Corn Starch of the U.K.\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 39
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        double invalidQuantity \u003d -0.1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // invalid qty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(-1)); // negative"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // valid qty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(200000)); // large int"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(0.23)); // floating point num"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 25
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null Step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // invalid Step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // valid Step"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"rec recipe\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe number seven\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"The Most Unhealthy Recipe\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"First, place eggs in a large saucepan and cover them with cool water by 1 inch.\")); // long Step"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 41
    }
  },
  {
    "path": "src/test/java/chopchop/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient apricotCopy \u003d new IngredientBuilder(APRICOT).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(apricotCopy));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(APRICOT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(BANANA));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient editedApricot \u003d new IngredientBuilder(APRICOT).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different date -\u003e returns false. Different ingredients can be of the same name but different expiry"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        editedApricot \u003d new IngredientBuilder(APRICOT).withDate(\"2020-12-02\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different qty -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        editedApricot \u003d new IngredientBuilder(APRICOT).withQuantity(5).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 42
    }
  },
  {
    "path": "src/test/java/chopchop/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe apricotSaladCopy \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(apricotSaladCopy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(APRICOT_SALAD));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(new IngredientBuilder().build()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(BANANA_SALAD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedApricotSalad \u003d new RecipeBuilder(APRICOT_SALAD).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(editedApricotSalad));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different ingredients -\u003e returns false. Different recipes can be of the same name but different ingredients"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        editedApricotSalad \u003d new RecipeBuilder(APRICOT_SALAD)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA))).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(editedApricotSalad));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different steps -\u003e returns false. Different recipes can be of the same name but different steps"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        editedApricotSalad \u003d new RecipeBuilder(APRICOT_SALAD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD))).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(editedApricotSalad));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 52
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 34
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private IngredientBook ingredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook \u003d new IngredientBook();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder(IngredientBook ingredientBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook \u003d ingredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder withIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.addIngredient(ind);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBook build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 29
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final int DEFAULT_QTY \u003d 3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_EXPIRY \u003d \"2020-10-12\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Quantity qty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ExpiryDate expDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        qty \u003d new Quantity(DEFAULT_QTY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expDate \u003d new ExpiryDate(DEFAULT_EXPIRY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder(Ingredient indToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d indToCopy.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        qty \u003d indToCopy.getQuantity();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expDate \u003d indToCopy.getExpiryDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withQuantity(double qty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.qty \u003d new Quantity(qty);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withDate(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.expDate \u003d new ExpiryDate(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Ingredient(name, qty, expDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 66
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class for Ingredient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an add command string for adding the {@code ingredient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getAddCommand(Ingredient ind) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return AddIngredientCommand.COMMAND_WORD + \" \" + getIngredientDetails(ind);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the part of command string for the given {@code ingredient}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getIngredientDetails(Ingredient ind) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(ind.getName().fullName + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(PREFIX_QUANTITY + Double.toString(ind.getQuantity().value) + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        sb.append(PREFIX_EXPIRY + ind.getExpiryDate().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 32
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private RecipeBook recipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook \u003d new RecipeBook();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder(RecipeBook recipeBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.addRecipe(recipe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBook build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 29
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_STEP \u003d \"Heat it for 15 minutes.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private List\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredients \u003d new ArrayList\u003c\u003e(Arrays.asList(new IngredientBuilder().build()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e(Arrays.asList(new Step(DEFAULT_STEP)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder(Recipe recToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        name \u003d recToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredients \u003d recToCopy.getIngredients();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d recToCopy.getSteps();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Recipe(name, ingredients, steps);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 67
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.CliSyntax.PREFIX_STEP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * A utility class for Ingredient."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an add command string for adding the {@code ingredient}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return AddRecipeCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the part of command string for the given {@code ingredient}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        sb.append(recipe.getName().fullName + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipe.getIngredients().stream().forEach(ind -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        sb.append(PREFIX_INGREDIENT + Double.toString(ind.getQuantity().value) + \" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipe.getSteps().stream().forEach(step -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                sb.append(PREFIX_STEP + step.toString() + \" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 34
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 72
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 55
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Index INDEX_FIRST_INGREDIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Index INDEX_SECOND_INGREDIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Index INDEX_THIRD_INGREDIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "Trav1sT": 12
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_APRICOT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_APRICOT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_APRICOT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Ingredient APRICOT \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_APRICOT)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withQuantity(VALID_INGREDIENT_QTY_APRICOT).withDate(VALID_INGREDIENT_EXPIRY_APRICOT)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_BANANA).withQuantity(VALID_INGREDIENT_QTY_BANANA)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static IngredientBook getTypicalIngredientBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBook ab \u003d new IngredientBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Ingredient ind : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ab.addIngredient(ind);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT, BANANA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 38
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.RecipeBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_APRICOT_SALAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_BANANA_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_APRICOT_SALAD \u003d new Step("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the apricot, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_BANANA_SALAD \u003d new Step("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the banana, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe APRICOT_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_APRICOT_SALAD)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(APRICOT)))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_APRICOT_SALAD)))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe BANANA_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_BANANA_SALAD)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA)))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static RecipeBook getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBook rb \u003d new RecipeBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            rb.addRecipe(recipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT_SALAD, BANANA_SALAD));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 48
    }
  }
]
