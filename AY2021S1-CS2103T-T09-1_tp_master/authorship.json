[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "# GradPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Keep track of your degree progress and modules taken during your time in NUS with ease. Faster and more "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "lightweight than traditional GUI applications, view and update your progress by issuing simple text commands. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Installation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Requirements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad requires that you have a Java SE Runtime Environment (JRE) installed on your machine."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Steps"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Download the latest jar release of GradPad from this repository."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. Run the downloaded jar file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    - You can either double-click on the jar file, or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    - Execute this command from your terminal: `java -jar GradPad.jar`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Adding a module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```add {module title} {modular credits}```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Example usage: ```add CS2103T 4```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Deleting a module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```delete {module title}``` "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Example usage: ```delete CS2103T```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### View all added modules"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```list```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### View total modular credits (MCs)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```checkmc```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Save session"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```save```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### View help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```help```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Exit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Command: ```exit```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For detailed guidance on using GradPad, take a look at our user guide "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[here](https://ay2021s1-cs2103t-t09-1.github.io/tp/UserGuide.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For developers, view our detailed documentation "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[here](https://ay2021s1-cs2103t-t09-1.github.io/tp/DeveloperGuide.html)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Contributing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Although GradPad is an open source project, it is currently not open to public contribution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Authors and acknowledgement"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "silvernitro": 54,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    archiveName \u003d \u0027gradpad.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 2,
      "mhdsyfq": 1,
      "-": 73
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Lau Siaw Sam"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/silvernitro.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](https://github.com/silvernitro)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/silvernitro.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Lim Shao Kiat"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/shaokiat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/shaokiat)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/shaokiat.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Muhammad Syafiq Bin Abas"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/mhdsyfq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/mhdsyfq)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/mhdsyfq.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Soon Xiang, Yan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u003cimg src\u003d\"images/yan-soon.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[github](http://github.com/yan-soon)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[[portfolio](team/yan-soon.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "yan-soon": 22
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad is an offline computer application meant to help Computer Science students from the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "National University of Singapore (NUS) plan their modules with more ease. All module information is"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "displayed through our simple and organised Graphical User Interface (GUI). GradPad is also optimised "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "for users who prefer working on a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The objectives of the application include:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. Allowing NUS CS students to track their degree progress."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. Allowing NUS CS students to plan their modules for upcoming semesters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "3. Providing a fast and convenient way to view NUS CS module details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "## About this Guide"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "This is a Developer Guide written for developers who wish to contribute to or extend"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "our GradPad Project. The guide will explain the different components that make up GradPad"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "and how these components come together to implement GradPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* [**`Nusmods`**](#nusmods-component): Reads data from the NUSMODS public API."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. `Logic` uses the `GradPadParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* stores the GradPad data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModule\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `GradPad`, which `Module` references. This allows `GradPad` to only require one `Tag` object per unique `Tag`, instead of each `Module` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can save the GradPad data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Nusmods component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![Structure of the Nusmods Component](images/NusmodsClassDiagram.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**API** : [`NusmodsData.java`](https://github.com/AY2021S1-CS2103T-T09-1/tp/blob/master/src/main/java/seedu/address/nusmods/NusmodsData.java)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `Nusmods` component,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can fetch module data from the NUSMODS public API."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can save fetched module data in the form of `ModuleInfo` objects to a local JSON file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* can provide module information based on a module code, in the form of `ModuleInfo` objects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Critically, the component is able to fall back on reading pre-fetched module information from a local file when "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "there\u0027s no internet connection."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "We chose to split the `Nusmods` component into two main parts that have the following responsibilities respectively:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Fetch module data - handled by `DataFetcher`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Allow other GradPad components to access module data - handled by `NusmodsData`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "##### Rationale"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "We chose to do this instead of clumping all the logic together to achieve better encapsulation and abstraction."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this, the `NusmodsData` class only needs to be concerned with reading available module data, processing it,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "and serving it up to the code who requested it. It doesn\u0027t need to care about how the data got there. "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "That\u0027s the job of the `DataFetcher` class. As such, it is easy for us to swap out `DataFetcher`, or change its "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "implementation without the need to touch the public interface provided by `NusmodsData`. This will prove to be "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "useful when, for example, the NUSMODS API becomes obsolete, and we need to use another API, or if the NUSMODS "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "API changes, and we need to redesign how we fetch data from it."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "### Add feature"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPad allows users to add modules to their list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following fields of a module are required (* for optional):"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Module Code"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Modular Credits"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "* Tags*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "As with all operations in GradPad, the `AddCommand` class handles the execution of add operations."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The `AddCommandParser` class helps to parse user\u0027s input before creating the correct add command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Given below is how an add operation behaves at each step of its execution."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to an add operation."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand` method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an add command, and so uses the `AddCommandParser` class to create a corresponding `AddCommand`, using the `AddCommandParser.parse()` method."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `AddCommandParser.parse()`, the string input is first split into tokens, i.e. new module code, new tags, etc."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. Then, in the same method call, a new `Module` object is created from these tokens. It now stores the values that we want to add into our list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. Lastly, in the same method call, an `AddCommand` is created with the new populated `Module`, and is passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. `Logic Manager` executes the newly created `AddCommand`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. Finally, the `Model` is then updated by adding the new `Module` object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "The following sequence diagram shows how the add command is executed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "![AddSequenceDiagram](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### Edit feature"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad allows users to edit modules that have already been added. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following fields of a module can be edited:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Module Code"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Modular Credits"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* Tags"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `EditCommand` class handles the execution of edit operations."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `EditCommandParser` class helps to parse a user\u0027s input before creating the correct edit command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad uses the `EditModuleDescriptor` class to facilitate edit operations. An `EditModuleDescriptor` is"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "a temporary bridge that holds the newly-edited fields of a module. You can set the `ModuleCode`,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`ModularCredit`, and `Tags` of an `EditModuleDescriptor`. It is also fine to omit any of them, which is important"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "as we don\u0027t want to be overly-concerned with which fields are to be edited and which are not."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is how an edit operation behaves at each step of its execution."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to an edit operation."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an edit command, and so uses the `EditCommandParser`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "class to create a corresponding `EditCommand`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `EditCommandParser`, the string input is first split into tokens, i.e. new module code, new tags, etc."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. Then, in the same method call, an `EditModuleDescriptor` object is created from these tokens. It now stores"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "the new values that we want to update the target module with."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. An `EditCommand` is then created with this populated `EditModuleDescriptor`, and is passed back to the"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`LogicManager` in step 2."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. `LogicManager` executes the newly created `EditCommand`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. The target module to be edited is retrieved. A copy of it is made and using the populated"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " `EditModuleDescriptor`, the fields that are to be updated are replaced with their new values."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "10. The `Model` is then updated by replacing the target module with its new updated copy."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram shows how the edit command is executed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![EditSequenceDiagram](images/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad allows users to delete modules that have already been added. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "As with all operations in GradPad, the `DeleteCommand` class handles the execution of delete operations."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `DeleteCommandParser` class helps to parse a user\u0027s input before creating the correct delete command."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Given below is how a delete operation behaves at each step of its execution."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to a delete operation."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `gradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `gradPadParser.parseCommand()` sees that this is an delete command, and so uses the `DeleteCommandParser`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "class to create a corresponding `DeleteCommand`, using the `DeleteCommandParser.parse()` method."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. In `DeleteCommandParser`, the ModuleCode is first extracted from the string input. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. A `DeleteCommand` is then created with the ModuleCode, and is passed back to the"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "`LogicManager` in step 2."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. `LogicManager` executes the newly created `DeleteCommand`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "8. The target module to be deleted is retrieved, if it exists in the Completed Modules of GradPad. "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "9. The `Model` is then updated by removing the target module."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The following sequence diagram shows how the delete command is executed."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "![DeleteSequenceDiagram](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPad allows users to find a specific module to check if that module has been added. This feature is especially useful "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "if there is a long list of modules currently in GradPad and users want to avoid the hassle of scrolling through the "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "entire list to find the module they are looking for.  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "As with all operations in GradPad, the `FindCommand` class handles the execution of find operations."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `FindCommandParser` class helps to parse a user\u0027s input before creating the correct find command."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Given below is a series of steps to show how a find operation behaves during its execution."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The user types in a command string corresponding to a find operation, e.g. \"find CS2103T\"."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class. The user input is passed in as a string."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a find command, and thus uses the `FindCommandParser`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "class to extract the string input as a predicate and subsequently create a corresponding `FindCommand` with said predicate."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5. This `FindCommand` is then passed back to the`LogicManager` in step 2."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6. `LogicManager` executes the newly created `FindCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7. `FindCommand.execute()` calls for `Model` to filter the GradPad list based on the given predicate."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8. Finally, a `CommandResult` is created and returned to show the result of the execution."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The following sequence diagram illustrates how the find command is executed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `list` command shows all modules that have been added by the user in the `Completed Modules` list."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This is needed as certain commands can change the modules that are being displayed. One such command is the"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`find` command, which shows only matching modules in the list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Before diving into how the `list` operation is executed, we must first gain a brief understanding of how the "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`Completed Modules` list displays its modules, and how this display can be changed by other commands."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `Completed Modules` list is implemented by the `ModuleListPanel` UI class."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This class contains a list of modules, which comes from GradPad\u0027s `Model` component, that it uses to "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "display to the user. To change the contents of the list, commands can apply filters to this list through `Model`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "For example, a command may ask `Model` to only show modules that have 4 modular credits."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When this happens, `Completed Modules` naturally changes the modules it displays too."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following diagram illustrates this relationship:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![ModelFilteredListDiagram](images/ModelFilteredListClassDiagram.png)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this in mind, the aim of the `list` command is therefore to remove any existing filter on this module list,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "effectively getting `Completed Modules` to display all modules once again."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a list operation behaves during its execution to achieve just this."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user input is parsed and constructs a `ListCommand` object. (Implementation details of the parser are omitted"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " here as they are not central in developing an understanding of the `list` operation)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. When this command is executed, it calls the `updateFilteredModuleList` method in the `Model` class and passes in"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "a predicate that lets all modules through the filter."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. The `Model` class updates its `filteredModules` list to include all modules as if it were unfiltered."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. The `ModuleListPanel` UI component listens to changes in `filteredModules` and updates whenever the list is updated."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "It thus updates to display all modules too."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates how the list command is executed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![ListSequenceDiagram](images/ListSequenceDiagram.png)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### CheckMc feature"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `checkmc` command allows users to view a tally of the total no. of modular credits from the modules present "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "in the `Completed Modules` list."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `CheckMcCommand` class handles the execution of `checkmc` operations."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "In brief, it works by going through all modules in the `Completed Modules` list and summing up each module\u0027s"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "modular credits."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `checkmc` operation behaves during its execution."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters the `checkmc` command string."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a checkmc command and thus creates a `CheckMcCommand`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "object."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "6. `LogicManager` executes the newly created `CheckMcCommand`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. `CheckMcCommand.execute()` retrieves the `GradPad` object stored within `Model` and accesses the `modules` field"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "within the `GradPad`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "8. It then loops through `modules`, which is a list of `Module` objects, and sums up all their modular credits."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "8. Finally, a `CommandResult` is created to show the total no. of modular credits calculated."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The following sequence diagram illustrates how the `checkmc` command is executed."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "![CheckMcDiagram](images/CheckMcSequenceDiagram.png)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### [Implementation in progress] Check required modules feature"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `required` command allows users to view the required modules in the NUS Computer Science curriculum "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "that they have yet to take."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "When the command is executed, it checks through the current modules in the `Completed Modules` list and ensures"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "that modules that have already been taken are not displayed in the list of remaining required modules."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `RequiredCommand` class handles the execution of `required` operations."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `required` operation behaves during its execution."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters the `required` command string."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a required command and thus creates a `RequiredCommand`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "object."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "6. `LogicManager` executes the newly created `RequiredCommand`, which contains a hard-coded list of required modules"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "in the syllabus."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. Then, `RequiredCommand.execute()` retrieves the `GradPad` object stored within `Model` and accesses the `modules"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "` field within the `GradPad`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "8. It filters the list of required modules by removing those that are present in `modules`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "9. Finally, a `CommandResult` is created to show the filtered list of remaining required modules."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "### [Implementation in progress] Search all modules feature"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "The `search` command allows users to search for any module within the NUS Computer Science curriculum and view"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "its module details."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "To retrieve a module\u0027s information, the execution of this command interacts with the `Nusmods` component, which"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "contains all logic related to the access of module data from the NUSMODS public API. We will not go into detail"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "about the component here as we are mainly focused on the implementation of the search functionality."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "As with all operations in GradPad, the `SearchCommand` class handles the execution of `search` operations."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Given below is a series of steps to show how a `search` operation behaves during its execution."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. The user enters a search command string containing a module code, e.g. \"search CS2103T\"."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "2. This calls the `execute` method of the `LogicManager` class with the user input passed in as a string."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "3. `Logic.execute()` then calls the `parseCommand`  method of the `GradPadParser` class to parse the string input."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "4. `GradPadParser.parseCommand()` identifies the command as a search command and thus creates a `SearchCommand`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "object."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "5. This command object is then passed back to the `LogicManager` in step 2."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "6. `LogicManager` executes the newly created `SearchCommand`."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "7. `SearchCommand.execute()` retrieves the corresponding module information by calling "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "`NusmodsData.getModuleInfo()` in the `Nusmods` package."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "9. Finally, a `CommandResult` is created to display the module information that has been retrieved."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedGradPad`. It extends `GradPad` with an undo/redo history, stored internally as an `gradPadStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#commit()` — Saves the current GradPad state in its history."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#undo()` — Restores the previous GradPad state from its history."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* `VersionedGradPad#redo()` — Restores a previously undone GradPad state from its history."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitGradPad()`, `Model#undoGradPad()` and `Model#redoGradPad()` respectively."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedGradPad` will be initialized with the initial GradPad state, and the `currentStatePointer` pointing to that single GradPad state."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 2. The user executes `delete c/CS2103T` command to delete the `CS2103T` Module from the Completed Modules. The `delete` command calls `Model#commitGradPad()`, causing the modified state of the GradPad after the `delete c/CS2103T` command executes to be saved in the `gradPadStateList`, and the `currentStatePointer` is shifted to the newly inserted GradPad state."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 3. The user executes `add c/CS2100 …​` to add a new module. The `add` command also calls `Model#commitGradPad()`, causing another modified GradPad state to be saved into the `gradPadStateList`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitGradPad()`, so the GradPad state will not be saved into the `gradPadStateList`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 4. The user now decides that adding the module was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoGradPad()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous GradPad state, and restores the GradPad to that state."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial GradPad state, then there are no previous GradPad states to restore. The `undo` command uses `Model#canUndoGradPad()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoGradPad()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the GradPad to that state."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `gradPadStateList.size() - 1`, pointing to the latest GradPad state, then there are no undone GradPad states to restore. The `redo` command uses `Model#canRedoGradPad()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the GradPad, such as `list`, will usually not call `Model#commitGradPad()`, `Model#undoGradPad()` or `Model#redoGradPad()`. Thus, the `gradPadStateList` remains unchanged."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitGradPad()`. Since the `currentStatePointer` is not pointing at the end of the `gradPadStateList`, all GradPad states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add c/CS2100 …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire GradPad."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the module being deleted)."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Anybody → Students → University Students → tech savvy University student → Computer Science students"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "NUS Computer Science undergraduate students, who wish to keep track of their necessary modules (how many are done, how many are left), and also the total MCs tabulation."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Keep track of your degree progress and modules taken during your time in NUS with ease. Faster and more lightweight than traditional GUI applications, view and update your progress by issuing simple text commands. Modules are conveniently categorized into their respective groupings e.g. Unrestricted Electives, Computer Science Foundations, etc."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | NUS Student                                | see my total Modular Credits   | know how many more I require to graduate                 |"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | NUS Student                                | see my past Modules            | know what I have taken before                                                                   |"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | user                                       | delete modules                 | remove entries that I no longer need                                 |"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* * *`  | user                                       | add modules and MCs            | keep track of my Modular progress |"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* *`    | first-time user                            | access the available commands  | use the app efficiently                |"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "| `* *`    | user                                     | save and load my Module data   | keep track of my Modular progress                                            |"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "(For all use cases below, the **System** is the `GradPad` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case: UC01 - Delete a Module from `Completed Modules`**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1.  User requests to delete a specific Module in the `Completed Modules`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2.  GradPad deletes the module"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3.  GradPad displays the deleted module onto the `Command Line Display`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The module does not exist in `Completed Modules`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The given module code is invalid."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 2a1. GradPad shows an error message."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC02 - Add a Module into `Completed Modules`**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to add a module into the `Completed Modules`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad adds the module into `Completed Modules`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3. GradPad displays the module added onto the `Command Line Display`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 1a1. GradPad shows an error message."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC03 - View help**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. User requests to view help commands"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. GradPad shows a list of commands"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC04 - View all current modules**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to view list of modules in `Completed Modules`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad shows all modules added into `Completed Modules`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case: UC05 - Edit a Module in `Completed Modules`**"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to list all modules in `Completed Modules`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad shows the list of modules in `Completed Modules`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "3. User requests to edit a module in `Completed Modules`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "4. Module is replaced with updated fields"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The list of modules in `Completed Modules` is empty."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 3a1. GradPad shows an error message."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 3b. The input fields format is invalid."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 3b1. GradPad shows an error message."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC06 - View required modules in CS curriculum**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to view all required modules in CS curriculum"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad displays the required modules in CS curriculum onto the `Command Line Display`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC07 - Search for module details**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "1. User requests to search for a module in the CS curriculum."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "2. GradPad displays the module details in the `Command Line Display`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 1a1. GradPad shows an error message."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "      Use case ends.  "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "* 2a. The module searched does not exist in the required module list."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    * 2a1. GradPad shows an error message."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Use case ends."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Use case : UC08 - exit GradPad**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "1. User requests to exit GradPad"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "2. GradPad exits"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2.  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3.  Should be backwards compatible with data produced by earlier versions of the application."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "4.  Should be able to hold up to 1000 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "5.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "6.  Should be able to respond within one seconds."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "7.  Should be usable by a novice who has never done module tracking of any sort."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "8.  The application is not required to handle module tracking by NUS students outside of the Computer Science major. "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Module Code**: Each module of study has a unique module code consisting of a two- or three-letter prefix that generally denotes the discipline, and four digits."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   * **First digit**: Represents the level of the module, i.e., 1000 indicates a Level 1 module and 2000, a Level 2 module, etc."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   * **Second digit**: Indicates the type of module, i.e., 1 for essential, 2 for elective, 3 for enrichment."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* **Modular Credit (MC)**: A unit of the effort, stated in terms of time, expected of a typical student in managing his/her workload. The MC-value of a module is derived by dividing the estimated total number of workload hours per week for that module by the credit factor of 2.5 (i.e., one MC is equivalent to 2.5 hours of study and preparation per week)."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "## **Appendix: Instructions for Manual Testing**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Initial Launch"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Download the jar file and copy into an empty folder."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Double-click the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      Expected: GUI runs with a set of sample modules. The window size may not be optimum."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Saving Window Preferences"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Shutdown"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Test case: Click the \"close\" button (red button) at the top of the window.\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      Expected: The window closes immediately."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Test case: `exit`\u003cbr\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      Expected: GUI shows a farewell message,\"Exiting GradPad as requested ...\" and delays for 1.5 seconds, after which the window closes."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Add a Module"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisites: "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Both module code and modular credits must be specified."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid, e.g. \u0027CS2100\u0027 is a valid module code."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Modular credits format must be valid. e.g. \u00274\u0027 is a valid module code."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be added must exist in the valid modules list fetched from NUSMods, e.g. module code CS2100 with 4 modular credits is a valid module, whereas module code CS1000 with 4 modular credits is an invalid module."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs2100 cr/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is added into \u0027Completed Modules\u0027 in GradPad. Details of the added module are shown in the result display."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs2100 cr/4 tag/hardestmoduleever`\u003cbr\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is added into \u0027Completed Modules\u0027 in GradPad. Details of the added module are shown in the result display."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs2100 Computer Organisation cr/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs2100 cr/4a`\u003cbr\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid modular credit format_ message is shown in the result display."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs1000 cr/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `add c/cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Other invalid add commands to try: `add`, `add cs1000 4`, `add cr/4`\u003cbr\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module added. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Delete a Module"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisites: "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be deleted must exist in the list being displayed in GradPad, e.g. CS2100 is in the list and CS2106 is not."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is deleted from \u0027Completed Modules\u0027 in GradPad. Details of the deleted module are shown in the result display."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete cs2100 Computer Ogranisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete cs2106`\u003cbr\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Module not found_ message is shown in the result display."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `delete`\u003cbr\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Other invalid delete commands to try: `delete cs2103t 4`, `delete c/cs2103t`, `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module deleted. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Edit a Module"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisites:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code of module to be edited must be specified."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format of module to be edited must be valid."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be edited must exist in the list being displayed in GradPad, e.g. CS2100 is in the list and CS2106 is not."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. At least 1 field to edit must be specified (module code/modular credits/tags)"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Format of field to edit must be valid."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2100 c/cs2100s`\u003cbr\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is edited. Details of the edited module are shown in the result display."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2103t cr/5`\u003cbr\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module is edited. Details of the edited module are shown in the result display."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2100 Computer Organisation c/cs1000s`\u003cbr\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2106 c/cs2106s`\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Module not found_ message is shown in the result display."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2100 c/cs2100s Computer Organisation II`\u003cbr\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit cs2100 cr/4a`\u003cbr\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid modular credits format_ message is shown in the result display."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `edit c/cs2100s cr/5`\u003cbr\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Other invalid edit commands to try: `edit`, `edit cs2103t 2103 5`, `edit 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module edited. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### List All Modules"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisite: "
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Command must not be accompanied by any arguments."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `list`\u003cbr\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: The full list of \u0027Completed Modules\u0027 is displayed. \"Listed all modules\" message shown in the result display."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `list modules`\u003cbr\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Current list remains unchanged. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Find a Specific Module or a Group of Modules"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisites: "
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Arguments must be specified."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be included must exist in the \u0027Completed Modules\u0027 in GradPad, e.g. CS2100, CS2101, CS3230 and ST2334 are in the list and CS2106 is not."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2`\u003cbr\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 and CS2101 are displayed. \"2 modules listed!\" message shown in the result display."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2 st`\u003cbr\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100, CS2101 and ST2334 are displayed. \"3 modules listed!\" message shown in the result display."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs3230`\u003cbr\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS3230 is displayed. \"1 modules listed!\" message shown in the result display."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find cs2106`\u003cbr\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No modules displayed. \"0 modules listed!\" message shown in the result display."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `find`\u003cbr\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Current list is unchanged. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Check Total Modular Credits"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisite: Command must not be accompanied by any arguments."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `checkmc`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Total modular credits are calculated and displayed. If there are no modules in \u0027Completed Modules\u0027, total modular credits will be 0."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `checkmc modules`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Total modular credits are not calculated. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Open Help Page"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisite: Command must not be accompanied by any arguments."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `help`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Help page is displayed."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `help modules`"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Help page is not displayed. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Show Required Modules"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisite: Command must not be accompanied by any arguments."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `required`"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: All required modules are displayed in the result display. Modules already in the \u0027Completed Modules\u0027 list in GradPad would not be displayed in the \u0027Required Modules\u0027 list."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `required modules`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: Required modules are not displayed. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Check Module Information"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Prerequisites: "
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code must be specified."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module code format must be valid."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   1. Module to be searched must exist in the valid modules list fetched from NUSMods, e.g. module code CS2100 is a valid module, whereas module code CS1000 is an invalid module."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " "
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search cs2100`\u003cbr\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: CS2100 module information is displayed in the result display."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   "
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search cs2100 Computer Ogranisation`\u003cbr\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid module code format_ message is shown in the result display."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search cs1000`\u003cbr\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid module_ message is shown in the result display."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      "
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Test case: `search`\u003cbr\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Other invalid delete commands to try: `search c/cs2103t`, `search 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "   Expected: No module information is displayed. _Invalid command format_ message is shown in the result display."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 125,
      "silvernitro": 206,
      "mhdsyfq": 249,
      "-": 285,
      "yan-soon": 93
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "## GradPad"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad is a one-stop solution to module management for Computer Science Undergraduates."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Planning for modules has always been a tedious process but it does not have to be."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "The current approach to planning and tracking graduation requirements is to open up tabs after tabs of NUS resources which can"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "be messy at times. So, our team has come up with the idea of an easy-to-use, all-in-one application that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "can ease the process of module management for Computer Science Undergraduates."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad consolidates the modules you have taken and displays the remaining required modules to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ease your module planning process. A module searching platform is also included in GradPad, providing easy"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "navigation of modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "This user guide introduces what you can do with GradPad and the steps needed to do them. In addition,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "it includes a quick start guide that walks you through the installation and set-up process."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "With this guide, you\u0027ll be ready to use GradPad in no time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Download the latest `GradPad.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-1/tp/releases)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your GradPad."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`list`** : Lists all added modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`add`** `CS2103T 4` : Adds a module named `CS2103T` with `4` modular credits to the GradPad."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "   * **`delete`** `CS2103T` : Deletes the module titled `CS2103T` in the current list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "1. Refer to the [Feature Summary List](#feature-summary-list) below for a summary of all commands."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "## Feature Summary List"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " Features                         |    Description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " ----------------------------------------|------------"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " View Help                               | Allows you to view a list of all possible commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Add a Module                            | Allows you to add any module of choice to the `Completed Modules` list for tracking purposes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " View Added Modules                      | Allows you to check all the modules you\u0027ve added  to `Completed Modules`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Find Modules from Completed Modules     | Allows you to look for modules in `Completed Modules` using keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Delete a Module                         | Allows you to delete unwanted modules in `Completed Modules`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Edit a Module                           | Allows you to edit the details of a module you\u0027ve already added to `Completed Modules`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Check Modular Credits                   | Allows you to check your current modular credit tally"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " View All Required Modules               | Allows you to display all required modules in the Computer Science curriculum onto the `Result Display`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Search for a Required Module            | Allows you to search for a required module and display the module details in the `Result Display`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " Exit the Program                        | Allows you to terminate the GradPad program"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Refer to [Commands](#commands) below for details on all commands."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "**:information_source: Notes about the Command Format and Feature Descriptions:**\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* When a command requires parameters, they can be entered in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "For example, if the command specifies `add c/MODULE_CODE cr/MODULAR_CREDITS`, `add cr/MODULAR_CREDITS c/MODULE_CODE` is also acceptable."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "* Highlighted words (e.g. `this`) refer to actual commands or sections on the GradPad user interface."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Showing the help display: `help`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `help` command displays all of GradPad\u0027s available commands and how to use them, to you. This command is useful for first-timers or users who generally do not know how to use GradPad."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To show the help display:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `help` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Help1](images/Help1.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. The result display box will display all of GradPad\u0027s commands along with examples on how to use them.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Help2](images/Help2.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Adding a module: `add`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "This command allows you to add a module you have completed into the Completed Modules list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can add a module by specifying a valid module code as well as the modular credits the module carries using the prefixes \u0027c/\u0027 and \u0027cr/\u0027 respectively. You can also include multiple tags using the prefix \u0027t/\u0027 but they are optional."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "**Note:** You cannot add a module that has been previously added as GradPad does not allow duplicate modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Example:\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You have just completed the CS2101 module and you want to add the module into GradPad to track your academic progress. You found the module to be enjoyable so you would like to add tags to remind yourself of how fun the module was."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To add the module:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `add c/cs2101 cr/4 t/superbmodule t/superfun` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Add1](images/Add1.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"New module added\", along with the details of the module. You will then be able to see the CS2101 module at the bottom of the Completed Modules list.\u003c\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Add2](images/Add2.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Viewing all added modules: `list`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You can view all the modules you have added into the Completed Modules list in GradPad using this command. This is especially useful when you have previously used a command that filters the list (i.e. `find`) and you wish to restore the list to its original state."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Example:\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You have filtered the Completed Modules list to show modules whose module codes contain \u0027cs1\u0027, and you wish to restore the list to view all the modules you have added."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To view all modules:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `list` into the command box, and press **Enter** to execute it."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![List1](images/List1.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"Listed all modules\" and you will be able to view all your previously added modules in the Completed Modules list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![List2](images/List2.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Editing module details: `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "This command allows you to edit the details of a module that you have added into GradPad."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can edit a module by specifying the index of the module in the Completed Modules list, followed by the fields you wish to edit with their respective prefixes, \u0027c/\u0027 for module code, \u0027cr/\u0027 for modular credits, etc. You may edit multiple fields in a single `edit` command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "**Note:** You can also edit tags, however, instead of changing the descriptions of the existing tags, editing tags replace them with new ones."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Example:\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You have accidentally added a module with tags \"superbmodule\" and \"superfun\" when you actually found that module to be extremely boring and draggy."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Instead of deleting that module and adding it again with new tags, you can simply edit the module and replace the tags. The index of the module in the Completed Modules list is 6."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To edit the module:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `edit 6 t/boring` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Edit1](images/Edit1.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"Edited module\", along with the newly edited details of the module. You will also be able to see that the tags of the module displayed in the Completed Modules list has been replaced."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Edit2](images/Edit2.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Finding a specific module or a group of modules: `find`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "The `find` command allows you to filter the Completed Modules list to display the modules that you want to see. You can do this by specifying parts of the module code of the module(s) you wish to display."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Example:\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Let\u0027s say you have been adding a huge number of modules into GradPad, and you have lost track of the modules you have added. You want to check and confirm that you have added the module \u0027CS2101\u0027."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Instead of scrolling through the long Completed Modules list and checking the modules one by one, you can easily filter the list to display that module by `find`-ing said module."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To find the module:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `find cs2101` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Find1](images/Find1.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"1 modules listed!\" and you will be able to see only the CS2101 module in the Completed Modules list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Find2](images/Find2.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "### Deleting a Module: `delete`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "This command allows you to remove a module you have added into GradPad."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can delete a module by specifying the module code of the module."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Example:\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "You have added several modules into GradPad but you realised that you accidentally added an additional module \u0027CS2107\u0027 that you have not completed yet. If you no longer want that module in your Completed Modules list, you can simply delete it."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To delete the module:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `delete cs2107` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete1](images/Delete1.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display will display the message \"Deleted Module\" along with the details of the module you deleted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete2](images/Delete2.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "3. You can then confirm that the module no longer exists in the Completed Modules list by `find`-ing the module Type `find cs2107` into the command box, and press **Enter** to execute it. You will see that you can no longer `find` the module in the Completed Modules list.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete3](images/Delete3.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Delete4](images/Delete4.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Checking total modular credits: `checkmc`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "You can check the total amount of modular credits you have accumulated so far using this command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To check total modular credits:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `checkmc` into the command box, and press **Enter** to execute it."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![CheckMc1](images/CheckMc1.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"Total MC has been calculated\" along with your total modular credits amount."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![CheckMc2](images/CheckMc2.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "### Exiting GradPad: `exit`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Besides clicking the \"close\" button (red button) at the top of the GradPad window, you can exit GradPad using the `exit` command."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "To exit:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "1. Type `exit` into the command box, and press **Enter** to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Exit](images/Exit1.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "2. The result display box will display the message \"Exiting GradPad as requested ...\" and after a 1.5 second delay, the application will terminate.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "![Exit2](images/Exit2.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous GradPad home folder."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "--------|-------|----------"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Add** | `add c/ {module code} cr/ {modular credits}` | `add c/CS2100 cr/4`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Edit** | `edit {index} [c/module code] [cr/modular credits] [t/tags]` | `edit 1 c/CS2103T t/core`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Delete** | `delete {module code}` | `delete CS2103T`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Completed Modules** | `list`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Find** | `find {module code}` | `find CS2103T`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Check MCs** | `checkmc`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "**Required Modules** | `required`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Search module details** | `search {module code}` | `search CS2103T`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 22,
      "silvernitro": 40,
      "mhdsyfq": 77,
      "-": 93,
      "yan-soon": 6
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Module\" as Module LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \"e:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[-\u003e LogicManager : execute(\"add c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"add c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser -\u003e AddCommandParser : parse(\"c/CS1231 cr/4\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseModuleCode(\"CS1231\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseModularCredits(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : credits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e ParserUtil : parseTags(\"\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "ParserUtil --\u003e AddCommandParser : tagList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create Module"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e Module : Module(code, credits, tagList)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate Module"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Module --\u003e AddCommandParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate Module"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -\u003e AddCommand : AddCommand(Module)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser --\u003e GradPadParser : a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand -\u003e Model : addModule(Module)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 96
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main #grey"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class Nusmods NUSMODS_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "UI -[#green]\u003e Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right[#green]-\u003e Model"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -[#blue]-\u003e Storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down[#blue]-\u003e Model"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Logic -right[#blue]-\u003e Nusmods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e UI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Main -[#grey]-\u003e Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Main -up[#grey]-\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Nusmods .right.\u003e File"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Storage .right[STORAGE_COLOR].\u003eFile"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "User ..\u003e UI"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 3,
      "-": 31
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete c/CS2103T\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete c/CS2103T\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteModule(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveGradPad(gradPad)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *-right-\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueTagList -[hidden]down- UniqueModuleList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueTagList -[hidden]down- UniqueModuleList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueModuleList o-right-\u003e Module"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleCode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModularCredits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 9,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/CheckMcSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"C:CheckMcCommand\" as CheckMcCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"gradpad:GradPad\" as GradPad MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"checkmc\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"checkmc\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CheckMcCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e GradPadParser : C"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : C"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e CheckMcCommand : execute()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e Model : getGradPad()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e CheckMcCommand : gradpad"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e GradPad : getModuleList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPad"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPad -\u003e CheckMcCommand : modules"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPad"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CheckMcCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "note left: sum up MCs of all modules"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CheckMcCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e CheckMcCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CheckMcCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CheckMcCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 66
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "if () then ([command commits GradPad])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    :Save GradPad to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    gradPadStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "[-\u003e LogicManager : execute(\"delete c/CS2103T\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"delete c/CS2103T\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e DeleteCommandParser : parse(\"c/CS2103T\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser -\u003e ParserUtil : parseModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ParserUtil --\u003e DeleteCommandParser : code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser --\u003e GradPadParser : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "DeleteCommand -\u003e Model : deleteModule(\"CS2103T\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 19,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/EditSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":EditCommandParser\" as EditCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":EditModuleDescriptor\" as EditModuleDescriptor LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"e:EditCommand\" as EditCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"edit 1 c/CS2103T\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"edit 1 c/CS2103T\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e EditCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e EditCommandParser : parse(\"1 c/CS2103T\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e ParserUtil : parseModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ParserUtil --\u003e EditCommandParser : code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditModuleDescriptor"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditModuleDescriptor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditModuleDescriptor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditModuleDescriptor --\u003e EditCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditModuleDescriptor"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditModuleDescriptor : setModuleCode(code)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditModuleDescriptor"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditModuleDescriptor --\u003e EditCommandParser : desc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditModuleDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create EditCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -\u003e EditCommand : EditCommand(1, desc)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand --\u003e EditCommandParser : e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser --\u003e GradPadParser : e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommandParser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "destroy EditCommandParser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e EditCommand : execute()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand -\u003e Model : setModule(moduleToEdit, editedModule)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e EditCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e EditCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "EditCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 90
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[-\u003e LogicManager : execute(\"find CS2103T\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"find CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser --\u003e GradPadParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser -\u003e FindCommandParser : parse(\" CS2103T\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser --\u003e GradPadParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommandParser -[hidden]-\u003e GradPadParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "GradPadParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand -\u003e Model : updateFilteredModuleList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 69
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \"L:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[-\u003e LogicManager : execute(\"list\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(\"list\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser -\u003e ListCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e GradPadParser : L"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "GradPadParser --\u003e LogicManager : L"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e Model : updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ListCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 52
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "Class GradPadParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "LogicManager --\u003e\"1\" GradPadParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "GradPadParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "yan-soon": 3
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Interface ReadOnlyGradPad \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class GradPad"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ReadOnlyGradPad"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Package Module {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class Module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModuleName"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModuleCode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class ModularCredits"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Class UniqueModuleList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad .up.|\u003e ReadOnlyGradPad"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModelManager o--\u003e \"1\" GradPad"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPad *--\u003e \"1\" UniqueModuleList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UniqueModuleList o--\u003e \"*\" Module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleCode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModularCredits"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e ModuleName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Module *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModuleCode -[hidden]right-\u003e ModularCredits"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModularCredits -[hidden]right-\u003e ModuleName"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "ModelManager --\u003e\"1\" Module : filtered list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 20,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/ModelFilteredListClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class ModuleListPanel UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class FilteredModules"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Package Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Class XYZCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "ModuleListPanel .down[UI_COLOR].\u003e FilteredModules : displays modules from \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Model .left.\u003e FilteredModules : filters \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "XYZCommand .up[LOGIC_COLOR].\u003e Model : applies list filters via \u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 22
    }
  },
  {
    "path": "docs/diagrams/NusmodsClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam arrowColor NUSMODS_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "skinparam classBackgroundColor NUSMODS_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Interface NusmodsData \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class \"{abstract}\\nDataFetcher\" as DataFetcher"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class DataFetcherManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class NusmodsDataManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class ModuleSummary"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class ModuleInfo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager -up-|\u003e NusmodsData"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager .down.\u003e ModuleInfo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "NusmodsDataManager .right.\u003e DataFetcher : may get module data from \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager .left.|\u003e DataFetcher"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager ..\u003e ModuleSummary"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "DataFetcherManager ..\u003e ModuleInfo : creates \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 21
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Interface GradPadStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "Class JsonGradPadStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "StorageManager o--\u003e GradPadStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonGradPadStorage .left.|\u003e GradPadStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonGradPadStorage .down.\u003e JsonSerializableGradPad"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonSerializableGradPad .right.\u003e JsonAdaptedModule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "JsonAdaptedModule .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Class ModuleListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "Class ModuleCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "MainWindow *-down-\u003e ModuleListPanel"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleListPanel -down-\u003e ModuleCard"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleCard --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "ModuleCard ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 7,
      "-": 48
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "title After command \"delete CS2103T\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "title After command \"add c/CS2100\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State1 as \"__gp0:GradPad__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State2 as \"__gp1:GradPad__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    class State3 as \"__gp2:GradPad__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "note right on link: State gp2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":GradPadParser\" as GradPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "participant \":VersionedGradPad\" as VersionedGradPad MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "LogicManager -\u003e GradPadParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate GradPadParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UndoCommand --\u003e GradPadParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "GradPadParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate GradPadParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "UndoCommand -\u003e Model : undoGradPad()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "Model -\u003e VersionedGradPad : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "activate VersionedGradPad"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "VersionedGradPad -\u003e VersionedGradPad :resetData(ReadOnlyGradPad)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "VersionedGradPad --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "deactivate VersionedGradPad"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "!define NUSMODS_COLOR #BD0074"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 2,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "title: GradPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T09-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "**GradPad is a desktop application for managing your NUS modules.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* If you are interested in using GradPad, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "* If you are interested about developing GradPad, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 6,
      "-": 13
    }
  },
  {
    "path": "modules.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2106\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2106\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Operating Systems\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CG2271 or EE4214. CEG students are not allowed to take this module.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 or EE2007 or EE2024 or EE2028\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2105\" : {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2105\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Computer Networks\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"IT2001, EE3204/E, EE4204/E, EE4210/E. CEG, CPE and EEE students are not allowed to take this module.\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalents)\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2108\" : {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2108\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Media Computing\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3246\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2107\" : {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2107\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Security\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalence\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3245R\" : {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3245R\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Retrieval\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5218\" : {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5218\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Principles and Practice of Program Analysis\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Program analysis denotes automated processes for predicting, estimating or proving properties of program behavior, whether functional or non-functional.  Example uses are compiler optimization, bug detection, performance evaluation, detection of security vulnerabilities, amongst many others.  This module first provides the rigorous mathematical foundations. This step is necessary in order to understand the common elements within the broad area of software analysis.  Secondly, through the use of a state-of-the-art program analysis system, this module provides hands-on instruction on programming real-life analyses.  In the end, the graduating student will be able to address a broad spectrum of program analysis in a practical way.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4212 Compiler Design or CS4215 Programming Language Implementation\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5339\" : {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5339\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theory and Algorithms for Machine Learning\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module aims to provide a broad theoretical understanding of machine learning and how the theory guides the development of algorithms and applications. Topics covered include the approximation capabilities of common function classes used for machine learning, such as decision trees, neural networks, and support vector machines, the sample complexity of learning different function classes and methods of reducing the estimation error such as regularization and model selection, and computational methods used for learning such as convex optimization, greedy methods, and stochastic gradient\\ndescent.\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2102\" : {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2102\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Systems\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2102S, IT2002\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or (CS2040 or its equivalent)) \\nand (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4248\" : {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4248\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Natural Language Processing\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module deals with computer processing of human languages, emphasizing a corpus-based empirical approach. The topics covered include: 1. Linguistic essentials. 2. Basic techniques and algorithms: Hidden Markov model, Viterbi algorithm, supervised learning algorithms. 3. Words: part-of-speech tagging. 4. Syntax: noun phrase chunking, named entity tagging, parsing (top down, bottom up, probabilistic). 5. Semantics: word sense disambiguation. 6. Pragmatics: discourse, co-reference resolution. 7. Applications: text categorisation, text summarisation, language identification, information extraction, question answering, machine translation.\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS3243 or CS3245) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2101\" : {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2101\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Effective Communication for Computing Professionals\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4249\" : {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4249\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Phenomena and Theories of Human-Computer Interaction\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches the underlying science of Human-Computer Interaction (HCI) and its application to user interface design. It surveys a wide range of  psychological theories beginning with organizational behaviour approaches, understanding of work and workflow within organizations, and moving on to understanding human psychological architecture and processing constraints. It demonstrates via a combination of scientific theory understanding and engineering modelling the solutions of design problems facing a user interface designer. It also covers new design methods and techniques available and the new conceptual mechanisms used in HCI such as the metaphors for describing user interaction.\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3240 or NM2213 or NM2216\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2104\" : {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2104\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Language Concepts\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4246\" : {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4246\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"AI Planning and Decision Making\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action\\nconsequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and non-deterministic planning,\\npractical planning and acting under resource constraints and uncertainy, expected utility and rational decision making, decision networks, Markov decision processes,\\nelementary game theory, and multi-agent planning and decision making.\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5446\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103\" : {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103T, CS2113, CS2113T\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4247\" : {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4247\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Graphics Rendering Techniques\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides a general treatment of real-time and offline rendering techniques in 3D computer graphics. Specific topics include the raster graphics pipeline, viewing and transformation, real-time mapping techniques, real-time shadow algorithms, local reflection models, global illumination, distributed ray tracing, photon mapping, radiosity, volume rendering, image-based rendering and modelling, and strategies for anti-aliasing and photo-realism.\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4244\" : {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4244\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Representation and Reasoning\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course will focus on core issues of representation and reasoning of the knowledge in the context of design of intelligent machines. We will focus on how logic can be used to formalise and perform deduction from existing knowledge. We will then discuss compilation techniques. Finally, we will discuss limitations of monotonic logic and discuss challenges for non-monotonic reasoning.\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2100\" : {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2100\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Organisation\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1104 or Students from Department of ECE\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4242\" : {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4242\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Social Media Computing\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The emergence of WWW, smart mobile devices and social networks has revolutionised the way we communicate, create, disseminate, and consume information. This has ushered in a new era of communications that involves complex information exchanges and user relationships. This module aims to provide students with a good understanding of the social network phenomena and computational skills for analysing the complex social relation networks between users, the contents they shared, and the ways contents and events are perceived and propagated through the social networks. The analysis will provide better understanding of the concerns and interests of users, and uncover live and emerging events that will affect the community.\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2108 Introduction to Media Computing and CS3245 Information Retrieval.\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5332\" : {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5332\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Biometric Authentication\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Biometrics (such as fingerprint, iris images) are commonly used for authentication. This module covers authentication methods, different types of biometrics, pattern recognition, performance measurement, spoofing attacks, as well as issues such as privacy, user acceptance, and standards compliance. Students will gain a solid understanding of the fundamentals of the technology underlying biometric authentication, and the key issues to be addressed for successful deployment. Both the theoretical and practical\\naspects of biometrics authentication will be discussed.\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2040 or its equivalent) and (MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010\" : {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2220\" : {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2220\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Computational Biology\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or  (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4243\" : {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4243\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Vision and Pattern Recognition\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is for undergraduates who are interested in computer vision and its applications.  It covers (a) the basic skills needed in handling images and videos, (b) the basic theories needed to understand geometrical computer vision, and (c) pattern recognition.  Topics covered in image handling include: contrast stretch, histogram equalization, noise removal, and color space.  Topics covered in geometrical vision include:  affine transform, vanishing points, camera projection models, homography, camera calibration, rotation representations including quaternions, epipolar geometry, binocular stereo, structure from motion.  Topics covered for pattern recognition include principal component analysis.\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EE4212 Computer Vision\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or (((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5331\" : {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5331\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Web Security\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare graduate students for understanding the security of the latest web platform and its interplay with operating systems and the cloud infrastructure. The topics covered include the design of web browsers and web \\napplications, vulnerabilities in web applications and web browsers, design of web scanners, authentication in web-based platforms, security policies and enforcement mechanisms. This module also covers security topics on the interface between the \\nweb platform and the backend systems, such as the underlying database systems and cloud infrastructure.\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4240\" : {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4240\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Interaction Design for Virtual and Augmented Reality\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to expose students to the human-centered principles of designing and building virtual reality (VR) and augmented reality (AR) applications. Students will learn about the fundamentals of VR and AR, human perceptions of reality, and the design patterns and guidelines for user interactions within VR/AR applications. Students will gain hands on experience building VR/AR applications applying these interaction principles.\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3240 and (MA1301 or A-level / H2 Mathematics)\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5330\" : {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5330\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Randomized Algorithms\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module will cover basic concepts in the design and analysis of randomized algorithms. It will cover both basic techniques, such as Chernoff bounds, random walks, and the probabilistic method, and a variety of practical algorithmic applications, such as load balancing, hash functions, and graph/network algorithms. The focus will be on utilizing randomization to develop algorithms that are more efficient and/or simpler than their deterministic counterparts.\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103T\" : {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1231S\" : {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1231S\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalization proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"MA1100 and CS1231 or its equivalent\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4239\" : {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4239\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Security\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5439\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security and (CS2103 or its equivalent)\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4238\" : {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4238\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Security Practice\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This is a practice security module with emphasis on hands-on experiences of computer security. The objective of this module is to connect computer security knowledge to practical skills, including common attacks and protection mechanisms, system administration, and development of secured software. Topics covered include network security, operating system security, and application security, such as DNS attacks, memory-error exploits, and web application attacks. Students will learn through lab-based exercises and assignments.\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5446\" : {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5446\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"AI Planning and Decision Making\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action consequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and nondeterministic planning, practical planning and acting under resource constraints and uncertainty, expected utility and rational decision making, decision networks, Markov decision processes, elementary game theory, and multiagent planning and decision making.\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4246\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4236\" : {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4236\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cryptography Theory and Practice\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to introduce the foundation, principles and concepts behind cryptology and the design of secure communication systems. The emphasis is on the formulation and techniques of various cryptographic primitives, and on the secure usage of such primitives to achieve the goals of confidentially, integrity, and authenticity in both theoretical settings and practical scenarios. Basic topics include pseudorandom functions, symmetric key encryption, public key encryption, message\\nauthentication codes, hash functions, digital signatures, key exchange and PKI. Selected topics may include: secret sharing, TCP/IP security, Kerberos, SSL, trusted computing, side-channel attacks.\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent)) and CS2107\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4234\" : {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4234\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Optimisation Algorithms\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1508E or MA1513)\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5322\" : {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5322\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Security\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Database security has a great impact on the design of today\u0027s information systems. This course will provide an overview of database security concepts and techniques and discuss new directions of database security in the context of Internet information management. Topics covered include: Access control models for DBMSs, Inference controls, XML database security, Encrypted databases, Digital credentials and PKIs, Trust in open systems, and Peer-to-peer system security.\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223 Database Systems Implementation\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4231\" : {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4231\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel and Distributed Algorithms\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course will examine some fundamental issues in parallel programming and distributed computing, and the relationships between the two.  Parallel programming: mutual exclusion, semaphores, consistency, wait-free synchronization.  Distributed computing: time, global state, snapshots, message ordering.  Relationships: consensus, fault-tolerance, transactions, self-stabilization.\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 Design and Analysis of Algorithms or CS3210 Parallel Computing\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4232\" : {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4232\","
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theory of Computation\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide students with a theoretical understanding of what can be computed, and an introduction to the theory of complexity. It aims to introduce (1) some standard formal models of computation so as to develop an understanding of what can or cannot be computed by various computing devices; (2) some reasoning techniques commonly used in computer science; these include model equivalence, non-determinism, digitalisation, simulation and reduction; and (3) the mathematical formulation of objects in computer science so as to study their properties.\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1231 or CS1231S or any level-2 MA module\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4350\" : {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4350\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Game Development Project\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this project-based module is to provide an opportunity for the students to work in a group to design and develop a game following the main stages of game development process. The module will focus on the design of core dynamic, game mechanics, strategy, progression, balancing, game levels, interface and technical features including 3D graphics, animation, AI, physics, and networking. In addition, software engineering principles will be practised in developing the game software.\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3247 or NM3216\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5439\" : {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5439\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Security\","
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4239\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 and (CS2103 or its equivalent)\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4226\" : {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4226\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Internet Architecture\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to focus on advanced networking concepts pertaining to the modern Internet architecture and applications. It covers a range of topics including network performance (throughput, delay, Little’s Law and M/M/1 queuing formula), and resource allocation and buffer management (max-min fair, round-robin and RED), intra- and inter-domain routing (RIP, OSPF and BGP), congestion control and modern variations of TCP (AIMD and Cubic TCP), peer-to-peer applications and content delivery networks (BitTorrent, Skype, Akamai), and data center networking and management (SDN and OpenFlow).\","
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204 or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4347\" : {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4347\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Sound and Music Computing\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental technologies employed in sound and music computing which are grouped into three major areas: Sound, Music, and Interaction. It begins with an introduction to sound production, propagation and perception, followed by digital sound recording, editing, post-processing and compression. Its core components consists of the analytic and synthetic approaches of sound and music. The analytic approach pertains to analysis and understanding, whereas the synthetic approach pertains to generation and processing. Interaction aspects include multimodal mobile music interface and sound interaction design. Finally, music information retrieval will be introduced as an application of analytic techniques.\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2108 and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4224\" : {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4224\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Databases\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5424\","
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1101S\" : {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1101S\","
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.\","
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 or its equivalents\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4225\" : {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4225\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big Data Systems for Data Science\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science utilizes advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"BT4221 and CS5425\","
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102 or IT2002\""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4222\" : {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4222\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Wireless Networking\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.\","
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5422\","
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204/E or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4223\" : {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4223\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Multi-core Architectures\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2106 Operating Systems or CG2271 Realtime Operating Systems) and (CS3210 Parallel Computing or CS3220 Computer Architecture or CG3207 Computer Architecture).\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1231\" : {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1231\","
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Discrete Structures\","
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications.  (2) Relations and Functions: Equivalence relations and partitions.  Partially ordered sets.  Well-Ordering Principle. Function equality.  Boolean/identity/inverse functions.  Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle.  Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset.  Subsets of countable sets are countable.\","
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"MA1100, CS1231S\","
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4220\" : {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4220\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Discovery Methods in Bioinformatics\","
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The advent of high throughput technologies (e.g., DNA chips, microarray), biologists are being overloaded with information (e.g., gene expression data). A systematic way is needed to analyze the data to make sense of them. This module is introduced to provide students with knowledge of techniques that can be used to analyse biological data to enable them to discover new knowledge. At the end of the module, students will be able to identify the relevant techniques for different biological data to uncover new information. Topics include: Clustering analysis, classification, association rule mining; support vector machines; Hidden Markov Models.\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2220 or LSM2241\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040S\" : {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040S\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and\\nimplementation of fundamental data structures and\\nalgorithms. The module covers basic data structures\\n(linked lists, stacks, queues, hash tables, binary heaps,\\ntrees, and graphs), searching and sorting algorithms, and\\nbasic analysis of algorithms.\","
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040C\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and (CS1010 or its equivalent)\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4221\" : {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4221\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Applications Design and Tuning\","
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module addresses the design and performance tuning of\\ndatabase applications. The syllabus focusses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entityrelationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of non-relational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5421\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6244\" : {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6244\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Robotics\","
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module presents the advances in robotics research over a broad range of topics such as robot perception, learning, decision making and control, and human-robot interaction. The exact topics of focus may differ in each offering.  Through this module, students will get familiar with recent research trends and developments in robotics and prepare for research in robotics and related fields.\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1506 or MA1508E) and\\n(ST2131 or ST2334)\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040\" : {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.\","
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040C, CS2040S\","
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6240\" : {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6240\","
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Multimedia Analysis\","
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide a comprehensive and rigorous treatment of the main approaches in multimedia (document, image, video, graphics) analysis. Three main themes are covered: (1) representation and modelling of multimedia entities using various modelling approaches, (2) matching of a model with an input entity, and (3) derivation of a model from sample entities. It focuses on the non-vector-space approach, which complements the vector-space approach to multimedia analysis.\","
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4243 or CS5240\""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2040C\" : {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2040C\","
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Data Structures and Algorithms\","
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, basic analysis of algorithms, and basic object-oriented programming concepts.\","
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040S\","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4218\" : {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4218\","
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Testing\","
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the concepts and practice of software testing including unit testing, integration testing, and regression testing. Various testing coverage criteria will be discussed. Debugging methods for finding the root-cause of errors in failing test cases will also be investigated. The use of testing and analysis for performance prediction, performance clustering and performance debugging will be studied. Students will acquire crucial skills on testing and debugging through hands-on assignments.\","
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3219 Software Engineering Principles and Patterns.\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3247\" : {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3247\","
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Game Development\","
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to introduce techniques for electronic game design and programming. This module covers a range of important topics including 3D maths, game physics, game AI, sound, as well as user interface for computer games. Furthermore, it will give an overview of computer game design to the students. Through laboratory programming exercises, the students will have hands-on programming experience with popular game engines and will develop basic games using those engines.\","
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4215\" : {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4215\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Language Implementation\","
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides the students with theoretical knowledge and practical skill in the implementation of programming languages. It discusses implementation aspects of fundamental programming paradigms (imperative, functional and object-oriented), and of basic programming language concepts such as binding, scope, parameter-passing mechanisms and types. It introduces the language processing techniques of interpretation and compilation and virtual machines. The lectures are accompanied by lab sessions which will focus on language processing tools, and take the student through a sequence of programming language implementations. This modules\\nalso covers automatic memory management, dynamic linking and just-in-time compilation, as features of modern execution systems.\","
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))\""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5425\" : {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5425\","
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big Data Systems for Data Science\","
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science needs advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.\","
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"BT4221 and CS4225\","
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102\""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3245\" : {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3245\","
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Retrieval\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module discusses the basic concepts and methods of information retrieval including capturing, representing, storing, organizing, and retrieving unstructured or loosely structured information. The most well-known aspect of information retrieval is document retrieval: the process of indexing and retrieving text documents. However, the field of information retrieval includes almost any type of\\nunstructured or semi-structured data, including newswire stories, transcribed speech, email, blogs, images, or video. Therefore, information retrieval is a critical aspect of Web search engines. This module also serves as the foundation for subsequent modules on the understanding, processing and retrieval of particular web media.\","
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5424\" : {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5424\","
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Databases\","
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).\","
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4224\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3243\" : {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3243\","
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Artificial Intelligence\","
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes\u0027 rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.\","
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent))\\nand (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4211\" : {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4211\","
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Formal Methods for Software Engineering\","
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. Based on the requirements, software engineers construct design models, and then use these design models as guide to construct software implementations. This module will cover formal specification and verification techniques for accurately capturing and reasoning about requirements, model and code. The topics covered include modeling notations, temporal logics, model checking, software model checking, theorem proving, and symbolic execution based analysis. Most importantly, the module will attempt to inculcate an appreciation and understanding of formal thinking in software design and construction.\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent\""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5422\" : {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5422\","
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Wireless Networking\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.\","
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4222\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204/E or EE4204) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3244\" : {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3244\","
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Machine Learning\","
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.\","
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"IT3011, BT4240\","
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or CS2020 or CS2040 or its equivalent) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4212\" : {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4212\","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Compiler Design\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to introduce the principal ideas behind program compilation, and discusses various techniques for program parsing, program analysis, program optimisation, and run-time organisation required for program execution. Topics covered include regular expressions, context-free grammars, lexical analysis, syntax analysis; different algorithms for parsing codes, such as top-down parsing, bottom-up parsing; translation to abstract syntax using modern parser generator technology, intermediate representation, semantics analysis, type system, un-optimised code generation, code optimisation, data-flow analysis, instruction scheduling.\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2104 Programming Language\""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5421\" : {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5421\","
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Applications Design and Tuning\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module addresses the design and performance tuning of database applications. The syllabus focuses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entity relationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of nonrelational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).\","
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4221\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6235\" : {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6235\","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Theoretical Computer Science\","
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate-level module covers advanced topics in the theoretical aspects of computer science that are of current research or application interests. Topics falling under this module include algorithms, theory of computation, formal models, and semantics. The exact topic may vary from year to year and depends on the instructor teaching the module. Upon completion of this module, the student will\\nhave a deeper understanding on some of the latest research problems in one of the areas of theoretical computer science. This module will help prepare students towards doing research in theoretical computer science.\","
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3241\" : {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3241\","
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Graphics\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.\","
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))\""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6234\" : {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6234\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Algorithms\","
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is aimed at graduate students who are doing or intend to do advanced research in algorithms design and analysis in all areas of computer science. The module covers advanced material on combinatorial and graph algorithms with emphasis on efficient algorithms, and explores their use in a variety of application areas. Topics covered include, but are not restricted to, linear programming, graph matching and network flows, approximation algorithms, randomized algorithms, online algorithms, local search algorithms, algorithms for large datasets. The module will be a seminar-based module that will expose students to current research in these areas.\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5234\""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3242\" : {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3242\","
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Modeling and Animation\","
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide fundamental concepts in 3D modeling and animation. It also serves as a bridge to advanced media modules. After taking this module, students should be able to use these concepts to easily build or work with digital models, manipulate the models by means of computer deformation and animation, and use lighting and rendering techniques to create appealing scenes. Topics include coordinate spaces, transforms, 3D model representations, hierarchical structures, deformation, procedural modelling, particle systems, character animation, shading networks, lighting, and scripting concepts.\","
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4342\","
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3241 and (PC1221 or PC1221X) and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)\""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3240\" : {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3240\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Interaction Design\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.\","
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T or NM3209 or NM2207/Y\""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6231\" : {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6231\","
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Security and Privacy\","
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare PhD students for research in security and privacy, by investigating security issues in various theoretical as well as system computer science areas such as software, networks, data analytics and machine learning, etc. It addresses security and privacy concepts and design principles from an adversarial perspective. Selected topics in security and privacy are covered, such as software security, applied cryptography, privacy-preserving data analysis, and design of secure distributed systems. Emerging topics of current research interests may be included as well.\","
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4236 Cryptography Theory and Practice or \\nCS3235 Computer Security or \\nCS5231 System Security.\""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2030\" : {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2030\","
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2030S\","
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5260\" : {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5260\","
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Neural Networks and Deep Learning II\","
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow-up to CS5242 and covers\\nadvanced topics in neural networks and deep learning.\\nThis module explores the underlying mechanism of a\\nvariety of different types of learning models: unsupervised,\\nsemi-supervised, and adversarial learning models, that\\nare not covered in CS5242. Topics may include:\\ngenerative adversarial networks, adversarial machine\\nlearning, zero-shot learning, geometric deep learning,\\nneural architecture search.\","
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5242 Neural Networks and Deep Learning\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010X\" : {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010X\","
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.\","
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 or its equivalent, CS1010FC\","
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2309\" : {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2309\","
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"CS Research Methodology\","
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2305S\","
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2010 or its equivalent) or CS2020 or ((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))\\nand \\n(MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010R\" : {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010R\","
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CG1101, CS1010, CS1010E, CS1101, CS1101C, CZ1102, IT1002, Engineering students\","
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010S\" : {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010S\","
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and \\nforemost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.\","
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010, CS1010E, CS1010J, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3236\" : {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3236\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Theory\","
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the basics of modern information theory. It covers how information can be quantified, and what this quantification tells us about how well we can compress and transmit information without error. It discusses basic error correcting techniques, and information-theoretic cryptography. Topics covered\\ninclude: mathematical techniques, entropy measures, fundamental limits to data compression and noisy-channel coding, examples of error-correcting codes, examples of information theoretic cryptography (commitments, secure computation, key distribution, randomness extraction).\","
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3237\" : {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3237\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Internet of Things\","
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The Internet of Things (IoT), where a large number of physical objects embedded with computing power and sensors connect to the network for seamless cooperation between the cyber domain and the physical world, is revolutionizing our lives. This module will serve as an introduction to the IoT and provide a holistic view of the entire spectrum of the IoT system architecture from the devices to the fog and the cloud computing. The focus will be on designing IoT systems that balance both the functional and non-functional (communication bandwidth, security, safety, power) requirements. The module will have a significant project component.\","
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS1010 or equivalent) and (CG2028 or CS2100 or EE2024 or EE2028)\""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3234\" : {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3234\","
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Logic for Proofs and Programs\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces logic as a means for specifying and solving computational problems. It explores how logic can be used to represent computational problems, how these representations can be proven correct, and how they can be executed on a computer. Students learn about logic as formal systems (semantic, axiomatic, and deductive) and how to write proofs in the different systems. They also learn how to use a proof assistant such as Coq and how to program in a logic programming language such as Prolog.  Topics include classical and intuitionistic logic, SAT, Peano’s axioms, Hoare logic, and other selected logic systems.\","
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"MA1100 or (CS1231 or its equivalent); Programming experience is preferred.\""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3235\" : {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3235\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Security\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2105 or EE3204 or EE4204) and (CS2106 or CG2271) and CS2107\""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3241R\" : {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3241R\","
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Graphics\","
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.\","
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3233\" : {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3233\","
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Competitive Programming\","
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.\","
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"At least grade A- in (CS2010 or CS2020 or (both CS2030 and CS2040)) or special permission\""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2030S\" : {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2030S\","
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology II\","
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.\","
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2030\","
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS1010 or its equivalent\""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3230\" : {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3230\","
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students\u0027 ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.\","
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\","
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))\""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6101\" : {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6101\","
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Exploration of Computer Science Research\","
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces CS graduate students to various research areas in Computer Science. Study groups are organised for major research areas. Each study group provides a forum for students to read, present and discuss\\nresearch papers, and acquire the basic research skills for literature review and critical comparison of existing work. Students will also gain a first experience in technical presentation and writing. This module will be graded as “Completed Satisfactory” or “Completed Unsatisfactory” (CS/CU).\","
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"DMC1401CS\" : {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"DMC1401CS\","
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design Your Own Module\","
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6220\" : {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6220\","
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Data Mining\","
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the rapid advances of computer and internet technologies, a large amount of data accumulates. Discovering knowledge from the data will give us a competitive advantage. The process of knowledge discovery involves pre-processing the data, mining or discovering patterns from the data, and post-processing the discovered patterns. In this course, we will review and examine the present techniques and the theories behind them and explore new and improved techniques for real world knowledge discovery applications. The course is designed to encourage active discussion, creative thinking, and hands-on project development.\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5228\""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5250\" : {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5250\","
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Operating Systems\","
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module covers a broad range of issues in the design and implementation of modern advanced operating systems. The topics covered in this module includes OS design strategies (including microkernels, mobile, embedded and real-time operating systems and the component’s interfaces), priority and resource allocation strategies; scheduling algorithms (including for multi-core, multi-processors); naming, protection and security; UI and windowing systems; file system implementations (including network and distributed file systems); failure and recovery; and virtualization and the Internet-ready OS. They extend and provide in-depth coverage of material in earlier prerequisite OS modules.\","
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2106 Introduction to Operating Systems or CG2271\\nReal-Time Operating Systems\""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6219\" : {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6219\","
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Computer Systems\","
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate-level module covers advanced topics in computer systems that are of current research or application interests. Topics include operating systems,\\nsystems architecture and hardware, distributed systems, computer networks, and the interaction between these areas. The exact topics to be taught will depend on the lecturers teaching the module. Upon completion of this module, the student will have a deeper understanding on some of the latest research problems in the area of computer systems, as well as the state-of-the-art approaches to address the problems. This module will help prepare students towards doing research in computer systems.\","
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2105 and CS2106\""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3223\" : {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3223\","
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Database Systems Implementation\","
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This system-oriented module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of the relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control, and recovery. The third part covers advanced topics such as on-line analytical processing, in-memory databases, and column stores.\","
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (CS2102 or IT2002)\""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6216\" : {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6216\","
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Machine Learning\","
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This graduate level module covers advanced topics in\\nmachine learning that are of current research or\\napplication interests. The exact topics to be taught will\\ndepend on the lecturers teaching the module. Upon\\ncompletion of this module, the student will have a deeper\\nunderstanding on some of the latest research problems in\\nmachine learning as well as the state-of-the-art\\napproaches and solutions. This module will help prepare\\nstudents towards doing research in machine learning.\","
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244\""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3103\" : {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3103\","
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer Networks Practice\","
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.\","
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2105 or EE3204/E or EE4204\""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3230R\" : {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3230R\","
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Design and Analysis of Algorithms\","
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read host module. Student selection process is enforced.\""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6215\" : {"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6215\","
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Program Analysis\","
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Program analysis techniques allow one to automatically\\nanalyse the behaviour of a computer program, to identify\\nbugs and performance bottlenecks. This graduate level\\nmodule covers advanced topics in program analysis that\\nare of current research or application interests. Students\\nwill explore the state-of-the-art techniques and systems for\\nprogram analysis. After taking the module, students will\\nbe able to apply advanced automated program analysis\\ntools and techniques to verify, test, and debug programs,\\nas well as be better prepared for conducting research in\\nprogram analysis and apply them in related research\\nareas.\","
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and CS4212\""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010J\" : {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010J\","
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010 and its equivalents\","
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4277\" : {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4277\","
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Computer Vision\","
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"One of the most important capability for robots such as self-driving cars, domestic mobile robots, and drones to achieve full autonomy is the ability to perceive the 3D environment. A camera is an excellent choice as the main sensory device for robotic perception because it produces information-rich images, and is lightweight, low cost and requires little or no maintenance. This module covers the mathematical concepts and algorithms that allow us to recover the 3D geometry of the camera motions and the structures in its environment. Topics include projective geometry, camera model, one-/two-/three-/N-View reconstructions and stereo, generalized cameras and non- rigid structure-from-motion.\","
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5477\","
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1101R or MA1311 or MA1506 or MA1508E) and (CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4278\" : {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4278\","
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Intelligent Robots: Algorithms and Systems\","
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.\","
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5478\","
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6213\" : {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6213\","
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Special Topics in Distributed Computing\","
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3211 or CS4231\""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4276\" : {"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4276\","
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"IoT Security\","
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the advent of the Internet-of-Things, the computing paradigm is quickly changing from the traditional cyber domain to cyber-physical domain. This is made possible from devices that are equipped with sensors and actuators that interact with the physical world. In this module, we will investigate how such sensing systems affect the notion of computer security. We will also explore the state-of-the-art research in the areas of sensing systems and how they can provide benefits to the security of the Internet-of-Things. This module will also investigate how an attacker may compromise the sensing information to exploit security vulnerabilities in these systems.\","
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS5476\","
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CG3002 or CG4002 or CS3237\""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6211\" : {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6211\","
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Analytical Performance Modelling for Computer Systems\","
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Constructing simple mathematical models to describe a computer system can help in analysis and understanding of the characteristics, behaviour, and performance of the system. This module introduces students to the modelling techniques, commonly used models, applications of the models to performance modelling of computer systems, and experimental validation of the models. After completing the module, students are expected to have the confidence to construct, analyse, and validate a performance model for a computer system that they are interested in.\","
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(ST2334 or ST2131) and CS2105 and CS2106.\""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5242\" : {"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5242\","
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Neural Networks and Deep Learning\","
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides students with the knowledge of deep neural network and enables them to apply deep learning methods effectively on real world problems.  The module emphasizes on the understanding of the principles of neural networks and deep learning; practical guidelines and techniques for deep learning; and their applications.  Through assignments and projects, students will design, develop, and evaluate deep learning-based solutions to practical problems, such as those in the areas of computer vision, bioinformatics, fintech, cybersecurity, and games.\","
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244 Machine Learning\""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6210\" : {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6210\","
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"The Art of Computer Science Research\","
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide the meta-skills for research in computer science. How does one discover great research problems? What are the good strategies for solving research problems? How does one write papers or give presentations with great impact? Students will seek answers to these questions by critically examining and assessing successful and less successful examples of\\nresearch.\","
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 Design and Analysis of Algorithms\""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5240\" : {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5240\","
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Theoretical Foundations in MultiMedia\","
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module lays the theoretical foundation for graduate students to do research in multimedia: images, videos, audio, speech, graphics and text documents. The module covers the main theoretical issues common to various multimedia research.  These issues provide a general framework within which specific techniques in particular research areas can be understood. Topics include: vector and signal representations of multimedia, spatial and frequency analyses, models and parameter estimation methods. Examples will be drawn from different types of media.  Upon completion, students will be well-grounded to pursue further research in computer vision, graphics, natural language processing, audio analysis and multimedia applications.\","
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1101R or MA1311 or MA1508E or MA1513) and \\n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \\n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS1010E\" : {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS1010E\","
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\","
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS1010, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\","
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3219\" : {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3219\","
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering Principles and Patterns\","
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.\","
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3213 Software Systems Design\","
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent\""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"MA1101R\" : {"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"MA1101R\","
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Linear Algebra I\","
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is a first course in linear algebra.  Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n.  Proofs of results will be presented in the concrete setting.  Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices.  Some applications will be presented. Major topics: Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.\","
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"EG1401, EG1402, MA1101, MA1311, MA1506, MA1508, FOE students, YSC2232\","
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE ‘A’ Level or H2 Mathematics or H2 Further Mathematics  or MA1301 or MA1301FC or MA1301X\""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3216\" : {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3216\","
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Product Engineering for Digital Markets\","
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"5\","
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.\","
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.\""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3217\" : {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3217\","
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering on Modern Application Platforms\","
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"5\","
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces students to the practice of software engineering on modern application platforms such as mobile devices, the Web and cloud systems. Students will work in small project teams to develop well-tested,\\nproduction-quality software. This module focuses on building core software engineering skills and competencies in programming modern application platforms. It also trains students to work well in project teams. Students will be\\nassessed on both their individual programming competencies and their software enginnering skills in final team project.\","
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.\""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6208\" : {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6208\","
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Artificial Intelligence\","
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers advanced topics in artificial intelligence that are of current research or application interests. A wide range of topics may be covered including soft computing (fuzzy logic, genetic algorithms, etc.), data mining, machine learning, image and video processing, artificial life, robotics, etc. The exact topics to be taught will depend on the lecturers teaching the module.\","
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243\""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5239\" : {"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5239\","
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Computer System Performance Analysis\","
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The objective of this module is to provide students a working knowledge of computer performance evaluation and capacity planning. They will be able to identify performance bottlenecks, to predict when performance limits of a system will be exceeded, and to characterise present and future workload to perform capacity planning activities. Topics include: performance analysis overview; measurement techniques and  tools including workload characterisation, instrumentation, benchmarking, analytical modelling techniques including operational analysis, stochastic queuing network analysis; performance of client-server architectures; capacity planning; case studies.\","
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T) and (EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6207\" : {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6207\","
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Natural Language Processing\","
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module aims to prepare students to embark on research in natural language processing (NLP). At the end of the course, the students will have experience in reading and critiquing research papers, and will have undertaken a substantial project on some aspects of NLP research. Topics covered include: Statistical parsing, Word sense disambiguation, SENSEVAL, co-reference resolution, machine translation, question answering.\","
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4248\""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS4268\" : {"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS4268\","
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Quantum Computing\","
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module will introduce basics of quantum computing and cover various well known algorithms e.g. Deutsch-Jozsa algorithm, Simon’s algorithms, quantum Fourier transform, phase estimation, order finding, Shor’s algorithm and Grover’s algorithm. The module will also cover some basics in quantum information theory, cryptography and error correction.\","
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230 and \\n(MA1101R or MA1311 or MA1508E or MA1513) and \\n(EE2012/A or MA2216 or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5236\" : {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5236\","
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Automata Theory\","
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"In computer science, automata are an important tool for many theoretical investigations. Various types of automata have been used to characterise complexity classes. This module covers automata theory in depth, describes the\\nChomsky hierarchy, and introduces various advanced topics including automata structures, automata on infinite words, automata on trees and the learnability of classes of regular languages from queries and positive data.\","
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4232 Theory of Computation\""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5478\" : {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5478\","
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Intelligent Robots: Algorithms and Systems\","
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.\","
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4278\","
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)\""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3210\" : {"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3210\","
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel Computing\","
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance\\nand scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.\","
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 or CG2007 or CG2028 or EE2024 or EE2028\""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5477\" : {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5477\","
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"3D Computer Vision\","
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"One of the most important capability for robots such as\\nself-driving cars, domestic mobile robots, and drones to\\nachieve full autonomy is the ability to perceive the 3D\\nenvironment. A camera is an excellent choice as the main\\nsensory device for robotic perception because it produces\\ninformation-rich images, and is lightweight, low cost and\\nrequires little or no maintenance. This module covers the\\nmathematical concepts and algorithms that allow us to\\nrecover the 3D geometry of the camera motions and the\\nstructures in its environment. Topics include projective\\ngeometry, camera model, one-/two-/three-/N-View\\nreconstructions and stereo, generalized cameras and nonrigid structure-from-motion.\","
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4277\","
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1101R or MA1311 or MA1506 or MA1508E) and\\n(CS2040 or its equivalent)\""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6203\" : {"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6203\","
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Topics in Database Systems\","
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module covers the topics in data base management systems with current research and industrial interests and importance. Examples of topics include multimedia data management, object-oriented database technology, data warehousing and data mining, integration of heterogeneous and legacy systems.\","
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3223\""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3211\" : {"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3211\","
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Parallel and Concurrent Programming\","
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"A concurrent system consists of a set of processes that executes simultaneously and that may collaborate by communicating and synchronising with one another. Examples of concurrent systems are parallel programs that describe sets of collaborating processes. This module introduces the design, development and debugging of parallel programs. It will build on the concurrency concepts gained from the Operating Systems module. It covers concepts and modelling tools for specifying and reasoning (about the properties of) concurrent systems and parallel programs. It also covers principles of performance analysis, asynchronous and asynchronous parallel programming, and engineering concurrent systems and parallel programs.\","
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2106 or CG2271\""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5234\" : {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5234\","
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Algorithms at Scale\","
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course presents advanced techniques for the design and analysis of algorithms and data structures, with emphasis on efficiency and scalability. It will cover a variety of algorithmic topics that arise when coping with very large data sets. How do you design algorithms that scale well? How do you process streaming data? How do you construct algorithms that run efficiently on modern hardware? The goal of this module is to cover modern tools and techniques in algorithm design.\","
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3230\""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5476\" : {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5476\","
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"IoT Security\","
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the advent of the Internet-of-Things, the computing\\nparadigm is quickly changing from the traditional cyber\\ndomain to cyber-physical domain. This is made possible\\nfrom devices that are equipped with sensors and actuators\\nthat interact with the physical world. In this module, we will\\ninvestigate how such sensing systems affect the notion of\\ncomputer security. We will also explore the state-of-the-art\\nresearch in the areas of sensing systems and how they\\ncan provide benefits to the security of the Internet-ofThings. Furthermore, this module will also investigate how\\nan attacker may compromise the sensing information to\\nexploit security vulnerabilities in these systems.\","
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS4276\","
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CG3002 or CG4002 or CS3237\""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5233\" : {"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5233\","
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Simulation and Modelling Techniques\","
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide students with a working knowledge of applying\\nsimulation techniques to model, simulate and study complex systems. It covers techniques in simulation model design, model execution, and model analysis. Students will have hands-on experience using a simulation package. The module will also introduce concepts of parallel and distributed simulation, and high level architecture.\","
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4231 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5232\" : {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5232\","
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Formal Specification and Design Techniques\","
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The primary role of the formal specification is to provide a precise and unambiguous description of a computer system. A formal specification allows the system designer to verify important properties and detect design error before system development begins. The objective of this course is to study various formal specification and design techniques for modelling (1) object-oriented systems, (2) real-time distributed systems, and (3) concurrent reactive systems. The course will focus on the state-based notations Z/Object-Z, event-based notation CSP/Timed-CSP. Graphical modelling notations, such as StateChart and UML (Unified Modelling Language) will also be addressed.\","
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(MA1100 or (CS1231 or its equivalent)) and CS2103\""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5231\" : {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5231\","
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Systems Security\","
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces fundamental notions and requirements in computer system security and the mechanisms that provide security in various systems and applications. It aims to teach students the security perspective of popular computer systems, such as desktop systems, mobile systems, and web-based systems. Its topics include software security, operating system security, mobile security, web security, trusted platforms, and auditing and forensic analysis.\","
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3235 Computer Security\""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6285\" : {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6285\","
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Bridging System and Deep Learning\","
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Co-design of system and machine learning algorithms has led to faster and more scalable machine learning systems.  The module aims to expose students to recent state-of-the-art co-design techniques to make deep learning run faster, touching on both system research and AI research. The specific topics include distributed deep learning, large-batch training, second-order optimization, asynchronous algorithms, neural network compression, federated machine learning, memory-efficient optimizers, model parallelism, efficient communication library, low-precision training.\","
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Variable, depend on the choice of topics or departmental approval.\","
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS5242 and CS3210\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2113T\" : {"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2113T\","
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering \u0026 Object-Oriented Programming\","
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.\","
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)\","
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2040C or ((CS2030 or its equivalent) and CS2040/S)\""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6283\" : {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6283\","
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Trustworthy Machine Learning\","
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"Machine learning is increasingly being used in critical decision-making systems, yet is not reliable in the presence of noisy, biased, and adversarial data. Can we trust machine learning models?  This module aims to answer this question, by covering the fundamental aspects of reasoning about trust in machine learning, including its robustness to adversarial data and model manipulations, the privacy risks of machine learning algorithms for sensitive data, the transparency measures for machine learning, and fairness in AI. It covers the algorithms that analyze machine learning vulnerabilities; and techniques for building reliable and trustworthy machine learning algorithms.\","
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Variable, depend on the choice of topics or departmental approval.\","
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3244 Machine Learning\""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS6280\" : {"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS6280\","
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Topics in Computer Science: Systems Design for Next Gen Hardware\","
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"With the end of Moore\u0027s Law, we are witnessing a paradigm shift in computing platforms towards the inclusion of specialized hardware accelerators. In this module, we will explore the designs of system software on these emerging computing hardware platforms. We will first take a broad overview of existing and upcoming specialized hardware devices, including GPU, TPU, FPGA, SmartNICs, reconfigurable network switches, and other specialized ASICs. We will then discuss various topics in systems design for these new hardware platforms, e.g., OS constructs, abstractions, programming models, resource sharing and multiplexing, scheduling, co-designing with applications and algorithms, and joint processing with CPU.\","
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2100 Computer Organization and CS2106 Introduction to Operating Systems\""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CSA6102\" : {"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CSA6102\","
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cultural Studies in Asia\","
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module will examine the various areas of research in Cultural Studies conducted by Asian scholars or scholars locating their research in Asia. It will examine the histories, concepts and analytic strategies that these scholars deploy in the analysis of the changing cultural landscapes and practices in contemporary Asia. Abiding themes of the module will be the conceptual constitution of the idea of \u0027Asia\u0027, the emergence of \u0027trans-Asian\u0027 practices and the possibility of \u0027pan-Asian\u0027 identities that these trans-location practices might engender.\","
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"MA1521\" : {"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"MA1521\","
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Calculus for Computing\","
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides a basic foundation for calculus and its related subjects required by computing students. The objective is to train the students to be able to handle calculus techniques arising in their courses of specialization. In addition to the standard calculus material, the course also covers simple mathematical modeling techniques and numerical methods in connection with ordinary differential equations. \\n\\n\\n\\nMajor topics: \\n\\nPreliminaries on sets and number systems. \\n\\nCalculus of functions of one variable and applications. \\n\\nSequences, series and power series.   \\n\\nFunctions of several variables. Extrema.\\n\\nFirst and second order differential equations. \\n\\nBasic numerical methods for ordinary differential equations.\","
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"Students reading a primary major in Mathematics/Applied Mathematics/Quantitative Finance/Data Science and Analytics, MA1102R, MA1312, MA1505, MA1507, MA2501, FoE students, YSC1216\","
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"GCE ‘A’ Level Mathematics or H2 Mathematics or H2 Further Mathematics or MA1301 or MA1301X\""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3236R\" : {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3236R\","
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Introduction to Information Theory\","
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"1\","
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.\","
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"same as CS3236\","
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.\""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5229\" : {"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5229\","
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Computer Networks\","
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course covers advanced fundamental principles of computer networks and techniques for networking. The goal of this course is to teach these fundamentals/techniques that will remain important and relevant regardless of the hot topics in networks and networking. Briefly, the topics include advanced network architecture and design principles, protocol mechanisms, implementation principles and software engineering practices, network algorithmic, network simulation techniques and tools, performance analysis and measurement, and protocol specification/verification techniques.\","
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS4226 Internet Architecture or EE4210 Computer Communications Networks II\""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2113\" : {"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2113\","
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering \u0026 Object-Oriented Programming\","
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.\","
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)\","
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2040C or ((CS2030 or its equivalent) and CS2040/S)\""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3203\" : {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3203\","
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering Project\","
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"8\","
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module provides students with hands-on experience in\\nworking in project groups through a complete SDLC to\\ndevelop a well-designed, well-tested, large-scaled software\\nsystem. The students will apply the current best software\\nengineering practices on the analysis, design,\\nimplementation, and testing of software system. Through\\nthe project, students will practise analysis of user’s needs,\\nformulation of computing requirements to meet the user’s\\nneeds, modelling and design of the computer systems\\naccording to the requirements, evaluation of the design,\\nefficient implementation of software components, system\\nintegration, software version control, and rigorous testing.\","
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS3201, CS3202\","
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2103/T or CS2113/T)\""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5228\" : {"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5228\","
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Knowledge Discovery and Data Mining\","
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This course introduces fundamental principles behind data mining and efficient techniques for mining large databases. It provides an overview of the algorithmic aspect of data mining: its efficiency (high-dimensional database indexing, OLAP, data reduction, compression techniques) and effectiveness (machine learning involving greedy search, branch and bound, stochastic search, parameter optimisation). Efficient techniques covered include association rules mining (Apriori algorithm, correlation search, constrained association rule discovery), classifier induction (decision trees, RainForest, SLIQ; Support vector machine; Naive Bayesian; classification based on association / visualisation), cluster analysis (k-means, k-mediods, DBSCAN, OPTICS, DENCLUE, STING, CLUSEQ, ROCK etc), and outliers/deviants detection (LOF, Distance-based outlier etc).\","
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS2102 and CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5346\" : {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5346\","
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Information Visualisation\","
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to bring together individual pedagogies\\nof design, information, and computation, for teaching the\\nanalysis and representation of data for visualisation.\\nStudents will learn the methodology of developing and\\nevaluating an information visualisation solution, common\\ninformation visualisation techniques (such as those for\\ntopical, spatial, hierarchical, temporal, and relational data),\\nand methods for scaling up interactive visualisation with big\\ndata. After the module, students should be able to use the\\nexisting visualisation tools for building useful, interactive,\\ninformation visualisation to facilitate complex data\\nanalytics, exploration, understanding, and pattern\\ndiscovery.\","
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2040 or its equivalent) and CS2102 and CS3240 and \\n(EE2012/A or ST1131/A or ST1232 or DSC2008 or ST2132 or ST2334)\""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5224\" : {"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5224\","
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Cloud Computing\","
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module aims to provide an overview of the design, management and application of cloud computing. The topics include managing virtualization, cloud computing environments, cloud design patterns and use cases, data centre architectures and technologies, cloud services fulfillment and assurance, orchestration and automation of cloud resources, cloud capacity management, cloud economics, case studies.\","
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : null"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5223\" : {"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5223\","
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Distributed Systems\","
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The topic of Distributed Systems is now garnering increasing importance, especially with the advancement in technology of the Internet and WWW. The aim of this module is to provide students with basic concepts and principles of distributed operating systems, interprocess communications, distributed file systems, shared data, and the middleware approach. The module is taught in seminar style, and several case studies are included, e.g. CORBA.   Topics: Introduction - Characteristics of Distributed Systems; Process Management Communication in Distributed Systems; Distributed Synchronisation; Distributed Real-time Systems; File Systems; Naming Security; Fault Tolerant Distributed Systems; Distributed Simulation; WWW as an application of Distributed System.\","
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3211 Parallel and Concurrent Programming\""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5344\" : {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5344\","
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Big-Data Analytics Technology\","
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module analysis of data which can not fit in main memory and application of such analysis to web applications. The topics covered include: map-reduce as a tool for creating parallel algorithms that operate on very large amount of data, similarity search, data-streaming processing, search engine techonology, clustering of very large, high-dimensional datasets.\","
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"BT5110 (Data Management and Warehousing) or database related modules; programming experience (with data structures and algorithms) is required\""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5222\" : {"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5222\","
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Advanced Computer Architecture\","
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The aim of this module is to introduce the state-of-the-art architectural advances underlying the current generation of computing systems. A review of pipelined processor design and hierarchical memory design is followed by advanced topics including exploitation of instruction-level parallelism through dynamic instruction scheduling and speculation, exploiting thread-level parallelism through\\nmultiprocessors, and optimizations for memory and storage subsystems. Throughout the module, particular emphasis will be placed on cost-performance-power-reliability trade-offs in designing the different architectural components.\","
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3220 Computer Architecture or CS4223 Multi-core Architecture\""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS5340\" : {"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS5340\","
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Uncertainty Modelling in AI\","
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.\","
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3243 and \\n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))\""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3281\" : {"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3281\","
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Thematic Systems Project I\","
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is the first part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\\nfirst part focuses on the analysis of the real-world problems, formulation of the computing requirements of the desired solution that meets the user’s needs, design of the computer systems according to the requirements, and evaluation of the design.\","
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"(CS2103 or its equivalent) and have passed at least one primary module in a CS focus area. Student selection process will be enforced.\""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS3282\" : {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS3282\","
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Thematic Systems Project II\","
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"This module is the second part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\\nsecond part focuses on the development of algorithms required for the systems, implementation and testing of the algorithms and the systems, and evaluation of the systems according to the users’ requirements.\","
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : null,"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"CS3281 and have passed at least two primary modules in a CS focus area. Student selection process will be enforced.\""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 1138
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.GradPadStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing GradPad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPadStorage gradPadStorage \u003d new JsonGradPadStorage(userPrefs.getGradPadFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s GradPad and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * The data from the sample GradPad will be used instead if {@code storage}\u0027s GradPad is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * or an empty GradPad will be used instead if errors occur when reading {@code storage}\u0027s GradPad."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPadOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ReadOnlyGradPad initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            gradPadOptional \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!gradPadOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample GradPad\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            initialData \u003d gradPadOptional.orElseGet(SampleDataUtil::getSampleGradPad);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            initialData \u003d new GradPad();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            initialData \u003d new GradPad();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradPad\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.info(\"Starting GradPad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping GradPad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 11,
      "mhdsyfq": 4,
      "-": 160,
      "yan-soon": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(windowWidth \u003e 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(windowHeight \u003e 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(config !\u003d null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HttpUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpClient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.net.http.HttpResponse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Utilities for HTTP requests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class HttpUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final HttpUtil SINGLETON \u003d new HttpUtil();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Makes a HTTP GET request to a URL and returns the response as a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param urlString The URL to send the GET request to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The HTTP response as a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException an error occurs while making the request."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        HttpClient client \u003d HttpClient.newHttpClient();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        HttpRequest request \u003d HttpRequest.newBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .timeout(Duration.ofSeconds(3))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .uri(URI.create(urlString))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .GET()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                      .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            HttpResponse\u003cString\u003e response \u003d client.send(request, HttpResponse.BodyHandlers.ofString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return response.body();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException | InterruptedException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if the {@code moduleCode} contains the {@code charSequence}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   Ignores case, a partial match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"ABc\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *       containsCharSequenceIgnoreCase(\"ABc\", \"AB\") \u003d\u003d true // partial match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param moduleCode cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param charSequence cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static boolean containsCharSequenceIgnoreCase(String moduleCode, String charSequence) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(charSequence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String preppedModuleCode \u003d moduleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String preppedCharSequence \u003d charSequence.trim().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(!preppedCharSequence.isEmpty(), \"CharSequence parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        checkArgument(preppedCharSequence.split(\"\\\\s+\").length \u003d\u003d 1, \"CharSequence parameter should be a \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return preppedModuleCode.contains(preppedCharSequence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Ensures that the charSequence is in the correct String format as the module code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @param charSequence cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @return the upper case of the module code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static String ignoreCase(String charSequence) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String preppedCharSequence \u003d charSequence.trim().toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        checkArgument(!preppedCharSequence.isEmpty(), \"CharSequence parameter cannot be empty\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        checkArgument(preppedCharSequence.split(\"\\\\s+\").length \u003d\u003d 1, \"CharSequence parameter should be a \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return preppedCharSequence;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 12,
      "mhdsyfq": 16,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the GradPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @see seedu.address.model.Model#getGradPad()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    ReadOnlyGradPad getGradPad();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "mhdsyfq": 1,
      "-": 41,
      "yan-soon": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.YesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.parser.GradPadParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_SYNTAX \u003d \"\\n\\nType:\\tyes\u003cEnter\u003e\\tto confirm \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            + \"OR\\nType:\\tno\u003cEnter\u003e\\t\\tto cancel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION_CANCEL \u003d \"Command aborted - \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final GradPadParser gradPadParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Command stalledCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private String stalledCommandText;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(model !\u003d null \u0026\u0026 storage !\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gradPadParser \u003d new GradPadParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private CommandResult handleStall(Command command, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (command instanceof ClearCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            assignStalledComponents(command, commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(ClearCommand.MESSAGE_CONFIRMATION + MESSAGE_CONFIRMATION_SYNTAX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Module moduleToBeDeleted \u003d ((DeleteCommand) command).getModuleToDelete(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            assignStalledComponents(command, commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(DeleteCommand.MESSAGE_CONFIRMATION + moduleToBeDeleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + MESSAGE_CONFIRMATION_SYNTAX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private void assignStalledComponents(Command command, String commandText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        stalledCommand \u003d command;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        stalledCommandText \u003d commandText;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        boolean isCancel \u003d stalledCommand !\u003d null \u0026\u0026 !commandText.equalsIgnoreCase(\"yes\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (isCancel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stalledCommand \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CommandResult(MESSAGE_CONFIRMATION_CANCEL"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    + String.format(\"\\\"%s\\\"\", stalledCommandText));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Command command \u003d gradPadParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        boolean isConfirmation \u003d command instanceof YesCommand \u0026\u0026 stalledCommand !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (command.requiresStall()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return handleStall(command, commandText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (isConfirmation) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            command \u003d stalledCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stalledCommand \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            storage.saveGradPad(model.getGradPad());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getGradPad();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getGradPadFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "mhdsyfq": 39,
      "-": 72,
      "yan-soon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ModuleInfoSearcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.NusmodsDataManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Logic for searching a module from the Computer Science curriculum."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class ModuleInfoSearcher {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_FAILED_TO_FIND_MODULE \u003d \"Failed to find module\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_EMPTY_SEARCH \u003d \"Search is empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private NusmodsDataManager dataManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModuleInfoSearcher() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        dataManager \u003d new NusmodsDataManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Perform search function on NUSMods using dataManager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @param moduleCode from SearchCommandParser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @return ModuleInfo of the module searched."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @throws CommandException if an error occurs during the search process."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModuleInfo searchModule(String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo moduleInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_SEARCH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            Optional\u003cModuleInfo\u003e moduleDetails \u003d dataManager.getModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            if (moduleDetails.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                throw new CommandException(MESSAGE_FAILED_TO_FIND_MODULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            moduleInfo \u003d moduleDetails.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        } catch (NusmodsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Adds a Module to the GradPad."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the GradPad. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_CREDITS + \"MODULAR CREDITS \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_CODE + \"CS1231 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_TAG + \"core \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the GradPad\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public AddCommand(Module module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 3,
      "-": 40,
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckMcCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Displays the cumulative Modular Credits of the modules in the GradPad."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class CheckMcCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkmc\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total MC has been calculated: %1$d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ObservableList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private int totalMc \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        modules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            totalMc +\u003d Integer.parseInt(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, totalMc));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Clears the GradPad."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"GradPad has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION \u003d \"Are you sure you wish to clear all modules?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.setGradPad(new GradPad());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 7,
      "-": 19,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Checks if the command requires confirmation from the user and needs to be stalled."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return generally returns false as most commands do not require confirmation from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 8,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return Objects.hash(feedbackToUser, exit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Deletes a Module identified using it\u0027s displayed index from the GradPad."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \": Deletes the module identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_CONFIRMATION \u003d \"Are you sure you wish to delete the following\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            + \" module?\\n\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves the module to be deleted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param model The Model which the command operates on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return The module to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws CommandException if the target index given is not within the bounds of the module list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Module getModuleToDelete(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module moduleToDelete \u003d getModuleToDelete(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean requiresStall() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 23,
      "-": 41,
      "yan-soon": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Edits the details of an existing module in the GradPad."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"by the index number used in the displayed module list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"[\" + PREFIX_CODE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"[\" + PREFIX_CREDITS + \"MODULAR CREDITS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + PREFIX_CREDITS + \"4 \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the GradPad.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param index of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditCommand(Index index, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!moduleToEdit.isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode updatedCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModularCredits updatedCredits \u003d editModuleDescriptor.getModularCredits()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .orElse(moduleToEdit.getModularCredits());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new Module(updatedCode, updatedCredits, updatedTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private ModuleCode code;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private ModularCredits credits;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setModuleCode(toCopy.code);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setModularCredits(toCopy.credits);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return CollectionUtil.isAnyNonNull(code, credits, tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setModuleCode(ModuleCode code) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setModularCredits(ModularCredits credits) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public Optional\u003cModularCredits\u003e getModularCredits() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    \u0026\u0026 getModularCredits().equals(e.getModularCredits())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 5,
      "-": 135,
      "yan-soon": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting GradPad as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 17,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * Finds and lists all modules in GradPad whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all modules whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T CS1101s CS2030\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final ModuleCodeContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a FindCommand to filter module(s) based on the specified predicate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param predicate the predicate used to filter relevant module(s)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public FindCommand(ModuleCodeContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW, model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 6,
      "-": 34,
      "yan-soon": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String ADD_COMMAND \u003d \"add c/CS1231 cr/4 t/Core : Adds module \u0027CS1231\u0027\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"with 4 credits and a \u0027Core\u0027 tag to it.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String HELP_COMMAND \u003d \"help : Displays the help guide.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list : Displays list of current modules stored\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String EDIT_COMMAND \u003d \"edit 1 c/CS1231 cr/4 :\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"Replaces the current module at index 1 with module \u0027CS1231\u0027 with 4 credits.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String FIND_COMMAND \u003d \"find CS1231 : Searches for the \u0027CS1231\u0027 module.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete 1 : Deletes the module at index 1.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String CHECKMC_COMMAND \u003d \"checkmc : Checks the current total credits achieved by all modules.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String EXIT_COMMAND \u003d \"exit : exits GradPad.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d HELP_COMMAND + \"\\n\\n\" + ADD_COMMAND + \"\\n\\n\" + LIST_COMMAND"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"\\n\\n\" + EDIT_COMMAND + \"\\n\\n\" + DELETE_COMMAND + \"\\n\\n\" + FIND_COMMAND + \"\\n\\n\" + CHECKMC_COMMAND"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"\\n\\n\" + EXIT_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "yan-soon": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Lists all modules in GradPad to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "mhdsyfq": 1,
      "-": 20,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RequiredCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.INTERNSHIP_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.ITPROF_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MATHANDSCI_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FOUNDATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_ITPROF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_MATHANDSCI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SCIENCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_FOUNDATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_ITPROF;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_MATHANDSCI;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_SCIENCE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.RequiredCommandStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"required\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e currentModules;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String leftOverModules \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommandStorage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the leftOverModules attribute of a RequiredCommand object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return leftOverModules of type String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public String getLeftOverModules() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return leftOverModules;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the attribute storage of a RequiredCommand object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return storage attribute of type RequiredCommandStorage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public RequiredCommandStorage getStorage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets up the storage attribute with all the relevant modules from various fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setStorage() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage \u003d new RequiredCommandStorage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredFoundation(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredITprof(ITPROF_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredMathAndScience(MATHANDSCI_PATH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredScience(SCIENCE_PATH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredInternship(INTERNSHIP_PATH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Retrieves the currentModules attribute of an Required Command object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return currentModules attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getCurrentModules() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return currentModules;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the argument modules as the attribute currentModules."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules target argument of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setCurrentModules(ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        currentModules \u003d modules;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Checks if a Module already exists in a given Module List."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param module Module that you wish to check."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules Module List that you wish to check against."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return True if the module already exists, false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public boolean doesModuleAlreadyExist(Module module, ObservableList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module mod : modules) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (module.isSameModule(mod)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules against the given"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * modules argument and marks out any undone Modules. Displays a successMessage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * if all modules are done, and a failMessage if there are left over modules."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param modules List of Modules of a certain category (Eg. Foundation, IT Professsionalism)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param failMessage Fail message for particular category of Modules."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param successMessage Success message for particular category of Modules."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareModules(ObservableList\u003cModule\u003e modules, String failMessage, String successMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        boolean areModulesCleared \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (!doesModuleAlreadyExist(module, currentModules)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                areModulesCleared \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (areModulesCleared) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d successMessage + \"\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d failMessage + modulesToAdd + \"\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        leftOverModules +\u003d \"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules and marks out"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * any undone Science Modules."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareScience(ObservableList\u003cModule\u003e requiredScience) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        boolean isScienceCleared \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : requiredScience) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (doesModuleAlreadyExist(module, currentModules)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                leftOverModules +\u003d MESSAGE_SUCCESS_SCIENCE + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                isScienceCleared \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (!isScienceCleared) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_SCIENCE + \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        leftOverModules +\u003d \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Cross references the user\u0027s current list of Modules and marks out"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * any undone Internship Modules. Also calculates current MC score"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * achieved from Internship Modules."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareInternship(ObservableList\u003cModule\u003e requiredInternship) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        int modularScore \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder leftOverInternship \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : requiredInternship) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (doesModuleAlreadyExist(module, currentModules)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                int modularCredits \u003d Integer.parseInt(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                modularScore +\u003d modularCredits;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                leftOverInternship.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } if (modularScore \u003c 12) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            String modScore \u003d \" You are currently at \" + modularScore + \" MCs. \";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_INTERN_1 + modScore + MESSAGE_INTERN_2 + leftOverInternship;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            leftOverModules +\u003d MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets up the reference modules and the current modules in gradPad and compares all the modules."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return a CommandResult displaying all the undone modules."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            currentModules \u003d model.getGradPad().getModuleList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setStorage();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredFoundation \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredITprof \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredMathAndScience \u003d storage.getRequiredMathAndScience();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredScience \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            ObservableList\u003cModule\u003e requiredInternship \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredFoundation, MESSAGE_FOUNDATION, MESSAGE_SUCCESS_FOUNDATION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredITprof, MESSAGE_ITPROF, MESSAGE_SUCCESS_ITPROF);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareModules(requiredMathAndScience, MESSAGE_MATHANDSCI, MESSAGE_SUCCESS_MATHANDSCI);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareScience(requiredScience);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            compareInternship(requiredInternship);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(leftOverModules);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScienceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ScienceCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"science\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"These are the Science Modules that you can take:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There was an error loading the required modules :(\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e scienceModules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the storage attribute of a given ScienceCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return storage attribute of type Optional\u003cReadOnlyGradPad/\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getScienceModules() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return scienceModules;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the storage attribute with Science Modules."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When the path in invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModules(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        scienceModules \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Goes through the storage attribute and parses all Science Modules, to be read by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return CommandResult Object with the relevant Science Modules or Failure Message if modules"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * are absent."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            setScienceModules(SCIENCE_PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            for (Module module : scienceModules) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String moduleToAdd \u003d module.getModuleCode() + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + modulesToAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Search for a module to display its module details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Module Code matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Search for a module with \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"the specified ModuleCode (case-insensitive) and display all the module details in the \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"Command Line Interface\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"Parameters: MODULE CODE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module Info for: %1$s \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"Module Title: %2$s \\n\\n\" + \"Module Description: \\n%3$s \\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            + \"Preclusion: %4$s\\n\\n\" + \"Prerequisite: %5$s\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Creates a SearchCommand to search for a module from the Computer Science"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * curriculum {@code Module}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public SearchCommand(String moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfoSearcher moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo searchResult \u003d moduleInfoSearcher.searchModule(moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String searchDisplay \u003d String.format(MESSAGE_SUCCESS, searchResult.getModuleCode(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                searchResult.getTitle(), searchResult.getDescription(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                searchResult.getPreclusion(), searchResult.getPrerequisite());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new CommandResult(searchDisplay);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((SearchCommand) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/YesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Confirms a command that requires confirmation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class YesCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static final String NO_CONFIRMATION_MESSAGE \u003d \"There is nothing to confirm!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new CommandResult(NO_CONFIRMATION_MESSAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_CREDITS, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE, PREFIX_CREDITS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode code \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModularCredits credits \u003d ParserUtil.parseModularCredits(argMultimap.getValue(PREFIX_CREDITS).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d new Module(code, credits, tagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new AddCommand(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 43,
      "yan-soon": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"cr/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_CREDITS, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_CODE).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            editModuleDescriptor.setModularCredits("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ParserUtil.parseModularCredits(argMultimap.getValue(PREFIX_CREDITS).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editModuleDescriptor::setTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new EditCommand(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 62,
      "yan-soon": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new FindCommand(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradPadParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.CheckMcCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.RequiredCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.ScienceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.YesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class GradPadParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case CheckMcCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new CheckMcCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        case RequiredCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new RequiredCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        case ScienceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return new ScienceCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        case YesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new YesCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "mhdsyfq": 8,
      "-": 75,
      "yan-soon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses a {@code String code} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ModuleCode parseModuleCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new ModuleCode(trimmedCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses a {@code String credits} into a {@code ModularCredits}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ModularCredits parseModularCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!ModularCredits.isValidMC(trimmedCredits)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new ParseException(ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new ModularCredits(trimmedCredits);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 74,
      "yan-soon": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            String moduleCode \u003d StringUtil.ignoreCase(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return new SearchCommand(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                    SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Wraps all data at the GradPad level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPad implements ReadOnlyGradPad {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Creates a GradPad using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad(ReadOnlyGradPad toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert modules !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Resets the existing data of this {@code GradPad} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData(ReadOnlyGradPad newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the GradPad."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Adds a module to the GradPad."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module must not already exist in the GradPad."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert m !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code target} must exist in the GradPad."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the GradPad."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Removes {@code key} from this {@code GradPad}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code key} must exist in the GradPad."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert key !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                || (other instanceof GradPad // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 modules.equals(((GradPad) other).modules));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 118,
      "mhdsyfq": 2,
      "yan-soon": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Sets the user prefs\u0027 GradPad file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setGradPadFilePath(Path gradPadFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces GradPad data with the data in {@code gradPad}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setGradPad(ReadOnlyGradPad gradPad);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /** Returns the GradPad */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ReadOnlyGradPad getGradPad();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the GradPad."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module must exist in the GradPad."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code module} must not already exist in the GradPad."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code target} must exist in the GradPad."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the GradPad."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 26,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Represents the in-memory model of the GradPad data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final GradPad gradPad;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Initializes a ModelManager with the given GradPad and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ModelManager(ReadOnlyGradPad gradPad, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireAllNonNull(gradPad, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        logger.fine(\"Initializing with GradPad: \" + gradPad + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad \u003d new GradPad(gradPad);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.gradPad.getModuleList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this(new GradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return userPrefs.getGradPadFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(gradPadFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(gradPadFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradPad \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPad(ReadOnlyGradPad gradPad) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad.resetData(gradPad);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return gradPad.hasModule(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert target !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.removeModule(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assert module !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        gradPad.addModule(module);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.setModule(target, editedModule);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * {@code versionedGradPad}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad.equals(other.gradPad)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 35,
      "mhdsyfq": 6,
      "-": 111,
      "yan-soon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyGradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Unmodifiable view of a GradPad"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public interface ReadOnlyGradPad {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Path gradPadFilePath \u003d Paths.get(\"data\" , \"gradpad.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        setGradPadFilePath(newUserPrefs.getGradPadFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPadFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        requireNonNull(gradPadFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPadFilePath \u003d gradPadFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                \u0026\u0026 gradPadFilePath.equals(o.gradPadFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Objects.hash(guiSettings, gradPadFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + gradPadFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModularCredits.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module\u0027s no. of modular credits in the GradPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMC(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModularCredits {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            \"ModularCredits should only contain numbers, and it should be either 1 or 2 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs a {@code ModularCredits}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param credits A valid value of modular credits."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModularCredits(String credits) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        checkArgument(isValidMC(credits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if a given string is a valid no. of modular credits."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static boolean isValidMC(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModularCredits // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 value.equals(((ModularCredits) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module in the GradPad."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModuleCode code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ModularCredits credits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Module(ModuleCode code, ModularCredits credits, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireAllNonNull(code, credits, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModularCredits getModularCredits() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if both modules of the same module code have at least one other field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 (otherModule.getModularCredits().equals(getModularCredits()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if both modules have the same fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModule.getModularCredits().equals(getModularCredits())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 otherModule.getTags().equals(getTags());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Objects.hash(code, credits, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        builder.append(getModuleCode())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .append(\" ModularCredits: \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .append(getModularCredits())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents a Module\u0027s module code in the GradPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            \"Module codes should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    A module code must have 2 or more characters as its prefix followed by 1 or more digits as its numerical"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    code. It can optionally end with 1 or more characters as a suffix. It is also case-insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}]{2,}\\\\d+[\\\\p{Alpha}]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 59,
      "mhdsyfq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCodeContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code module code} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new ModuleCodeContainsKeywordsPredicate to test whether a module code matches the contains"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * the keywords in the specified list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param keywords list of keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleCodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert(keywords !\u003d null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharSequenceIgnoreCase(module.getModuleCode().moduleCode,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof ModuleCodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleCodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 30,
      "mhdsyfq": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * updating of modules uses Module#isSameModule(Module) for equality so as to ensure that the module being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueModuleList. However, the removal of a module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * uses Module#equals(Object) so as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                || (other instanceof UniqueModuleList// instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10,
      "mhdsyfq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Signals that the operation is unable to find the specified Module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 5,
      "mhdsyfq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a Tag in the GradPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains utility methods for populating {@code GradPad} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2103T\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS1010\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"ITProf\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2105\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"Foundation\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"ST2334\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"MathAndSciences\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            new Module(new ModuleCode(\"CS2107\"), new ModularCredits(\"4\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                       getTagSet(\"BreadthAndDepth\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static ReadOnlyGradPad getSampleGradPad() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad sampleAb \u003d new GradPad();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "silvernitro": 6,
      "mhdsyfq": 13,
      "-": 28,
      "yan-soon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/DataFetcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public abstract class DataFetcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String DATA_FILE_PATH \u003d \"modules.json\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MODULE_SUMMARY_LIST_URL \u003d \"https://api.nusmods.com/v2/2020-2021/moduleList.json\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String MODULE_INFO_URL \u003d \"https://api.nusmods.com/v2/2020-2021/modules/%s.json\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    abstract void fetchAndSaveModules() throws NusmodsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    abstract Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/DataFetcherManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.HttpUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Handles API requests made by GradPad to the NUSMods public API to retrieve module data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DataFetcherManager extends DataFetcher {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String[] MODULE_FILTER_KEYWORDS \u003d {\"CS\", \"MA1521\", \"MA1101R\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DataFetcher.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final HttpUtil httpUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final String dataFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        httpUtil \u003d HttpUtil.SINGLETON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFilePath \u003d DataFetcher.DATA_FILE_PATH;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager(HttpUtil httpUtil) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(httpUtil !\u003d null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.httpUtil \u003d httpUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFilePath \u003d DataFetcher.DATA_FILE_PATH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    DataFetcherManager(HttpUtil httpUtil, String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(httpUtil !\u003d null \u0026\u0026 !filePath.trim().isEmpty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.httpUtil \u003d httpUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.dataFilePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches a list of all NUS module summaries, then fetches module info for all CS modules (only) and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * saves them to a JSON file locally."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data from NUSMods API or while saving data."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchAndSaveModules() throws NusmodsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e moduleSummaries \u003d fetchModuleSummaryList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e filteredModules \u003d filterModuleSummaries(moduleSummaries, MODULE_FILTER_KEYWORDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d generateModuleInfoMap(filteredModules);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            JsonUtil.saveJsonFile(moduleInfoMap, Paths.get(getDataFilePath()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches the module info for a single module from the NUSMods API."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code of the module to fetch data for."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The fetched data in a {@code ModuleInfo} object or {@code Optional.empty()} if data not found."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data or if data does not contain valid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code ModuleInfo}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching module info for: \" + moduleCode);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String jsonResponse \u003d httpUtil.makeGETRequest(String.format(MODULE_INFO_URL, moduleCode));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return Optional.of(JsonUtil.fromJsonString(jsonResponse, ModuleInfo.class));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches a list of all modules and their summaries from the NUSMods API."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return A list of {@code ModuleSummary} objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while fetching data or if the data does not contain valid"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * {@code ModuleSummary}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private List\u003cModuleSummary\u003e fetchModuleSummaryList() throws NusmodsException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching list of module summaries from NUSMods API...\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String jsonResponse \u003d httpUtil.makeGETRequest(MODULE_SUMMARY_LIST_URL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return mapper.readValue(jsonResponse, new TypeReference\u003cList\u003cModuleSummary\u003e\u003e(){});"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Filters a list of {@code ModuleSummary} objects\u0027 module codes by a list of keywords."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param modules The list of ModuleSummary objects to filter."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param keywords The keywords to match in each ModuleSummary object\u0027s module code."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The filtered list of ModuleSummary objects where every one of their module codes contains any"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * one (or more) of the keywords specified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    List\u003cModuleSummary\u003e filterModuleSummaries(List\u003cModuleSummary\u003e modules, String... keywords) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // checks if a module summary\u0027s module code contains ANY of the filter keywords"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Predicate\u003cModuleSummary\u003e moduleCodePredicate \u003d module -\u003e Arrays.stream(keywords)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                 .anyMatch(keyword -\u003e module.getModuleCode().contains(keyword));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return modules.stream().filter(moduleCodePredicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Fetches module info for all modules given a list of {@code ModuleSummary} objects, then maps each"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * module\u0027s code to its {@code ModuleInfo} object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleSummaries The list of {@code ModuleSummary} objects to fetch info for."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return A mapping of module codes to their respective {@code ModuleInfo}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Map\u003cString, ModuleInfo\u003e generateModuleInfoMap(List\u003cModuleSummary\u003e moduleSummaries) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        logger.info(\"Fetching module info for all modules...\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (ModuleSummary summary : moduleSummaries) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            String moduleCode \u003d summary.getModuleCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                // delay each API call to adhere to rate limits"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                Thread.sleep(150);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                Optional\u003cModuleInfo\u003e info \u003d fetchModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                info.ifPresent(moduleInfo -\u003e moduleInfoMap.put(moduleCode, moduleInfo));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (NusmodsException | InterruptedException ex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                logger.warning(\"Module info not found for: \" + moduleCode);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleInfoMap;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getDataFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/ModuleInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents jackson-friendly module information from NUSMods."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCredit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCredit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModuleInfo.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getModuleCredit().equals(getModuleCredit())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleInfo.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 equalsIfNotNull(otherModuleInfo.getPreclusion(), getPreclusion())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 equalsIfNotNull(otherModuleInfo.getPrerequisite(), getPrerequisite());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private boolean equalsIfNotNull(Object o1, Object o2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return o1 \u003d\u003d null || o2 \u003d\u003d null || o1.equals(o2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Objects.hash(moduleCode, title, moduleCredit, description, preclusion, prerequisite);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleCode() + \" \" + getTitle() + \" \" + getModuleCredit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/ModuleSummary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Represents jackson-friendly module summaries from NUSMods."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "@JsonIgnoreProperties(ignoreUnknown \u003d true)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleSummary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private List\u003cInteger\u003e semesters;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public List\u003cInteger\u003e getSemesters() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return semesters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (!(other instanceof ModuleSummary)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleSummary otherModuleSummary \u003d (ModuleSummary) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return otherModuleSummary.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleSummary.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                       \u0026\u0026 otherModuleSummary.getSemesters().equals(getSemesters());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return Objects.hash(moduleCode, title, semesters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleCode() + \" \" + getTitle() + \" \" + getSemesters();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/NusmodsData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public interface NusmodsData {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Optional\u003cString\u003e getModuleTitle(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    Optional\u003cModuleInfo\u003e getModuleInfo(String moduleCode) throws NusmodsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/NusmodsDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * Encapsulates operations to retrieve NUSMods module information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsDataManager implements NusmodsData {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final DataFetcher dataFetcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Default public constructor to create an NusmodsDataManager object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public NusmodsDataManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        dataFetcher \u003d new DataFetcherManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        filePath \u003d DataFetcher.DATA_FILE_PATH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Constructor to change the DataFetcher class used. Mainly used for testing to provide stubs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param dataFetcher The class used to invoke static methods in this class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    NusmodsDataManager(DataFetcher dataFetcher, String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(dataFetcher !\u003d null \u0026\u0026 !filePath.trim().isEmpty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.dataFetcher \u003d dataFetcher;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the module title of a module given its module code."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code to search for."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The module title or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cString\u003e getModuleTitle(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return getModuleInfo(moduleCode).map(ModuleInfo::getTitle);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the {@code ModuleInfo} of a module given its module code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This method attempts to fetch the latest info from the NUSMods API if possible. Otherwise, it will"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * still return the info stored locally."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module code to search for."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The {@code ModuleInfo} or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Optional\u003cModuleInfo\u003e getModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return dataFetcher.fetchModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (NusmodsException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return getModuleInfoFromFile(moduleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Returns the {@code ModuleInfo} for a given module code by retrieving it locally."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @param moduleCode The module coed to search for."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @return The {@code ModuleInfo} or {@code Optional.empty()} if not found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * @throws NusmodsException if an error occurs while retrieving module info."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Optional\u003cModuleInfo\u003e getModuleInfoFromFile(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assert(!moduleCode.trim().isEmpty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            String jsonString \u003d FileUtil.readFromFile(Paths.get(getFilePath()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            TypeReference\u003cHashMap\u003cString, ModuleInfo\u003e\u003e targetType \u003d new TypeReference\u003c\u003e(){};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            Map\u003cString, ModuleInfo\u003e moduleInfoMap \u003d mapper.readValue(jsonString, targetType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return Optional.ofNullable(moduleInfoMap.get(moduleCode));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(new IOException(\"Error reading module info from local file.\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/nusmods/exceptions/NusmodsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public NusmodsException(Exception cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GradPadStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Represents a storage for {@link GradPad}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public interface GradPadStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns GradPad data as a {@link ReadOnlyGradPad}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @see #getGradPadFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Saves the given {@link ReadOnlyGradPad} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param gradPad cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @see #saveGradPad(ReadOnlyGradPad)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 5,
      "-": 32,
      "yan-soon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String code, @JsonProperty(\"modularCredits\") String credits,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        code \u003d source.getModuleCode().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        credits \u003d source.getModularCredits().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(code)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ModuleCode modelCode \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    ModularCredits.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!ModularCredits.isValidMC(credits)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            throw new IllegalValueException(ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ModularCredits modelCredits \u003d new ModularCredits(credits);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new Module(modelCode, modelCredits, modelTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 11,
      "-": 44,
      "yan-soon": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGradPadStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * A class to access GradPad data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class JsonGradPadStorage implements GradPadStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGradPadStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonGradPadStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return readGradPad(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Similar to {@link #readGradPad()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cJsonSerializableGradPad\u003e jsonGradPad \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                filePath, JsonSerializableGradPad.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!jsonGradPad.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return Optional.of(jsonGradPad.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        saveGradPad(gradPad, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Similar to {@link #saveGradPad(ReadOnlyGradPad)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requireNonNull(gradPad);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGradPad(gradPad), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "-": 60,
      "yan-soon": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableGradPad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * An Immutable GradPad that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "@JsonRootName(value \u003d \"gradpad\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class JsonSerializableGradPad {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Constructs a {@code JsonSerializableGradPad} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonSerializableGradPad(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Converts a given {@code ReadOnlyGradPad} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGradPad}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public JsonSerializableGradPad(ReadOnlyGradPad source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Converts this GradPad into the model\u0027s {@code GradPad} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (gradPad.hasModule(module)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            gradPad.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "mhdsyfq": 6,
      "-": 31,
      "yan-soon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequiredCommandMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FOUNDATION \u003d \"These are the Foundation Modules you have yet to take: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There was an error loading the Modules :(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SCIENCE \u003d \"You have not completed your Science Module requirement,\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \" use the \u0027science\u0027 command to view the available modules.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_1 \u003d \"You have yet to complete your 12MCs worth of Internship Modules.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_2 \u003d \"These are the Internship Modules you can take:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FOUNDATION \u003d \"You have completed all your Foundation Modules!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SCIENCE \u003d \"You have completed your Science Module Requirement!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_INTERN \u003d \"You have completed your Internship Module Requirement!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_ITPROF \u003d \"These are the IT Professionalism Modules you have yet to take:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ITPROF \u003d \"You have completed your \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"IT Professionalism Module Requirement!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_MATHANDSCI \u003d \"These are the Math and Science Modules you have yet to take:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MATHANDSCI \u003d \"You have completed your \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            + \"Math and Science Module Requirement!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path FOUNDATION_PATH \u003d Paths.get(\"src/main/resources/data/foundationmodules.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path INTERNSHIP_PATH \u003d Paths.get(\"src/main/resources/data/industrialexperience.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path ITPROF_PATH \u003d Paths.get(\"src/main/resources/data/ITProfessionalism.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path MATHANDSCI_PATH \u003d Paths.get(\"src/main/resources/data/mathandsciencemodules.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path SCIENCE_PATH \u003d Paths.get(\"src/main/resources/data/sciencemodules.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/RequiredCommandStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class RequiredCommandStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredFoundation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredITprof;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredMathAndScience;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredScience;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredInternship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredFoundation attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredFoundation attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredFoundation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredFoundation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredFoundation attribute with Foundation Modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundation(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredFoundation \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredITprof attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredITprof attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredITprof() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredITprof;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredITprof attribute with IT Professionalism Modules."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprof(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredITprof \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredMathAndScience attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredMathAndScience attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredMathAndScience() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredMathAndScience;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredMathAndScience attribute with Math and Science Modules."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMathAndScience(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredMathAndScience \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredScience attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredScience attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredScience() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredScience;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredScience attribute with Science Modules."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScience(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredScience \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns requiredInternship attribute of RequiredCommandStorage object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @return requiredInternship attribute of type ObservableList\u003cModule/\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ObservableList\u003cModule\u003e getRequiredInternship() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return requiredInternship;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Loads the requiredInternship attribute with Internship Modules."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws IOException When path is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * @throws DataConversionException When there is an error converting from the JSON file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternship(Path path) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(path);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e gradPad \u003d storage.readGradPad();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredInternship \u003d gradPad.orElseThrow().getModuleList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yan-soon": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public interface Storage extends GradPadStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Path getGradPadFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    void saveGradPad(ReadOnlyGradPad gradPad) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 27,
      "yan-soon": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Manages storage of GradPad data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private GradPadStorage gradPadStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code GradPadStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public StorageManager(GradPadStorage gradPadStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assert(gradPadStorage !\u003d null \u0026\u0026 userPrefsStorage !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.gradPadStorage \u003d gradPadStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradPad methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gradPadStorage.getGradPadFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return readGradPad(gradPadStorage.getGradPadFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public Optional\u003cReadOnlyGradPad\u003e readGradPad(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return gradPadStorage.readGradPad(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        saveGradPad(gradPad, gradPadStorage.getGradPadFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        gradPadStorage.saveGradPad(gradPad, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 62,
      "yan-soon": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getGradPadFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 6,
      "-": 124,
      "yan-soon": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GradPad level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code ModuleCode} with the given {@code Module} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        code.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        credits.setText(\"Modular Credits: \" + module.getModularCredits().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        module.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 1,
      "-": 54,
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Creates a {@code ModuleListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "yan-soon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gradpad.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/data/ITProfessionalism.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS1103\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ES2660\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/resources/data/foundationmodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 35
    }
  },
  {
    "path": "src/main/resources/data/industrialexperience.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3880\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3202\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3107\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3110\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS4010\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"TR3202\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP4101\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 35
    }
  },
  {
    "path": "src/main/resources/data/mathandsciencemodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1101R\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ST2334\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 15
    }
  },
  {
    "path": "src/main/resources/data/sciencemodules.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1121\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1131\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1417\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1102\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1105\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1106\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1301\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1306\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1141\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1142\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1143\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1144\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1221\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1222\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1432\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 63
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    background-color: #192841; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-base: #192841;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-control-inner-background: #192841;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 10%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-background-color: #192841;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-border-color: #192841 derive(#192841, 10%) #192841 derive(#192841, 10%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     -fx-border-top-width: 0.3px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5 !important;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: derive(#ef7c00, 10%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-padding: 7px;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-color: derive(#192841, 25%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-width: 10px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-border-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 50%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 20%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  -fx-text-fill: #192841;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#192841, 25%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: #192841;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: derive(#ef7c00, 10%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-insets: 4;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-family: \"Tahoma\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "#filterField, #moduleListPanel, #personWebpage {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background-color: transparent, #192841, #ffffff, #192841;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-text-fill: #f5f5f5;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 65,
      "-": 274
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    -fx-background: #192841;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"GradPad App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cImage url\u003d\"@/images/gradpad.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cVBox fx:id\u003d\"moduleListResultDisplay\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minWidth\u003d\"250.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "              \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16,
      "-": 27
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "      \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$modular credits\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" text\u003d\"Welcome to GradPad!\" wrapText\u003d\"true\" StackPane.alignment\u003d\"TOP_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonGradPadStorageTest/invalidAndValidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS123#\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4!\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 9
    }
  },
  {
    "path": "src/test/data/JsonGradPadStorageTest/invalidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"Module with invalid code field: CS13!3\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/duplicateModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\": [ \"core\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS1231\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/invalidModuleGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\": \"CS12!3\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\": \"4@\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradPadTest/typicalModulesGradPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Module values as in TypicalModules#getTypicalGradPad()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"core\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3216\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"5\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"nonCore\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \"gradPadFilePath\" : \"gradpad.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "  \"gradPadFilePath\" : \"gradpad.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/CS1010X.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS1010X\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Programming Methodology\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"description\" : \"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : \"CS1010 or its equivalent, CS1010FC\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : null"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/CS1010XSummary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\": \"CS1010X\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\": \"Programming Methodology\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"semesters\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 7
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/IS1103.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\": \"IS1103\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\": \"Ethics in Computing\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\": \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"description\": \"This module gives an introduction to Ethics in the Computing domain. Students will learn about the importance of Ethics in Computing policy-making and be able to make judgements and decisions based on established ethical frameworks (such as Deontology, Consequentialism, Social Contract Theory and Virtue Ethics). The objective is to develop students to be ethical computing decision-makers who can analyse and explain their decisions in real-world policy-making situations. Issues in emerging areas such as Digital Intellectual Property Rights, Artificial Intelligence, Big Data, Social Media, Hacking, and interface design may also be discussed in relation to Ethics.\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : null,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : null"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/IS1103Summary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\": \"IS1103\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\": \"Ethics in Computing\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"semesters\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    1,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/invalidModule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS2103T\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Software Engineering\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit: \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 5
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/invalidModuleMap.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"sdfasdf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 3
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/validModule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"description\" : \"The best module there is.\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 8
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/validModuleMap.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  \"CS2103T\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\" : \"Software Engineering\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCredit\" : \"4\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"description\" : \"The best module there is.\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"preclusion\" : \"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"prerequisite\" : \"For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 10
    }
  },
  {
    "path": "src/test/data/NusmodsDataManagerTest/validSummaries.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "["
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\": \"IS1103\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\": \"Ethics in Computing\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"semesters\": ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      1,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"moduleCode\": \"CS1010X\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"title\": \"Programming Methodology\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    \"semesters\": ["
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "      2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "]"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 17
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/compiledmodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS1103\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"ITProfessionalism\" ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ES2660\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1521\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"MA1101R\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"MathAndSciences\" ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"ST2334\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1121\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1131\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Chemistry\" ],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CM1417\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1102\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1105\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1106\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1301\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Biology\" ],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"LSM1306\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1141\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1142\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1143\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1144\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1221\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1222\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Physics\" ],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"PC1432\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  },{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3880\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3200\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3202\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3107\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP3110\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"6\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"IS4010\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"TR3202\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Internship\" ],"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CP4101\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"12\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 151
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/doublemodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    { \"tagged\": [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"credits\": \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 12
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/incompletefoundationmodules.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS1231S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2030S\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2040S\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2103T\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS2106\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"tagged\" : [ \"Foundation\" ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"code\" : \"CS3230\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    \"credits\" : \"4\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  }]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 31
    }
  },
  {
    "path": "src/test/data/RequiredCommandTest/singlemodule.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    { \"tagged\": [ \"Foundation\" ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"code\": \"CS1101S\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "      \"credits\": \"4\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/HttpUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class HttpUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * This is a public API endpoint by Postman for testing purposes. It echoes all requests params."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_DUMMY_ENDPOINT \u003d \"https://postman-echo.com/get?foo\u003dbar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_ENDPOINT \u003d \"https://asdf\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final HttpUtil httpUtil \u003d HttpUtil.SINGLETON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void makeGETRequest_validURL_validResponse() throws NusmodsException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String response \u003d httpUtil.makeGETRequest(VALID_DUMMY_ENDPOINT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        JsonNode jsonNode \u003d mapper.readTree(response);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String actualProperty \u003d jsonNode.get(\"args\").get(\"foo\").asText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(\"bar\", actualProperty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //CHECKSTYLE.OFF: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void makeGETRequest_invalidURL_throwsNusmodsException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        //CHECKSTYLE.ON: AbbreviationAsWordInName"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e httpUtil.makeGETRequest(INVALID_ENDPOINT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    //---------------- Tests for containsCharSequenceIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Invalid equivalence partitions for ModuleCode: null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharSequenceIgnoreCase("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \"typical ModuleCode\", null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                StringUtil.containsCharSequenceIgnoreCase(\"typical ModuleCode\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter should be a single word\", () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                StringUtil.containsCharSequenceIgnoreCase(\"typical ModuleCode\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharSequenceIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Valid equivalence partitions for CharSequence:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - any charSequence"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Valid equivalence partitions for ModuleCode:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - one moduleCode"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - ModuleCode with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - charSequence matches any part of moduleCode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *   - ModuleCode does not contain charSequence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void containsCharSequenceIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Empty ModuleCode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"bbb\", \"bb\")); // ModuleCode word"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // bigger than CharSequence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(StringUtil.containsCharSequenceIgnoreCase(\"bbb\", \"bbbb\")); // CharSequence bigger"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // than ModuleCode word"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Matches word in the ModuleCode, different upper/lower case letters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"bBb\", \"Bbb\")); // Different upper/lower case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"ccc@1\", \"CCc@1\")); // With symbols/numbers"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"  AAA   \", \"aaa\")); // ModuleCode has extra"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(StringUtil.containsCharSequenceIgnoreCase(\"ccc\", \"  ccc  \")); // CharSequence has extra"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    //---------------- Tests for ignoreCase --------------------------------------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.ignoreCase(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e StringUtil.ignoreCase(\"  \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharSequence parameter should be a single word\", ()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e StringUtil.ignoreCase(\"aaa BBB\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void ignoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // Return all uppercase letters with different upper/lower case letters"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"abc\"), \"ABC\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"abc1\"), \"ABC1\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"ab1@c\"), \"AB1@C\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"   abc  \"), \"ABC\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"ABC\"), \"ABC\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(StringUtil.ignoreCase(\"cS2100\"), \"CS2100\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 29,
      "mhdsyfq": 38,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonGradPadStorage(temporaryFolder.resolve(\"gradPad.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // Setup LogicManager with JsonGradPadIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonGradPadIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionGradPad.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CODE_DESC_CS2103T + CREDITS_DESC_CS2103T;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2103T).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static class JsonGradPadIoExceptionThrowingStub extends JsonGradPadStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private JsonGradPadIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void saveGradPad(ReadOnlyGradPad gradPad, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "-": 133,
      "yan-soon": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ModuleInfoSearcherTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains integration tests for {@code ModuleInfoSearcher}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "class ModuleInfoSearcherTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/data/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private ModuleInfoSearcher moduleInfoSearcher \u003d new ModuleInfoSearcher();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_empty_module() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String emptyModule \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(CommandException.class, ModuleInfoSearcher.MESSAGE_EMPTY_SEARCH, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e moduleInfoSearcher.searchModule(emptyModule));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_false_module() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String falseModule \u003d \"AA0000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(CommandException.class, ModuleInfoSearcher.MESSAGE_FAILED_TO_FIND_MODULE, ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            -\u003e moduleInfoSearcher.searchModule(falseModule));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void search_success() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String moduleCode \u003d \"CS1010X\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo actualModuleInfo \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            actualModuleInfo \u003d moduleInfoSearcher.searchModule(moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(actualModuleInfo, cs1010x);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandSuccess(new AddCommand(validModule), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleInList \u003d model.getGradPad().getModuleList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(new AddCommand(moduleInList), model, AddCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 32,
      "yan-soon": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModule);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_MODULE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs1231 \u003d new ModuleBuilder().withCode(\"CS1231\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs1101s \u003d new ModuleBuilder().withCode(\"CS1101S\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1231Command \u003d new AddCommand(cs1231);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1101SCommand \u003d new AddCommand(cs1101s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(addCS1231Command.equals(addCS1231Command));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        AddCommand addCS1231CommandCopy \u003d new AddCommand(cs1231);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(addCS1231Command.equals(addCS1231CommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(addCS1231Command.equals(addCS1101SCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public Path getGradPadFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public void setGradPadFilePath(Path gradPadFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setGradPad(ReadOnlyGradPad newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ReadOnlyGradPad getGradPad() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return new GradPad();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "mhdsyfq": 8,
      "-": 137,
      "yan-soon": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CheckMcCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTotalMc;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class CheckMcCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void execute_checkmc_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertCommandSuccess(new CheckMcCommand(), model, String.format(CheckMcCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                getTypicalTotalMc()), expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_emptyGradPad_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_nonEmptyGradPad_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.setGradPad(new GradPad());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 2,
      "-": 25,
      "yan-soon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true).hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 3,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_CODE_CS3216 \u003d \"CS3216\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CODE_CS2040 \u003d \"CS2040\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CREDITS_CS2103T \u003d \"4\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_CREDITS_CS3216 \u003d \"5\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_CREDITS_CS2040 \u003d \"4\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String VALID_TAG_NON_CORE \u003d \"nonCore\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static final String VALID_TAG_CORE \u003d \"core\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String CODE_DESC_CS2103T \u003d \" \" + PREFIX_CODE + VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String CODE_DESC_CS3216 \u003d \" \" + PREFIX_CODE + VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String CREDITS_DESC_CS2103T \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_CS2103T;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String CREDITS_DESC_CS3216 \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TAG_DESC_CORE \u003d \" \" + PREFIX_TAG + VALID_TAG_CORE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String TAG_DESC_NON_CORE \u003d \" \" + PREFIX_TAG + VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INVALID_CODE_DESC \u003d \" \" + PREFIX_CODE + \"CS1231\u0026\"; // \u0027\u0026\u0027 not allowed in codes"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INVALID_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + \"4a\"; // \u0027a\u0027 not allowed in credits"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"core*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_CS2103T;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_CS3216;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DESC_CS2103T \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS2103T).withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DESC_CS3216 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * - the GradPad, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad expectedGradPad \u003d new GradPad(actualModel.getGradPad());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expectedGradPad, actualModel.getGradPad());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * {@code model}\u0027s GradPad."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final String[] splitName \u003d module.getModuleCode().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 15,
      "silvernitro": 4,
      "mhdsyfq": 3,
      "-": 72,
      "yan-soon": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of GradPad list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGradPad().getModuleList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 5,
      "mhdsyfq": 1,
      "-": 76,
      "yan-soon": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index indexLastModule \u003d Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module lastModule \u003d model.getFilteredModuleList().get(indexLastModule.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleBuilder moduleInList \u003d new ModuleBuilder(lastModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d moduleInList.withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastModule, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.setModule(lastModule, editedModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, new EditModuleDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(moduleInFilteredList).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradPad(model.getGradPad()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_MODULE, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_duplicateModuleFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // edit module in filtered list into a duplicate in GradPad"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module moduleInList \u003d model.getGradPad().getModuleList().get(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new EditModuleDescriptorBuilder(moduleInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_invalidModuleIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * but smaller than size of GradPad"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_invalidModuleIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of GradPad list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGradPad().getModuleList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS3216).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_MODULE, DESC_CS2103T);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_MODULE, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_MODULE, DESC_CS2103T)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_MODULE, DESC_CS3216)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 6,
      "mhdsyfq": 3,
      "-": 100,
      "yan-soon": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditModuleDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(DESC_CS2103T));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(DESC_CS3216));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .withModuleCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different credits -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        editedCS2103T \u003d new EditModuleDescriptorBuilder(DESC_CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 7,
      "-": 26,
      "yan-soon": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_multipleKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d preparePredicate(\"CS2103T CS3216\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, CS3216), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Parses {@code userInput} into a {@code ModuleCodeContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ModuleCodeContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new ModuleCodeContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 3,
      "mhdsyfq": 1,
      "-": 57,
      "yan-soon": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 33,
      "yan-soon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RequiredCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_FOUNDATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_INTERN_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SCIENCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_FOUNDATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_ITPROF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_MATHANDSCI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.MESSAGE_SUCCESS_SCIENCE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.RequiredCommandStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class RequiredCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path COMPILED_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/compiledmodules.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path INCOMPLETE_FOUNDATION_PATH \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Paths.get(\"src/test/data/RequiredCommandTest/incompletefoundationmodules.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path SINGLE_MODULE_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/singlemodule.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path DOUBLE_MODULE_PATH \u003d Paths.get(\"src/test/data/RequiredCommandTest/doublemodules.json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MISSING_MODULE_1 \u003d \"CS1101S (4 MCs)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MISSING_MODULE_2 \u003d \"CS1231S (4 MCs)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_INTERN_TEST \u003d \" You are currently at 4 MCs. \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommand requiredCommand \u003d new RequiredCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e testModules;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpTestModules() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpIncompleteTestModules() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(INCOMPLETE_FOUNDATION_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpWrongTestModules() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(SCIENCE_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpSingleTestModules() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(SINGLE_MODULE_PATH);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpDoubleTestModules() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(DOUBLE_MODULE_PATH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        testModules \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUp() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(COMPILED_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model.setGradPad(gradPad);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getLeftOverModules_validTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(\"\", actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getStorage_validTest() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        RequiredCommandStorage actual \u003d requiredCommand.getStorage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setStorage_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setStorage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        RequiredCommandStorage storage \u003d requiredCommand.getStorage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(testModules, actual);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getCurrentModules_validTest() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredCommand.getCurrentModules();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setCurrentModules_validTest() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(requiredCommand.getCurrentModules());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareModules_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpIncompleteTestModules();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpTestModules();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareModules(testModules, MESSAGE_FOUNDATION, MESSAGE_SUCCESS_FOUNDATION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_FOUNDATION + \"\\n\" + MISSING_MODULE_1 + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareScience_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpIncompleteTestModules();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpWrongTestModules();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareScience(testModules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_SCIENCE + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void compareInternship_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpSingleTestModules();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.setCurrentModules(testModules);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpDoubleTestModules();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredCommand.compareInternship(testModules);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String actual \u003d requiredCommand.getLeftOverModules();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expected \u003d MESSAGE_INTERN_1 + MESSAGE_INTERN_TEST + MESSAGE_INTERN_2 + \"\\n\" + MISSING_MODULE_2;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requiredCommand.execute(model));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void execute_validTest() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d \"\" + MESSAGE_SUCCESS_FOUNDATION + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + MESSAGE_SUCCESS_ITPROF + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_MATHANDSCI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_SCIENCE + \"\\n\" + \"\\n\" + MESSAGE_SUCCESS_INTERN;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d requiredCommand.execute(model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScienceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.SCIENCE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.storage.JsonGradPadStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ScienceCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Path INVALID_PATH \u003d Paths.get(\"data\", \"science.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"These are the Science Modules that you can take:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ScienceCommand scienceCommand \u003d new ScienceCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private String moduleNames \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUp() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder modulesToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(SCIENCE_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e modules \u003d storage.readGradPad().get().getModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            String moduleToAdd \u003d module.getModuleCode() + \" (\" + module.getModularCredits() + \" MCs)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            modulesToAdd.append(\"\\n\").append(moduleToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        moduleNames +\u003d modulesToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void validGetScienceModulesTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e empty \u003d scienceCommand.getScienceModules();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(empty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e scienceCommand.execute(model));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e scienceCommand.setScienceModules(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void validPathExecuteScienceCommand_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult expected \u003d new CommandResult(MESSAGE_SUCCESS + moduleNames);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        CommandResult actual \u003d scienceCommand.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModulesInvalidPath_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e scienceCommand.setScienceModules(INVALID_PATH));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setScienceModulesValidPath_returnsFilledOptional() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage expectedJsonStorage \u003d new JsonGradPadStorage(SCIENCE_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Optional\u003cReadOnlyGradPad\u003e expectedGradPad \u003d expectedJsonStorage.readGradPad();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d expectedGradPad.get().getModuleList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        scienceCommand.setScienceModules(SCIENCE_PATH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d scienceCommand.getScienceModules();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(actual, expected);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.ModuleInfoSearcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.nusmods.ModuleInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/data/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradPad(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String firstPredicate \u003d \"first\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String secondPredicate \u003d \"second\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(searchFirstCommand, searchFirstCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(searchFirstCommand, searchFirstCommandCopy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(1, searchFirstCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(null, searchFirstCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertNotEquals(searchFirstCommand, searchSecondCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String expectedMessage \u003d ModuleInfoSearcher.MESSAGE_EMPTY_SEARCH;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertCommandFailure(command, model, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void execute_searchCommand_success() throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String moduleCode \u003d \"CS1010X\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModuleInfo cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(moduleCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String expectedMessage \u003d String.format(SearchCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                cs1010x.getModuleCode(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                cs1010x.getTitle(), cs1010x.getDescription(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                cs1010x.getPreclusion(), cs1010x.getPrerequisite());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS3216;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CORE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS3216).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CODE_DESC_CS3216 + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_NON_CORE, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // multiple codes - last code accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS2103T + CODE_DESC_CS3216 + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_NON_CORE, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // multiple credits - last credit accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS3216 + CREDITS_DESC_CS2103T + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_NON_CORE, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModuleMultipleTags \u003d new ModuleBuilder(CS3216).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS3216 + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_CORE + TAG_DESC_NON_CORE, new AddCommand(expectedModuleMultipleTags));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2103T).withTags().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, CODE_DESC_CS2103T + CREDITS_DESC_CS2103T,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // missing code prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CS3216 + CREDITS_DESC_CS3216,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // missing credit prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS3216 + VALID_CREDITS_CS3216,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CS3216 + VALID_CREDITS_CS3216,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, INVALID_CODE_DESC + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_CORE + TAG_DESC_NON_CORE, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS3216 + INVALID_CREDITS_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_CORE + TAG_DESC_NON_CORE, ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS3216 + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_NON_CORE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, INVALID_CODE_DESC + CREDITS_DESC_CS3216,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CODE_DESC_CS3216 + CREDITS_DESC_CS3216"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                        + TAG_DESC_CORE + TAG_DESC_NON_CORE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 4,
      "-": 57,
      "yan-soon": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_MODULE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "yan-soon": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"-5\" + CODE_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"0\" + CODE_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CODE_DESC, ModuleCode.MESSAGE_CONSTRAINTS); // invalid code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CREDITS_DESC, ModularCredits.MESSAGE_CONSTRAINTS); // invalid credit"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // valid credit followed by invalid credit. The test case for invalid credit followed by valid credit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertParseFailure(parser, \"1\" + CREDITS_DESC_CS3216 + INVALID_CREDITS_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                ModularCredits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being edited,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CORE + TAG_DESC_NON_CORE + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CORE + TAG_EMPTY + TAG_DESC_NON_CORE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CORE + TAG_DESC_NON_CORE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CODE_DESC + VALID_CREDITS_CS2103T,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_CS3216 + TAG_DESC_NON_CORE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + CODE_DESC_CS2103T + TAG_DESC_CORE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_CS3216 + CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withModuleCode(VALID_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        // credits"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_CS2103T;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModularCredits(VALID_CREDITS_CS2103T).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CORE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withTags(VALID_TAG_CORE).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_CS2103T"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + TAG_DESC_CORE + CREDITS_DESC_CS2103T + TAG_DESC_CORE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + CREDITS_DESC_CS3216 + TAG_DESC_NON_CORE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withTags(VALID_TAG_CORE, VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CREDITS_DESC + CREDITS_DESC_CS3216;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CODE_DESC_CS2103T + INVALID_CREDITS_DESC + CREDITS_DESC_CS3216;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_CODE_CS2103T)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 6,
      "-": 116,
      "yan-soon": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new FindCommand(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"CS3216\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, \"CS2103T CS3216\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n \\t CS3216  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "yan-soon": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradPadParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.logic.commands.CheckMcCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private final GradPadParser parser \u003d new GradPadParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new AddCommand(module), command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(module).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                + INDEX_FIRST_MODULE.getOneBased() + \" \" + ModuleUtil.getEditModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_MODULE, descriptor), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(new FindCommand(new ModuleCodeContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parseCommand_checkMc() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CheckMcCommand.COMMAND_WORD) instanceof CheckMcCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(parser.parseCommand(CheckMcCommand.COMMAND_WORD + \" 3\") instanceof CheckMcCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "mhdsyfq": 8,
      "-": 82,
      "yan-soon": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS23!3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"4!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CODE \u003d \"CS1231\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CREDITS \u003d \"4\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"core\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"nonCore\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_CODE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCode_validValueWithoutWhitespace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode expectedCode \u003d new ModuleCode(VALID_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseModuleCode(VALID_CODE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parseCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String moduleCodeWithWhitespace \u003d WHITESPACE + VALID_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModuleCode expectedCode \u003d new ModuleCode(VALID_CODE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseModuleCode(moduleCodeWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModularCredits((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModularCredits(INVALID_CREDITS));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_validValueWithoutWhitespace_returnCredits() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModularCredits expectedCredits \u003d new ModularCredits(VALID_CREDITS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseModularCredits(VALID_CREDITS));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void parseCredits_validValueWithWhitespace_returnsTrimmedCredits() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String creditsWithWhitespace \u003d WHITESPACE + VALID_CREDITS + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ModularCredits expectedCredits \u003d new ModularCredits(VALID_CREDITS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseModularCredits(creditsWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 4,
      "-": 111,
      "yan-soon": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "class SearchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                new SearchCommand(\"CS2103T\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseSuccess(parser, \"CS2103T\", expectedSearchCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2103T \\n\", expectedSearchCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/GradPadTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private final GradPad gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(Collections.emptyList(), gradPad.getModuleList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e gradPad.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_withValidReadOnlyGradPad_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad newData \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(newData, gradPad);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module editedCS3216 \u003d new ModuleBuilder(CS3216).withCode(VALID_CODE_CS3216)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .withModularCredits(VALID_CREDITS_CS3216).withTags(VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS3216, editedCS3216);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPadStub newData \u003d new GradPadStub(newModules);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(DuplicateModuleException.class, () -\u003e gradPad.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e gradPad.hasModule(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleNotInGradPad_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(gradPad.hasModule(CS2103T));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(CS2103T);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(gradPad.hasModule(CS2103T));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test // Still needs changing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(CS2103T);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(gradPad.hasModule(editedModule));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(UnsupportedOperationException.class, () -\u003e gradPad.getModuleList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * A stub ReadOnlyGradPad whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static class GradPadStub implements ReadOnlyGradPad {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPadStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.ModuleCodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.testutil.GradPadBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(new GradPad(), new GradPad(modelManager.getGradPad()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"gradpad/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"new/gradpad/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.setGradPadFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void setGradPadFilePath_validPath_setsGradPadFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Path path \u003d Paths.get(\"gradpad/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.setGradPadFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(path, modelManager.getGradPadFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleNotInGradPad_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void hasModule_moduleInGradPad_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertTrue(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Assertions.assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPad \u003d new GradPadBuilder().withModule(CS2103T).withModule(CS3216).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad differentGradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager \u003d new ModelManager(gradPad, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(gradPad, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        // different gradPad -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentGradPad, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        String[] keywords \u003d { CS2103T.getModuleCode().moduleCode };"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.updateFilteredModuleList(new ModuleCodeContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradPad, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        differentUserPrefs.setGradPadFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(gradPad, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 35,
      "mhdsyfq": 4,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setGradPadFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGradPadFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 1,
      "-": 19,
      "yan-soon": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModularCreditsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModularCreditsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModularCredits(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_invalidModularCredit_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModularCredits(invalidCredits));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void isValidMC() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null modular credit value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModularCredits.isValidMC(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // invalid modular credits values"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\"mc\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\"12mcs\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\"1 2\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModularCredits.isValidMC(\"1234\")); // \u003e2 digits long"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // valid modular credits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModularCredits.isValidMC(\"1\")); // 1 digit long"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModularCredits.isValidMC(\"12\")); // 2 digits long"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"2100\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2100\", \"3216\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate secondPredicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate firstPredicateCopy \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void test_moduleCodeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"CS2100\", \"CS2103T\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"cS2100\", \"Cs2103T\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void test_moduleCodeDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ModuleCodeContainsKeywordsPredicate predicate \u003d new ModuleCodeContainsKeywordsPredicate("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2100\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Collections.singletonList(\"2100\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // Keywords match MCs and tags, but does not match code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        predicate \u003d new ModuleCodeContainsKeywordsPredicate(Arrays.asList(\"4\", \"core\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS2103T\").withModularCredits(\"4\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                           .withTags(\"core\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 68,
      "mhdsyfq": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"2100t\")); // no module prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"abcd\")); // no digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"c2100\")); // only 1-letter prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"c  2100\")); // only 1-letter prefix but has spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2100*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs 2100 T\")); // contains spaces within"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // valid module code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"cs2100\")); // 2-letter prefix followed by digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2100\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // with 1-letter suffix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000\")); // 3-letter prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"GER1000H\")); // 3-letter prefix with 1-letter suffix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different MCs -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same code, same MCs, different tags -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same code, different MCs, different tags -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                              .withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedCS2103T));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(CS3216));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withCode(VALID_CODE_CS3216).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different MCs -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withModularCredits(VALID_CREDITS_CS3216).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 78,
      "mhdsyfq": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS3216;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void contains_moduleWithSameFieldsExceptTagsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(uniqueModuleList.contains(editedCS2103T));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(CS2103T));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, CS2103T));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(CS2103T, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS2103T));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Module editedCS2103T \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, editedCS2103T);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(editedCS2103T);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS3216);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS3216));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(CS2103T));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.remove(CS2103T);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(CS3216);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        expectedUniqueModuleList.add(CS3216);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/DataFetcherManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.HttpUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class DataFetcherManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String TEST_SAVE_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest/saveModulesTest.json\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String MODULE_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest/validModule.json\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_MODULE_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                        + \"/invalidModule.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_MODULE_SUMMARIES_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/validSummaries.json\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X_MODULE_INFO \u003d \"src/test/data/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/CS1010X.json\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103_MODULE_INFO \u003d \"src/test/data/NusmodsDataManagerTest\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                + \"/IS1103.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private DataFetcherManager manager \u003d new DataFetcherManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_defaultWithNoArgs_defaultFilePathUsed() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(DataFetcher.DATA_FILE_PATH, manager.getDataFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchModuleInfo_validModuleCode_validModuleInfo() throws NusmodsException, DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.fetchModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                          ModuleInfo.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedInfo.get(), actualInfo.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchModuleInfo_invalidModuleInfoReceived_throwsNusmodsException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new InvalidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.fetchModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_filterByCs_removesIs1103Module() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList, \"CS\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e expectedFilteredList \u003d summaryList.subList(1, 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(expectedFilteredList, actualFilteredList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_filterByCsAndIs_noModulesRemoved() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList, \"CS\", \"IS1103\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(summaryList, actualFilteredList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void filterModuleSummaries_noKeywordsGiven_returnEmptyList() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new ValidModuleFileHttpUtilStub());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e actualFilteredList \u003d manager.filterModuleSummaries(summaryList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(actualFilteredList.isEmpty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void generateModuleInfoMap_sampleModuleSummaryList_moduleInfoMap()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new HttpUtilStub());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        List\u003cModuleSummary\u003e summaryList \u003d readModuleSummaryFromFile(VALID_MODULE_SUMMARIES_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e actualModuleInfoMap \u003d manager.generateModuleInfoMap(summaryList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e expectedModuleInfoMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isPresent() \u0026\u0026 is1103.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedModuleInfoMap.put(\"CS1010X\", cs1010x.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedModuleInfoMap.put(\"IS1103\", is1103.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedModuleInfoMap, actualModuleInfoMap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void fetchAndSaveModules_successfullySaveModuleInfoToFile()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throws NusmodsException, IOException, DataConversionException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new DataFetcherManager(new HttpUtilStub(), TEST_SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager.fetchAndSaveModules();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Map\u003cString, ModuleInfo\u003e actualMap \u003d readModuleInfoMapFromFile(TEST_SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedModule \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_MODULE_INFO), ModuleInfo.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // clean up test data file after we\u0027re done"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Files.deleteIfExists(Paths.get(TEST_SAVE_FILE_PATH));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (expectedModule.isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            Map\u003cString, ModuleInfo\u003e expectedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            expectedMap.put(\"CS1010X\", expectedModule.get());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(expectedMap, actualMap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //---------------- HttpUtil Stubs -----------------//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class ValidModuleFileHttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return FileUtil.readFromFile(Paths.get(MODULE_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class InvalidModuleFileHttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return FileUtil.readFromFile(Paths.get(INVALID_MODULE_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class HttpUtilStub extends HttpUtil {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // declare string constants here since string.format doesn\u0027t produce compile-time constants required"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // for the switch statement below"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public static final String CS1010X_FILE_PATH \u003d \"https://api.nusmods.com/v2/2020-2021/modules/CS1010X.json\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public static final String IS1103_FILE_PATH \u003d \"https://api.nusmods.com/v2/2020-2021/modules/IS1103.json\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        public String makeGETRequest(String urlString) throws NusmodsException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                switch (urlString) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case DataFetcher.MODULE_SUMMARY_LIST_URL:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(VALID_MODULE_SUMMARIES_TEST_FILE_PATH));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case CS1010X_FILE_PATH:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(CS1010X_MODULE_INFO));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                case IS1103_FILE_PATH:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return FileUtil.readFromFile(Paths.get(IS1103_MODULE_INFO));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    //---------------- Test utility fxns -----------------//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static List\u003cModuleSummary\u003e readModuleSummaryFromFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return mapper.readValue("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new File(filePath),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new TypeReference\u003cList\u003cModuleSummary\u003e\u003e(){});"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static Map\u003cString, ModuleInfo\u003e readModuleInfoMapFromFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return mapper.readValue("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new File(filePath),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                new TypeReference\u003cMap\u003cString, ModuleInfo\u003e\u003e(){});"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/ModuleInfoTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleInfoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X \u003d \"src/test/data/NusmodsDataManagerTest/CS1010X.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103 \u003d \"src/test/data/NusmodsDataManagerTest/IS1103.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() throws DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010xDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103), ModuleInfo.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isEmpty() || is1103.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010x.get().equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010x.get().equals(cs1010x.get()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules but same fields --\u003e true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010x.get().equals(cs1010xDuplicate.get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010x.get().equals(is1103.get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void hash() throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010x \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e cs1010xDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X), ModuleInfo.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e is1103 \u003d JsonUtil.readJsonFile(Paths.get(IS1103), ModuleInfo.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010x.isEmpty() || cs1010xDuplicate.isEmpty() || is1103.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e same hash code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010x.get().hashCode(), cs1010x.get().hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules but same fields --\u003e same hash code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010x.get().hashCode(), cs1010xDuplicate.get().hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different modules --\u003e different hash code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertNotEquals(cs1010x.get().hashCode(), is1103.get().hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/ModuleSummaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleSummaryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String CS1010X_SUMMARY \u003d \"src/test/data/NusmodsDataManagerTest/CS1010XSummary.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String IS1103_SUMMARY \u003d \"src/test/data/NusmodsDataManagerTest/IS1103Summary.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void equals() throws DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummary \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummaryDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                ModuleSummary.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e is1103Summary \u003d JsonUtil.readJsonFile(Paths.get(IS1103_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010xSummary.isEmpty() || is1103Summary.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // null check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010xSummary.get().equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010xSummary.get().equals(cs1010xSummary.get()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module object but same fields --\u003e true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(cs1010xSummary.get().equals(cs1010xSummaryDuplicate.get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertFalse(cs1010xSummary.get().equals(is1103Summary.get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void hash() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummary \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e cs1010xSummaryDuplicate \u003d JsonUtil.readJsonFile(Paths.get(CS1010X_SUMMARY),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                        ModuleSummary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleSummary\u003e is1103Summary \u003d JsonUtil.readJsonFile(Paths.get(IS1103_SUMMARY), ModuleSummary.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (cs1010xSummary.isEmpty() || cs1010xSummaryDuplicate.isEmpty() || is1103Summary.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // same module --\u003e same hash code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010xSummary.get().hashCode(), cs1010xSummary.get().hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module object but same fields --\u003e same hash code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(cs1010xSummary.get().hashCode(), cs1010xSummaryDuplicate.get().hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        // different module --\u003e different hash code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertNotEquals(cs1010xSummary.get().hashCode(), is1103Summary.get().hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/nusmods/NusmodsDataManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.nusmods;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.nusmods.exceptions.NusmodsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class NusmodsDataManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String VALID_MAP_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest/validModuleMap.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String INVALID_MAP_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest/invalidModuleMap\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                     + \".json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static final String MODULE_TEST_FILE_PATH \u003d \"src/test/data/NusmodsDataManagerTest/validModule.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private NusmodsDataManager manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                VALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void constructor_defaultWithNoArgs_storesDefaultFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertEquals(manager.getFilePath(), DataFetcher.DATA_FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_validModuleInfoFile_returnsModuleInfoFromFile() throws NusmodsException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                                          DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.getModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                  ModuleInfo.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualInfo.get(), expectedInfo.get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_invalidModuleInfoFileAndConnection_throwsNusmodsException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(), INVALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.getModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_invalidFilePath_throwsNusmodsException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new ReadFromFileDataFetcherStub(), \"asdf.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertThrows(NusmodsException.class, () -\u003e manager.getModuleInfo(\"CS2103T\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_moduleNotInValidModuleFile_emptyOptional() throws NusmodsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(manager.getModuleInfo(\"CS2100\").isEmpty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleInfo_fetchFromApiSuccessful_moduleInfo() throws NusmodsException, DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        manager \u003d new NusmodsDataManager(new FetchFromApiDataFetcherStub(), VALID_MAP_TEST_FILE_PATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e actualInfo \u003d manager.getModuleInfo(\"CS2103T\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e expectedInfo \u003d JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                                                                  ModuleInfo.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualInfo.isPresent() \u0026\u0026 expectedInfo.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualInfo.get(), expectedInfo.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleTitle_moduleIsInData_moduleTitle() throws NusmodsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cString\u003e actualTitle \u003d manager.getModuleTitle(\"CS2103T\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        if (actualTitle.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            assertEquals(actualTitle.get(), \"Software Engineering\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public void getModuleTitle_moduleNotInData_emptyOptional() throws NusmodsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cString\u003e actualTitle \u003d manager.getModuleTitle(\"CS2100\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        assertTrue(actualTitle.isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class ReadFromFileDataFetcherStub extends DataFetcher {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        void fetchAndSaveModules() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            throw new NusmodsException(new IOException(\"stub exception\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private static class FetchFromApiDataFetcherStub extends DataFetcher {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        void fetchAndSaveModules() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        Optional\u003cModuleInfo\u003e fetchModuleInfo(String moduleCode) throws NusmodsException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                return JsonUtil.readJsonFile(Paths.get(MODULE_TEST_FILE_PATH), ModuleInfo.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            } catch (DataConversionException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                throw new NusmodsException(ex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS1#212\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"4#\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CODE \u003d CS2103T.getModuleCode().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final String VALID_CREDITS \u003d CS2103T.getModularCredits().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2103T.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonAdaptedModule(INVALID_CODE, VALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidCredits_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonAdaptedModule(VALID_CODE, INVALID_CREDITS, VALID_TAGS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d ModularCredits.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_nullModularCredits_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModularCredits.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                new JsonAdaptedModule(VALID_CODE, VALID_CREDITS, invalidTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, module::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "yan-soon": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonGradPadStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class JsonGradPadStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonGradPadStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readGradPad(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGradPad\u003e readGradPad(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return new JsonGradPadStorage(Paths.get(filePath)).readGradPad(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertFalse(readGradPad(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"notJsonFormatGradPad.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_invalidModuleGradPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"invalidModuleGradPad.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readGradPad_invalidAndValidModuleGradPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGradPad(\"invalidAndValidModuleGradPad.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void readAndSaveGradPad_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempGradPad.json\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad original \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage jsonGradPadStorage \u003d new JsonGradPadStorage(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad readBack \u003d jsonGradPadStorage.readGradPad(filePath).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.addModule(CS1231);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.removeModule(CS2103T);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        readBack \u003d jsonGradPadStorage.readGradPad(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        original.addModule(CS2103T);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        jsonGradPadStorage.saveGradPad(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        readBack \u003d jsonGradPadStorage.readGradPad().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad_nullGradPad_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradPad(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Saves {@code gradPad} at the specified {@code filePath}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private void saveGradPad(ReadOnlyGradPad gradPad, String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            new JsonGradPadStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                    .saveGradPad(gradPad, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void saveGradPad_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGradPad(new GradPad(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 7,
      "-": 68,
      "yan-soon": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableGradPadTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class JsonSerializableGradPadTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableGradPadTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesGradPad.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleGradPad.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleGradPad.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad gradPadFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad typicalModulesGradPad \u003d TypicalModules.getTypicalGradPad();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(gradPadFromFile, typicalModulesGradPad);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonSerializableGradPad dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                JsonSerializableGradPad.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableGradPad.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "mhdsyfq": 1,
      "-": 27,
      "yan-soon": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        userPrefs.setGradPadFilePath(Paths.get(\"gradpad.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/RequiredCommandStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.commands.ScienceCommandTest.INVALID_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.storage.RequiredCommandMessages.FOUNDATION_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "class RequiredCommandStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private RequiredCommandStorage storage \u003d new RequiredCommandStorage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private ObservableList\u003cModule\u003e requiredFoundation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setUpRequiredFoundation() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage storage \u003d new JsonGradPadStorage(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad gradPad \u003d storage.readGradPad().get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        requiredFoundation \u003d gradPad.getModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredFoundation_validTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredITprof_validTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredMathAndScience_validTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredMathAndScience();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredScience_validTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getRequiredInternship_validTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNull(actual);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundationInvalidPath_throwsNoSuchElementException() throws IOException,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e storage.setRequiredFoundation(INVALID_PATH));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprofInvalidPath_throwsNoSuchElementException() throws IOException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e storage.setRequiredITprof(INVALID_PATH));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMathAndScienceInvalidPath_throwsNoSuchElementException() throws IOException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e storage.setRequiredMathAndScience(INVALID_PATH));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScienceInvalidPath_throwsNoSuchElementException() throws IOException,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e storage.setRequiredScience(INVALID_PATH));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternshipInvalidPath_throwsNoSuchElementException() throws IOException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e storage.setRequiredInternship(INVALID_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredFoundationValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredFoundation(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredFoundation();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredITprofValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredITprof(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredITprof();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredMathAndScienceValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredMathAndScience(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredMathAndScience();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredScienceValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredScience(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredScience();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void setRequiredInternshipValidPath_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        setUpRequiredFoundation();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e actual \u003d requiredFoundation;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storage.setRequiredInternship(FOUNDATION_PATH);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ObservableList\u003cModule\u003e expected \u003d storage.getRequiredInternship();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yan-soon": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalGradPad;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.ReadOnlyGradPad;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        JsonGradPadStorage gradPadStorage \u003d new JsonGradPadStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storageManager \u003d new StorageManager(gradPadStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void gradPadReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "         * {@link JsonGradPadStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonGradPadStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        GradPad original \u003d getTypicalGradPad();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        storageManager.saveGradPad(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        ReadOnlyGradPad retrieved \u003d storageManager.readGradPad().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        assertEquals(original, new GradPad(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public void getGradPadFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        assertNotNull(storageManager.getGradPadFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 4,
      "-": 54,
      "yan-soon": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModularCredits(module.getModularCredits());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setTags(module.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the {@code Module Code} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String code) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(code));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Sets the {@code Modular Credits} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withModularCredits(String credits) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setModularCredits(new ModularCredits(credits));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "yan-soon": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GradPadBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * A utility class to help with building GradPad objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " *     {@code GradPad ab \u003d new GradPadBuilder().withModule(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "public class GradPadBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    private GradPad gradPad;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad \u003d new GradPad();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder(GradPad gradPad) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        this.gradPad \u003d gradPad;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Adds a new {@code Module} to the {@code GradPad} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPadBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        gradPad.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaokiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public GradPad build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return gradPad;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModularCredits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String DEFAULT_MC \u003d \"4\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private ModularCredits credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Creates a {@code ModuleBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        code \u003d new ModuleCode(DEFAULT_CODE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        credits \u003d new ModularCredits(DEFAULT_MC);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        code \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        credits \u003d moduleToCopy.getModularCredits();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.code \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     * Sets the {@code ModularCredits} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public ModuleBuilder withModularCredits(String mc) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        this.credits \u003d new ModularCredits(mc);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return new Module(code, credits, tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "silvernitro": 68,
      "mhdsyfq": 1,
      "yan-soon": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yan-soon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sb.append(PREFIX_CODE + module.getModuleCode().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        sb.append(PREFIX_CREDITS + module.getModularCredits().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        module.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yan-soon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static String getEditModuleDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        descriptor.getModuleCode().ifPresent(code -\u003e sb.append(PREFIX_CODE).append(code.toString()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        descriptor.getModularCredits().ifPresent(credits -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                sb.append(PREFIX_CREDITS).append(credits.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "yan-soon": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_FIRST_MODULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_SECOND_MODULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Index INDEX_THIRD_MODULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "yan-soon": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS3216;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_CS3216;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NON_CORE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "import seedu.address.model.GradPad;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "silvernitro"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().withCode(\"CS2103T\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            .withModularCredits(\"4\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            .withTags(\"core\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "    public static final Module CS1231 \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .withModularCredits(\"4\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yan-soon"
        },
        "content": "            .withTags(\"core\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final Module CS3216 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "            new ModuleBuilder().withCode(VALID_CODE_CS3216).withModularCredits(VALID_CREDITS_CS3216)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "                    .withTags(VALID_TAG_NON_CORE).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "     * Returns an {@code GradPad} with all the typical modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "    public static GradPad getTypicalGradPad() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        GradPad ab \u003d new GradPad();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "silvernitro"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaokiat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS3216));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static int getTypicalTotalMc() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        int totalMc \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Module module: getTypicalModules()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            totalMc +\u003d Integer.parseInt(module.getModularCredits().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return totalMc;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "silvernitro"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaokiat": 6,
      "silvernitro": 41,
      "mhdsyfq": 8,
      "yan-soon": 3
    }
  }
]
